{"file_contents":{"README.md":{"content":"# CommerceRoles\n","size_bytes":16},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nShopLink is a multi-role commerce application that connects three types of users in a B2B marketplace. Admins manage a global product catalog, Retailers create stores and set prices for products from the catalog, and Shop Owners browse stores and place orders. The application features real-time notifications for order events and implements a comprehensive order management system with status tracking.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript in a Vite-based development environment\n- **UI Library**: Radix UI components with shadcn/ui design system for consistent styling\n- **Styling**: Tailwind CSS with CSS custom properties for theming\n- **State Management**: Zustand for global state (auth, cart) with React Query for server state\n- **Routing**: Wouter for client-side routing with role-based access control\n- **Real-time Communication**: WebSocket integration for live notifications\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript for type safety across the full stack\n- **API Design**: RESTful endpoints with role-based middleware authentication\n- **Real-time Features**: WebSocket server using native WebSocket API for order notifications\n- **Authentication**: JWT-based authentication with role-based authorization middleware\n\n## Database Design\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Connection**: Neon serverless PostgreSQL with connection pooling\n- **Schema**: Role-based user system, product catalog, store management, listings, and order tracking\n- **Key Entities**: Users (3 roles), Stores, Product Catalog, Listings, Orders, Order Items, Order Events\n\n## Authentication & Authorization\n- **Authentication Method**: JWT tokens with bcrypt/argon2 password hashing\n- **Authorization**: Role-based access control with middleware guards\n- **Token Storage**: Local storage with Zustand persistence\n- **Session Management**: Automatic token refresh and session validation\n\n## Real-time Features\n- **WebSocket Implementation**: Native WebSocket server for real-time order notifications\n- **Event Types**: Order placed, accepted, rejected, status updates, delivery notifications\n- **Client Management**: User-specific WebSocket connections with automatic reconnection\n- **Notification System**: Toast notifications with role-specific messaging\n\n## Development Setup\n- **Monorepo Structure**: Shared schema and types between client and server\n- **Build System**: Vite for frontend bundling, esbuild for backend compilation\n- **Development Tools**: TypeScript compilation, hot module replacement, error overlays\n- **Code Organization**: Path aliases for clean imports, shared utilities and types\n\n# External Dependencies\n\n## Database & Storage\n- **PostgreSQL**: Primary database via Neon serverless platform\n- **Drizzle ORM**: Type-safe database operations and migrations\n- **Connection Pooling**: @neondatabase/serverless for optimized connections\n\n## UI & Styling\n- **Radix UI**: Comprehensive accessible component library\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **shadcn/ui**: Pre-built component system with consistent styling\n- **Lucide React**: Icon library for UI elements\n\n## Authentication & Security\n- **bcrypt/argon2**: Password hashing libraries for secure authentication\n- **jsonwebtoken**: JWT token generation and validation\n- **Role-based middleware**: Custom authorization guards\n\n## Development & Build Tools\n- **Vite**: Frontend build tool with HMR and optimized bundling\n- **esbuild**: Fast TypeScript compilation for backend\n- **Replit Integration**: Development environment plugins and error handling\n- **TypeScript**: Full-stack type safety with shared type definitions\n\n## Real-time Communication\n- **WebSocket**: Native WebSocket implementation for real-time features\n- **Custom WebSocket Client**: Connection management and reconnection logic\n\n## State Management\n- **React Query**: Server state management with caching and synchronization\n- **Zustand**: Client-side state management with persistence\n- **React Hook Form**: Form state management with validation","size_bytes":4264},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        // Brand colors\n        'zomato-red': '#CB202D',\n        'mine-shaft': '#2D2D2D',\n        'desert-storm': '#F4F4F2',\n        'valencia-red': '#D94148',\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2926},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport { z } from \"zod\";\nimport { insertUserSchema, insertStoreSchema, insertProductCatalogSchema, insertListingSchema, insertOrderSchema, insertDeliveryRequestSchema } from \"@shared/schema\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"supersecret\";\n\n// Middleware for authentication\nconst authenticateToken = async (req: any, res: any, next: any) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as any;\n    const user = await storage.getUser(decoded.userId);\n    if (!user) {\n      return res.status(401).json({ message: 'Invalid token' });\n    }\n    req.user = user;\n    next();\n  } catch (error) {\n    return res.status(403).json({ message: 'Invalid token' });\n  }\n};\n\n// Middleware for role authorization\nconst requireRole = (...roles: string[]) => (req: any, res: any, next: any) => {\n  if (!req.user || !roles.includes(req.user.role)) {\n    return res.status(403).json({ message: 'Insufficient permissions' });\n  }\n  next();\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  \n  // WebSocket setup for real-time notifications\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  const clients = new Map<string, WebSocket>();\n  \n  wss.on('connection', (ws: WebSocket, req) => {\n    const url = new URL(req.url!, `http://${req.headers.host}`);\n    const userId = url.searchParams.get('userId');\n    \n    if (userId) {\n      clients.set(userId, ws);\n      console.log(`User ${userId} connected to WebSocket`);\n    }\n\n    ws.on('close', () => {\n      if (userId) {\n        clients.delete(userId);\n        console.log(`User ${userId} disconnected from WebSocket`);\n      }\n    });\n  });\n\n  // Helper function to emit order events\n  const emitOrderEvent = (orderId: string, ownerId: string, retailerId: string, event: string, payload: any) => {\n    [ownerId, retailerId].forEach(userId => {\n      const client = clients.get(userId);\n      if (client && client.readyState === WebSocket.OPEN) {\n        client.send(JSON.stringify({ orderId, event, payload }));\n      }\n    });\n  };\n\n  // Helper function to broadcast delivery notifications to all delivery boys\n  const broadcastToDeliveryBoys = (event: string, payload: any) => {\n    clients.forEach((client, userId) => {\n      if (client.readyState === WebSocket.OPEN) {\n        // We'll check if user is delivery boy when sending\n        client.send(JSON.stringify({ type: event, payload }));\n      }\n    });\n  };\n\n  // Authentication routes\n  app.post('/api/auth/register', async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: 'Email already registered' });\n      }\n      \n      // Hash password\n      const passwordHash = await bcrypt.hash(userData.passwordHash, 10);\n      \n      const user = await storage.createUser({\n        ...userData,\n        passwordHash\n      });\n      \n      res.status(201).json({ message: 'User created successfully', userId: user.id });\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid input data' });\n    }\n  });\n\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ message: 'Invalid credentials' });\n      }\n      \n      const isValidPassword = await bcrypt.compare(password, user.passwordHash);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: 'Invalid credentials' });\n      }\n      \n      const accessToken = jwt.sign({ userId: user.id, role: user.role }, JWT_SECRET, { expiresIn: '24h' });\n      const refreshToken = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: '7d' });\n      \n      res.json({\n        accessToken,\n        refreshToken,\n        user: {\n          id: user.id,\n          email: user.email,\n          fullName: user.fullName,\n          role: user.role\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ message: 'Login failed' });\n    }\n  });\n\n  // Refresh access token using refresh token\n  app.post('/api/auth/refresh', async (req, res) => {\n    try {\n      const { refreshToken } = req.body;\n      \n      if (!refreshToken) {\n        return res.status(401).json({ message: 'Refresh token required' });\n      }\n      \n      const decoded = jwt.verify(refreshToken, JWT_SECRET) as any;\n      const user = await storage.getUserById(decoded.userId);\n      \n      if (!user) {\n        return res.status(401).json({ message: 'Invalid refresh token' });\n      }\n      \n      // Generate new access token\n      const accessToken = jwt.sign({ userId: user.id, role: user.role }, JWT_SECRET, { expiresIn: '24h' });\n      \n      res.json({ accessToken });\n    } catch (error) {\n      res.status(403).json({ message: 'Invalid refresh token' });\n    }\n  });\n\n  // Logout endpoint\n  app.post('/api/auth/logout', authenticateToken, async (req: any, res) => {\n    // In a more complex app, you might invalidate the token in a blacklist\n    // For now, just return success - token cleanup is handled client-side\n    res.json({ message: 'Logout successful' });\n  });\n\n  app.get('/api/auth/me', authenticateToken, async (req: any, res) => {\n    res.json({\n      user: {\n        id: req.user.id,\n        email: req.user.email,\n        fullName: req.user.fullName,\n        role: req.user.role\n      }\n    });\n  });\n\n  // Update user profile\n  app.patch('/api/auth/profile', authenticateToken, async (req: any, res) => {\n    try {\n      const { fullName, email, phone } = req.body;\n      \n      // Check if email is being changed and if it's already in use\n      if (email && email !== req.user.email) {\n        const existingUser = await storage.getUserByEmail(email);\n        if (existingUser && existingUser.id !== req.user.id) {\n          return res.status(400).json({ message: 'Email already in use' });\n        }\n      }\n\n      const updatedUser = await storage.updateUser(req.user.id, {\n        fullName,\n        email,\n        phone\n      });\n\n      res.json({\n        user: {\n          id: updatedUser.id,\n          email: updatedUser.email,\n          fullName: updatedUser.fullName,\n          role: updatedUser.role,\n          phone: updatedUser.phone\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to update profile' });\n    }\n  });\n\n  // Change user password\n  app.post('/api/auth/change-password', authenticateToken, async (req: any, res) => {\n    try {\n      const { currentPassword, newPassword } = req.body;\n      \n      // Verify current password\n      const user = await storage.getUserById(req.user.id);\n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      const isValidPassword = await bcrypt.compare(currentPassword, user.passwordHash);\n      if (!isValidPassword) {\n        return res.status(400).json({ message: 'Current password is incorrect' });\n      }\n\n      // Hash new password\n      const newPasswordHash = await bcrypt.hash(newPassword, 10);\n      \n      await storage.updateUser(req.user.id, {\n        passwordHash: newPasswordHash\n      });\n\n      res.json({ message: 'Password changed successfully' });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to change password' });\n    }\n  });\n\n  // Admin routes - Product Catalog\n  app.post('/api/admin/catalog', authenticateToken, requireRole('ADMIN'), async (req: any, res) => {\n    try {\n      const productData = insertProductCatalogSchema.parse({\n        ...req.body,\n        createdById: req.user.id\n      });\n      \n      const product = await storage.createProduct(productData);\n      res.status(201).json(product);\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid product data' });\n    }\n  });\n\n  app.get('/api/admin/catalog', authenticateToken, requireRole('ADMIN'), async (req: any, res) => {\n    try {\n      const { search, page = 1, limit = 20 } = req.query;\n      const products = await storage.getProducts({ search, page: parseInt(page), limit: parseInt(limit) });\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch products' });\n    }\n  });\n\n  app.put('/api/admin/catalog/:id', authenticateToken, requireRole('ADMIN'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n      const product = await storage.updateProduct(id, updateData);\n      res.json(product);\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to update product' });\n    }\n  });\n\n  app.delete('/api/admin/catalog/:id', authenticateToken, requireRole('ADMIN'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteProduct(id);\n      res.json({ message: 'Product deleted successfully' });\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to delete product' });\n    }\n  });\n\n  // Admin routes - User Management\n  app.get('/api/admin/users', authenticateToken, requireRole('ADMIN'), async (req: any, res) => {\n    try {\n      const { page = 1, limit = 20, role, search } = req.query;\n      // For now, we'll get all users. In a real system, you'd implement pagination and filtering\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch users' });\n    }\n  });\n\n  app.get('/api/admin/stores', authenticateToken, requireRole('ADMIN'), async (req: any, res) => {\n    try {\n      const { search, city, status } = req.query;\n      const stores = await storage.getStores({ search, city });\n      res.json(stores);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch stores' });\n    }\n  });\n\n  app.get('/api/admin/orders', authenticateToken, requireRole('ADMIN'), async (req: any, res) => {\n    try {\n      const { status, page = 1, limit = 20 } = req.query;\n      const orders = await storage.getAllOrdersForAdmin();\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch orders' });\n    }\n  });\n\n  app.get('/api/admin/analytics', authenticateToken, requireRole('ADMIN'), async (req: any, res) => {\n    try {\n      const analytics = await storage.getSystemAnalytics();\n      res.json(analytics);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch analytics' });\n    }\n  });\n\n  // Retailer access to global catalog for adding products\n  app.get('/api/retailer/catalog', authenticateToken, requireRole('RETAILER'), async (req: any, res) => {\n    try {\n      const { search, page = 1, limit = 50 } = req.query;\n      const products = await storage.getProducts({ search, page: parseInt(page), limit: parseInt(limit) });\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch products' });\n    }\n  });\n\n  // Allow retailers to create products in the global catalog\n  app.post('/api/retailer/catalog', authenticateToken, requireRole('RETAILER'), async (req: any, res) => {\n    try {\n      const productData = insertProductCatalogSchema.parse({\n        ...req.body,\n        createdById: req.user.id\n      });\n      \n      const product = await storage.createProduct(productData);\n      res.status(201).json(product);\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid product data' });\n    }\n  });\n\n  // Retailer routes - Store management\n  app.post('/api/retailer/store', authenticateToken, requireRole('RETAILER'), async (req: any, res) => {\n    try {\n      const existingStore = await storage.getStoreByOwnerId(req.user.id);\n      \n      if (existingStore) {\n        // Update existing store\n        const updateData = req.body;\n        const store = await storage.updateStore(existingStore.id, updateData);\n        res.json(store);\n      } else {\n        // Create new store\n        const storeData = insertStoreSchema.parse({\n          ...req.body,\n          ownerId: req.user.id\n        });\n        const store = await storage.createStore(storeData);\n        res.status(201).json(store);\n      }\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid store data' });\n    }\n  });\n\n  app.get('/api/retailer/store/me', authenticateToken, requireRole('RETAILER'), async (req: any, res) => {\n    try {\n      const store = await storage.getStoreByOwnerId(req.user.id);\n      res.json(store);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch store' });\n    }\n  });\n\n  // Retailer routes - Listings\n  app.post('/api/retailer/listings', authenticateToken, requireRole('RETAILER'), async (req: any, res) => {\n    try {\n      const store = await storage.getStoreByOwnerId(req.user.id);\n      if (!store) {\n        return res.status(400).json({ message: 'Store not found' });\n      }\n      \n      const listingData = insertListingSchema.parse({\n        ...req.body,\n        storeId: store.id\n      });\n      \n      const listing = await storage.createListing(listingData);\n      res.status(201).json(listing);\n    } catch (error) {\n      console.error('Listing creation error:', error);\n      console.error('Request body:', req.body);\n      res.status(400).json({ \n        message: 'Invalid listing data', \n        details: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  app.get('/api/retailer/listings', authenticateToken, requireRole('RETAILER'), async (req: any, res) => {\n    try {\n      const store = await storage.getStoreByOwnerId(req.user.id);\n      if (!store) {\n        return res.status(400).json({ message: 'Store not found' });\n      }\n      \n      const { available, search } = req.query;\n      const listings = await storage.getListingsByStore(store.id, { \n        available: available ? available === 'true' : undefined,\n        search: search as string\n      });\n      res.json(listings);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch listings' });\n    }\n  });\n\n  app.put('/api/retailer/listings/:id', authenticateToken, requireRole('RETAILER'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n      const listing = await storage.updateListing(id, updateData);\n      res.json(listing);\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to update listing' });\n    }\n  });\n\n  // Delivery Boy routes for retailers - Updated to use users table\n  app.get('/api/retailer/delivery-boys', authenticateToken, requireRole('RETAILER'), async (req: any, res) => {\n    try {\n      const deliveryBoys = await storage.getLinkedDeliveryBoys(req.user.id);\n      res.json(deliveryBoys);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to get delivery boys' });\n    }\n  });\n\n  // Search delivery boys by ID route - Updated to use users table (MUST come before :id route)\n  app.get('/api/retailer/delivery-boys/search-by-id', authenticateToken, requireRole('RETAILER'), async (req: any, res) => {\n    try {\n      const { deliveryBoyId } = req.query;\n      \n      if (!deliveryBoyId) {\n        return res.status(400).json({ message: 'Delivery boy ID is required for search' });\n      }\n      \n      const result = await storage.findDeliveryBoyById(req.user.id, deliveryBoyId as string);\n      \n      if (!result) {\n        return res.status(404).json({ message: 'Delivery boy not found' });\n      }\n      \n      res.json({\n        user: {\n          id: result.user.id,\n          fullName: result.user.fullName,\n          email: result.user.email,\n          phone: result.user.phone,\n          role: result.user.role\n        },\n        alreadyAdded: result.alreadyAdded\n      });\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to search delivery boy' });\n    }\n  });\n\n  app.get('/api/retailer/delivery-boys/:id', authenticateToken, requireRole('RETAILER'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const deliveryBoy = await storage.getDeliveryBoy(id);\n      \n      if (!deliveryBoy) {\n        return res.status(404).json({ message: 'Delivery boy not found' });\n      }\n      \n      res.json(deliveryBoy);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to get delivery boy' });\n    }\n  });\n\n  // Add delivery boy to retailer\n  app.post('/api/retailer/delivery-boys', authenticateToken, requireRole('RETAILER'), async (req: any, res) => {\n    try {\n      const { deliveryBoyId, notes } = req.body;\n      \n      if (!deliveryBoyId) {\n        return res.status(400).json({ message: 'Delivery boy ID is required' });\n      }\n      \n      // Check if delivery boy exists and has the right role\n      const deliveryBoyUser = await storage.getUserById(deliveryBoyId);\n      if (!deliveryBoyUser || deliveryBoyUser.role !== 'DELIVERY_BOY') {\n        return res.status(404).json({ message: 'Delivery boy not found' });\n      }\n      \n      // Check if already linked\n      const alreadyLinked = await storage.isDeliveryBoyLinkedToRetailer(req.user.id, deliveryBoyId);\n      if (alreadyLinked) {\n        return res.status(400).json({ message: 'Delivery boy already added to your account' });\n      }\n      \n      // Add the relationship\n      const relationship = await storage.addDeliveryBoyToRetailer(req.user.id, deliveryBoyId, req.user.id, notes);\n      \n      res.status(201).json({ \n        message: 'Delivery boy added successfully',\n        deliveryBoy: {\n          id: deliveryBoyUser.id,\n          fullName: deliveryBoyUser.fullName,\n          email: deliveryBoyUser.email,\n          phone: deliveryBoyUser.phone,\n          linkedAt: relationship.addedAt,\n          notes: relationship.notes\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to add delivery boy' });\n    }\n  });\n\n  // Remove delivery boy from retailer\n  app.delete('/api/retailer/delivery-boys/:deliveryBoyId', authenticateToken, requireRole('RETAILER'), async (req: any, res) => {\n    try {\n      const { deliveryBoyId } = req.params;\n      \n      // Check if the relationship exists\n      const relationship = await storage.getRetailerDeliveryBoyRelationship(req.user.id, deliveryBoyId);\n      if (!relationship) {\n        return res.status(404).json({ message: 'Delivery boy not found in your account' });\n      }\n      \n      // Remove the relationship\n      await storage.removeDeliveryBoyFromRetailer(req.user.id, deliveryBoyId);\n      \n      res.json({ message: 'Delivery boy removed successfully' });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to remove delivery boy' });\n    }\n  });\n\n  // Public routes - Store discovery\n  app.get('/api/stores', async (req, res) => {\n    try {\n      const { city, pincode, search, name, id } = req.query;\n      const stores = await storage.getStores({\n        city: city as string,\n        pincode: pincode as string,\n        search: search as string,\n        name: name as string,\n        id: id as string\n      });\n      res.json(stores);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch stores' });\n    }\n  });\n\n  // Get popular retailers\n  app.get('/api/stores/popular', async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 10;\n      const popularStores = await storage.getPopularRetailers(limit);\n      res.json(popularStores);\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to fetch popular retailers' });\n    }\n  });\n\n  app.get('/api/stores/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const store = await storage.getStoreWithListings(id);\n      if (!store) {\n        return res.status(404).json({ message: 'Store not found' });\n      }\n      res.json(store);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch store' });\n    }\n  });\n\n  // Order routes - Shop Owner\n  app.post('/api/orders', authenticateToken, requireRole('SHOP_OWNER'), async (req: any, res) => {\n    try {\n      const { storeId, items, deliveryType, deliveryAt, note } = req.body;\n      \n      // Get store and retailer info\n      const store = await storage.getStore(storeId);\n      if (!store) {\n        return res.status(404).json({ message: 'Store not found' });\n      }\n      \n      // Calculate total amount\n      let totalAmount = 0;\n      const orderItemsData = [];\n      \n      for (const item of items) {\n        const listing = await storage.getListing(item.listingId);\n        if (!listing) {\n          return res.status(400).json({ message: `Listing ${item.listingId} not found` });\n        }\n        \n        const itemTotal = parseFloat(listing.priceRetail.toString()) * item.qty;\n        totalAmount += itemTotal;\n        \n        orderItemsData.push({\n          listingId: item.listingId,\n          qty: item.qty,\n          priceAt: listing.priceRetail\n        });\n      }\n      \n      // Create order\n      const orderData = insertOrderSchema.parse({\n        ownerId: req.user.id,\n        retailerId: store.ownerId,\n        storeId,\n        totalAmount: totalAmount.toString(),\n        deliveryType,\n        deliveryAt: deliveryAt ? new Date(deliveryAt) : undefined,\n        note\n      });\n      \n      const order = await storage.createOrder(orderData);\n      \n      // Create order items\n      const itemsWithOrderId = orderItemsData.map(item => ({\n        ...item,\n        orderId: order.id\n      }));\n      await storage.createOrderItems(itemsWithOrderId);\n      \n      // Create order event\n      await storage.createOrderEvent({\n        orderId: order.id,\n        type: 'PLACED',\n        message: 'Order placed successfully'\n      });\n      \n      // Emit real-time notification\n      emitOrderEvent(order.id, req.user.id, store.ownerId, 'orderPlaced', {\n        orderId: order.id,\n        status: order.status,\n        totalAmount: order.totalAmount\n      });\n      \n      res.status(201).json(order);\n    } catch (error) {\n      console.error('Order creation error:', error);\n      res.status(400).json({ message: 'Failed to create order' });\n    }\n  });\n\n  app.get('/api/orders/mine', authenticateToken, async (req: any, res) => {\n    try {\n      const orders = await storage.getOrdersByOwner(req.user.id);\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch orders' });\n    }\n  });\n\n  app.get('/api/orders/:id', authenticateToken, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const order = await storage.getOrder(id);\n      \n      if (!order) {\n        return res.status(404).json({ message: 'Order not found' });\n      }\n      \n      // Check if user has access to this order\n      if (order.ownerId !== req.user.id && order.retailerId !== req.user.id) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      \n      res.json(order);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch order' });\n    }\n  });\n\n  // Retailer order management\n  app.get('/api/retailer/orders', authenticateToken, requireRole('RETAILER'), async (req: any, res) => {\n    try {\n      const orders = await storage.getOrdersByRetailer(req.user.id);\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch orders' });\n    }\n  });\n\n  app.post('/api/orders/:id/accept', authenticateToken, requireRole('RETAILER'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { deliveryAt } = req.body;\n      \n      const order = await storage.getOrder(id);\n      if (!order || order.retailerId !== req.user.id) {\n        return res.status(404).json({ message: 'Order not found' });\n      }\n      \n      if (order.status !== 'PENDING') {\n        return res.status(400).json({ message: 'Order cannot be accepted' });\n      }\n      \n      await storage.updateOrderStatus(id, 'ACCEPTED');\n      await storage.createOrderEvent({\n        orderId: id,\n        type: 'ACCEPTED',\n        message: `Order accepted${deliveryAt ? ` with delivery scheduled for ${new Date(deliveryAt).toLocaleDateString()}` : ''}`\n      });\n      \n      emitOrderEvent(id, order.ownerId, order.retailerId, 'orderAccepted', {\n        orderId: id,\n        status: 'ACCEPTED',\n        deliveryAt\n      });\n      \n      res.json({ message: 'Order accepted successfully' });\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to accept order' });\n    }\n  });\n\n  app.post('/api/orders/:id/reject', authenticateToken, requireRole('RETAILER'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { reason } = req.body;\n      \n      const order = await storage.getOrder(id);\n      if (!order || order.retailerId !== req.user.id) {\n        return res.status(404).json({ message: 'Order not found' });\n      }\n      \n      if (order.status !== 'PENDING') {\n        return res.status(400).json({ message: 'Order cannot be rejected' });\n      }\n      \n      await storage.updateOrderStatus(id, 'REJECTED');\n      await storage.createOrderEvent({\n        orderId: id,\n        type: 'REJECTED',\n        message: `Order rejected: ${reason || 'No reason provided'}`\n      });\n      \n      emitOrderEvent(id, order.ownerId, order.retailerId, 'orderRejected', {\n        orderId: id,\n        status: 'REJECTED',\n        reason\n      });\n      \n      res.json({ message: 'Order rejected successfully' });\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to reject order' });\n    }\n  });\n\n  app.post('/api/orders/:id/status', authenticateToken, requireRole('RETAILER'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n      \n      const order = await storage.getOrder(id);\n      if (!order || order.retailerId !== req.user.id) {\n        return res.status(404).json({ message: 'Order not found' });\n      }\n      \n      const validTransitions: { [key: string]: string[] } = {\n        'ACCEPTED': ['READY'],\n        'READY': ['OUT_FOR_DELIVERY', 'COMPLETED'],\n        'OUT_FOR_DELIVERY': ['COMPLETED']\n      };\n      \n      if (!validTransitions[order.status]?.includes(status)) {\n        return res.status(400).json({ message: 'Invalid status transition' });\n      }\n      \n      await storage.updateOrderStatus(id, status);\n      await storage.createOrderEvent({\n        orderId: id,\n        type: status,\n        message: `Order status updated to ${status.toLowerCase().replace('_', ' ')}`\n      });\n      \n      emitOrderEvent(id, order.ownerId, order.retailerId, 'orderStatusChanged', {\n        orderId: id,\n        status,\n        previousStatus: order.status\n      });\n      \n      res.json({ message: 'Order status updated successfully' });\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to update order status' });\n    }\n  });\n\n  // Assign order to delivery boy\n  app.post('/api/orders/:id/assign-delivery-boy', authenticateToken, requireRole('RETAILER'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { deliveryBoyId } = req.body;\n      \n      const order = await storage.getOrder(id);\n      if (!order || order.retailerId !== req.user.id) {\n        return res.status(404).json({ message: 'Order not found' });\n      }\n\n      // Verify delivery boy exists and belongs to retailer\n      const deliveryBoy = await storage.getDeliveryBoy(deliveryBoyId);\n      if (!deliveryBoy) {\n        return res.status(400).json({ message: 'Delivery boy not found' });\n      }\n      \n      // Check if delivery boy is linked to this retailer\n      const isLinked = await storage.isDeliveryBoyLinkedToRetailer(req.user.id, deliveryBoyId);\n      if (!isLinked) {\n        return res.status(400).json({ message: 'Delivery boy not in your team' });\n      }\n\n      // Update order with delivery boy assignment\n      await storage.assignOrderToDeliveryBoy(id, deliveryBoyId);\n      \n      await storage.createOrderEvent({\n        orderId: id,\n        type: 'ASSIGNED_DELIVERY_BOY',\n        message: `Order assigned to delivery boy: ${deliveryBoy.fullName}`\n      });\n\n      // Create initial khatabook entries for delivery assignment\n      const totalAmount = parseFloat(order.totalAmount);\n      \n      // Create ledger entry for shop owner (debit - they owe money)\n      await storage.addLedgerEntry({\n        userId: order.ownerId,\n        counterpartyId: order.retailerId,\n        orderId: id,\n        entryType: 'DEBIT',\n        transactionType: 'ORDER_DEBIT',\n        amount: totalAmount.toString(),\n        description: `Order #${id.slice(-8)} - Delivery assigned - Amount due: ₹${totalAmount}`,\n        referenceId: id,\n        metadata: JSON.stringify({ \n          orderValue: totalAmount,\n          deliveryBoy: deliveryBoy.fullName,\n          status: 'DELIVERY_ASSIGNED'\n        })\n      });\n\n      // Create corresponding credit entry for retailer\n      await storage.addLedgerEntry({\n        userId: order.retailerId,\n        counterpartyId: order.ownerId,\n        orderId: id,\n        entryType: 'CREDIT',\n        transactionType: 'ORDER_PLACED',\n        amount: totalAmount.toString(),\n        description: `Order #${id.slice(-8)} - Delivery assigned - Amount receivable: ₹${totalAmount}`,\n        referenceId: id,\n        metadata: JSON.stringify({ \n          orderValue: totalAmount,\n          deliveryBoy: deliveryBoy.fullName,\n          status: 'DELIVERY_ASSIGNED'\n        })\n      });\n\n      emitOrderEvent(id, order.ownerId, order.retailerId, 'deliveryBoyAssigned', {\n        orderId: id,\n        deliveryBoy: deliveryBoy.fullName,\n        deliveryBoyPhone: deliveryBoy.phone\n      });\n\n      res.json({ message: 'Order assigned to delivery boy successfully' });\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to assign order to delivery boy' });\n    }\n  });\n\n  app.get('/api/orders/:id/timeline', authenticateToken, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const order = await storage.getOrder(id);\n      \n      if (!order) {\n        return res.status(404).json({ message: 'Order not found' });\n      }\n      \n      // Check access\n      if (order.ownerId !== req.user.id && order.retailerId !== req.user.id) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      \n      const timeline = await storage.getOrderEvents(id);\n      res.json(timeline);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch order timeline' });\n    }\n  });\n\n  // Cancel order (Shop Owner)\n  app.post('/api/orders/:id/cancel', authenticateToken, requireRole('SHOP_OWNER'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const order = await storage.getOrder(id);\n      \n      if (!order || order.ownerId !== req.user.id) {\n        return res.status(404).json({ message: 'Order not found' });\n      }\n      \n      if (['COMPLETED', 'CANCELLED'].includes(order.status)) {\n        return res.status(400).json({ message: 'Order cannot be cancelled' });\n      }\n      \n      await storage.updateOrderStatus(id, 'CANCELLED');\n      await storage.createOrderEvent({\n        orderId: id,\n        type: 'CANCELLED',\n        message: 'Order cancelled by customer'\n      });\n      \n      emitOrderEvent(id, order.ownerId, order.retailerId, 'orderCancelled', {\n        orderId: id,\n        status: 'CANCELLED'\n      });\n      \n      res.json({ message: 'Order cancelled successfully' });\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to cancel order' });\n    }\n  });\n\n  // Payment confirmation by delivery boy/retailer\n  app.post('/api/orders/:id/payment-received', authenticateToken, requireRole('RETAILER'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { amountReceived, note } = req.body;\n      \n      const order = await storage.getOrder(id);\n      if (!order) {\n        return res.status(404).json({ message: 'Order not found' });\n      }\n      \n      if (order.retailerId !== req.user.id) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      \n      if (order.paymentReceived) {\n        return res.status(400).json({ message: 'Payment already confirmed' });\n      }\n      \n      const totalAmount = parseFloat(order.totalAmount);\n      const amount = parseFloat(amountReceived) || totalAmount;\n      const remainingBalance = totalAmount - amount;\n      const isPartialPayment = remainingBalance > 0;\n      \n      // Create audit trail entry\n      const auditData = {\n        orderId: id,\n        userId: req.user.id,\n        action: 'PAYMENT_RECEIVED',\n        oldAmount: \"0\",\n        newAmount: amount.toString(),\n        reason: note || (isPartialPayment ? 'Partial payment received' : 'Full payment received'),\n        metadata: JSON.stringify({\n          totalAmount,\n          amountReceived: amount,\n          remainingBalance,\n          isPartialPayment,\n          receivedBy: req.user.fullName\n        })\n      };\n      \n      // Record payment using enhanced method\n      const updatedOrder = await storage.recordPartialPayment(id, {\n        amountReceived: amount.toString(),\n        paymentReceivedAt: new Date(),\n        paymentReceivedBy: req.user.id\n      }, auditData);\n      \n      // Create order event\n      const eventMessage = isPartialPayment \n        ? `Partial payment of ₹${amount} received via Cash on Delivery. Outstanding balance: ₹${remainingBalance.toFixed(2)}`\n        : `Full payment of ₹${amount} received via Cash on Delivery`;\n        \n      await storage.createOrderEvent({\n        orderId: id,\n        type: 'PAYMENT_RECEIVED',\n        message: eventMessage\n      });\n      \n      // Add enhanced ledger entries with counterparty tracking\n      await storage.addLedgerEntry({\n        userId: order.ownerId,\n        counterpartyId: order.retailerId,\n        orderId: id,\n        entryType: 'DEBIT',\n        transactionType: 'ORDER_DEBIT',\n        amount: totalAmount.toString(),\n        description: `Order placed #${id.slice(-8)} - Total: ₹${totalAmount}`,\n        referenceId: id,\n        metadata: JSON.stringify({ orderValue: totalAmount })\n      });\n      \n      await storage.addLedgerEntry({\n        userId: order.ownerId,\n        counterpartyId: order.retailerId,\n        orderId: id,\n        entryType: 'CREDIT',\n        transactionType: 'PAYMENT_CREDIT',\n        amount: amount.toString(),\n        description: `Payment received for Order #${id.slice(-8)} - Amount: ₹${amount}${isPartialPayment ? ` (Partial)` : ''}`,\n        referenceId: id,\n        metadata: JSON.stringify({ \n          paymentType: isPartialPayment ? 'partial' : 'full',\n          amountReceived: amount,\n          remainingBalance \n        })\n      });\n      \n      await storage.addLedgerEntry({\n        userId: order.retailerId,\n        counterpartyId: order.ownerId,\n        orderId: id,\n        entryType: 'CREDIT',\n        transactionType: 'PAYMENT_CREDIT',\n        amount: amount.toString(),\n        description: `Payment collected for Order #${id.slice(-8)} - Amount: ₹${amount}${isPartialPayment ? ` (Partial)` : ''}`,\n        referenceId: id,\n        metadata: JSON.stringify({ \n          paymentType: isPartialPayment ? 'partial' : 'full',\n          amountReceived: amount,\n          remainingBalance \n        })\n      });\n      \n      // Emit real-time notification\n      emitOrderEvent(id, order.ownerId, order.retailerId, 'paymentReceived', {\n        orderId: id,\n        amountReceived: amount,\n        totalAmount,\n        remainingBalance,\n        isPartialPayment,\n        timestamp: new Date()\n      });\n      \n      res.json({ \n        message: `${isPartialPayment ? 'Partial payment' : 'Payment'} confirmation recorded successfully`,\n        amountReceived: amount,\n        totalAmount,\n        remainingBalance,\n        isPartialPayment\n      });\n    } catch (error) {\n      console.error('Payment confirmation error:', error);\n      res.status(500).json({ message: 'Failed to confirm payment' });\n    }\n  });\n\n  // Adjust payment amount by shop owner\n  app.post('/api/orders/:id/adjust-amount', authenticateToken, requireRole('SHOP_OWNER'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { adjustedAmount, adjustmentNote } = req.body;\n      \n      const order = await storage.getOrder(id);\n      if (!order) {\n        return res.status(404).json({ message: 'Order not found' });\n      }\n      \n      if (order.ownerId !== req.user.id) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      \n      if (!order.paymentReceived) {\n        return res.status(400).json({ message: 'Payment not yet received' });\n      }\n      \n      const newAmount = parseFloat(adjustedAmount);\n      const originalAmount = parseFloat(order.amountReceived || order.totalAmount);\n      const adjustment = newAmount - originalAmount;\n      \n      // Update order with adjusted amount\n      await storage.updateOrderPayment(id, {\n        amountReceived: newAmount.toString(),\n        amountAdjustedBy: req.user.id,\n        amountAdjustedAt: new Date(),\n        adjustmentNote: adjustmentNote || ''\n      });\n      \n      // Create order event\n      await storage.createOrderEvent({\n        orderId: id,\n        type: 'PAYMENT_ADJUSTED',\n        message: `Payment amount adjusted to ₹${newAmount}. ${adjustmentNote || ''}`\n      });\n      \n      if (adjustment !== 0) {\n        // Add ledger entries for the adjustment\n        const adjustmentType = adjustment > 0 ? 'Additional charge' : 'Discount applied';\n        \n        await storage.addLedgerEntry({\n          userId: order.ownerId,\n          orderId: id,\n          entryType: adjustment > 0 ? 'DEBIT' : 'CREDIT',\n          transactionType: 'PAYMENT_ADJUSTED',\n          amount: Math.abs(adjustment).toString(),\n          description: `${adjustmentType} for Order #${id.slice(-8)}. ${adjustmentNote || ''}`,\n          referenceId: id\n        });\n        \n        await storage.addLedgerEntry({\n          userId: order.retailerId,\n          orderId: id,\n          entryType: adjustment > 0 ? 'CREDIT' : 'DEBIT',\n          transactionType: 'PAYMENT_ADJUSTED',\n          amount: Math.abs(adjustment).toString(),\n          description: `${adjustmentType} for Order #${id.slice(-8)}. ${adjustmentNote || ''}`,\n          referenceId: id\n        });\n      }\n      \n      // Emit real-time notification\n      emitOrderEvent(id, order.ownerId, order.retailerId, 'paymentAdjusted', {\n        orderId: id,\n        adjustedAmount: newAmount,\n        adjustment: adjustment,\n        note: adjustmentNote\n      });\n      \n      res.json({ \n        message: 'Payment amount adjusted successfully',\n        adjustedAmount: newAmount,\n        adjustment: adjustment\n      });\n    } catch (error) {\n      console.error('Amount adjustment error:', error);\n      res.status(500).json({ message: 'Failed to adjust payment amount' });\n    }\n  });\n\n  // Get khatabook/ledger for user\n  app.get('/api/khatabook', authenticateToken, async (req: any, res) => {\n    try {\n      const { page = 1, limit = 20, type } = req.query;\n      const ledgerEntries = await storage.getLedgerEntries(req.user.id, {\n        page: parseInt(page as string),\n        limit: parseInt(limit as string),\n        type: type as string\n      });\n      res.json(ledgerEntries);\n    } catch (error) {\n      console.error('Ledger fetch error:', error);\n      res.status(500).json({ message: 'Failed to fetch ledger entries' });\n    }\n  });\n\n  // Get khatabook summary/balance\n  app.get('/api/khatabook/summary', authenticateToken, async (req: any, res) => {\n    try {\n      const { counterpartyId } = req.query;\n      const summary = await storage.getLedgerSummary(req.user.id, counterpartyId as string);\n      res.json(summary);\n    } catch (error) {\n      console.error('Ledger summary error:', error);\n      res.status(500).json({ message: 'Failed to fetch ledger summary' });\n    }\n  });\n\n  // Get individual shop owner balances for retailers\n  app.get('/api/retailer/shop-owner-balances', authenticateToken, requireRole('RETAILER'), async (req: any, res) => {\n    try {\n      const orders = await storage.getOrdersByRetailer(req.user.id);\n      \n      // Get unique shop owners from orders\n      const shopOwnerIds = Array.from(new Set(orders.map((order: any) => order.ownerId)));\n      \n      const balances = await Promise.all(\n        shopOwnerIds.map(async (shopOwnerId) => {\n          const summary = await storage.getLedgerSummary(req.user.id, shopOwnerId);\n          const shopOwner = await storage.getUser(shopOwnerId);\n          const entries = await storage.getLedgerEntries(req.user.id, { \n            counterpartyId: shopOwnerId,\n            limit: 10\n          });\n          \n          return {\n            shopOwnerId,\n            shopOwnerName: shopOwner?.fullName || 'Unknown',\n            shopOwnerEmail: shopOwner?.email,\n            currentBalance: summary.currentBalance || 0,\n            totalCredits: summary.totalCredits || 0,\n            totalDebits: summary.totalDebits || 0,\n            recentEntries: entries.entries || []\n          };\n        })\n      );\n\n      // Calculate overall totals\n      const totalBalance = balances.reduce((sum, b) => sum + parseFloat(b.currentBalance.toString()), 0);\n      const totalCredits = balances.reduce((sum, b) => sum + parseFloat(b.totalCredits.toString()), 0);\n      const totalDebits = balances.reduce((sum, b) => sum + parseFloat(b.totalDebits.toString()), 0);\n\n      res.json({\n        shopOwnerBalances: balances,\n        totals: {\n          currentBalance: totalBalance,\n          totalCredits: totalCredits,\n          totalDebits: totalDebits\n        }\n      });\n    } catch (error) {\n      console.error('Shop owner balances error:', error);\n      res.status(500).json({ message: 'Failed to fetch shop owner balances' });\n    }\n  });\n\n  // Get outstanding balance between shop owner and retailer\n  app.get('/api/outstanding-balance/:counterpartyId', authenticateToken, async (req: any, res) => {\n    try {\n      const { counterpartyId } = req.params;\n      const balance = await storage.getOutstandingBalance(req.user.id, counterpartyId);\n      res.json({ outstandingBalance: balance, counterpartyId });\n    } catch (error) {\n      console.error('Outstanding balance error:', error);\n      res.status(500).json({ message: 'Failed to fetch outstanding balance' });\n    }\n  });\n\n  // Balance settlement endpoint\n  app.post('/api/settle-balances', authenticateToken, requireRole('SHOP_OWNER'), async (req: any, res) => {\n    try {\n      const { \n        retailerId, \n        currentOrderPayment = 0, \n        outstandingBalancePayment = 0, \n        totalPayment,\n        orderId,\n        note \n      } = req.body;\n\n      if (!retailerId) {\n        return res.status(400).json({ message: 'Retailer ID is required' });\n      }\n\n      const actualTotalPayment = totalPayment || (currentOrderPayment + outstandingBalancePayment);\n\n      if (actualTotalPayment <= 0) {\n        return res.status(400).json({ message: 'Payment amount must be greater than 0' });\n      }\n\n      // Record the settlement\n      const settlementResult = await storage.settleBalances(req.user.id, retailerId, {\n        currentOrderPayment,\n        outstandingBalancePayment,\n        totalPayment: actualTotalPayment,\n        orderId,\n        note\n      });\n\n      // Create audit trail for settlement\n      await storage.addPaymentAudit({\n        orderId: orderId || null,\n        userId: req.user.id,\n        action: 'BALANCE_SETTLED',\n        oldAmount: outstandingBalancePayment > 0 ? (await storage.getOutstandingBalance(req.user.id, retailerId)).toString() : \"0\",\n        newAmount: actualTotalPayment.toString(),\n        reason: note || 'Balance settlement',\n        metadata: JSON.stringify({\n          retailerId,\n          currentOrderPayment,\n          outstandingBalancePayment,\n          totalPayment: actualTotalPayment,\n          settlementType: 'manual'\n        })\n      });\n\n      // If there's a current order payment, update the order\n      if (orderId && currentOrderPayment > 0) {\n        const order = await storage.getOrder(orderId);\n        if (order) {\n          await storage.createOrderEvent({\n            orderId,\n            type: 'PAYMENT_RECEIVED',\n            message: `Settlement payment of ₹${currentOrderPayment} applied to order. ${note || ''}`\n          });\n        }\n      }\n\n      res.json({\n        message: 'Balance settlement recorded successfully',\n        totalSettled: actualTotalPayment,\n        currentOrderPayment,\n        outstandingBalancePayment,\n        remainingBalance: await storage.getOutstandingBalance(req.user.id, retailerId)\n      });\n    } catch (error) {\n      console.error('Balance settlement error:', error);\n      res.status(500).json({ message: 'Failed to process balance settlement' });\n    }\n  });\n\n  // Get payment audit trail for an order\n  app.get('/api/orders/:id/audit-trail', authenticateToken, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      \n      const order = await storage.getOrder(id);\n      if (!order) {\n        return res.status(404).json({ message: 'Order not found' });\n      }\n      \n      // Check access\n      if (order.ownerId !== req.user.id && order.retailerId !== req.user.id) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      \n      const auditTrail = await storage.getPaymentAuditTrail(id);\n      res.json(auditTrail);\n    } catch (error) {\n      console.error('Audit trail error:', error);\n      res.status(500).json({ message: 'Failed to fetch audit trail' });\n    }\n  });\n\n  // Get catalog for shop owners\n  app.get('/api/catalog', async (req, res) => {\n    try {\n      const { search } = req.query;\n      const products = await storage.getProducts({ search: search as string });\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch catalog' });\n    }\n  });\n\n  // Get popular products based on order history\n  app.get('/api/popular-products', async (req, res) => {\n    try {\n      const { limit = 6 } = req.query;\n      const popularProducts = await storage.getPopularProducts(parseInt(limit as string));\n      res.json(popularProducts);\n    } catch (error) {\n      console.error('Popular products error:', error);\n      res.status(500).json({ message: 'Failed to fetch popular products' });\n    }\n  });\n\n  // Seed demo data\n  app.post('/api/seed', async (req, res) => {\n    try {\n      // Create demo users\n      const adminPassword = await bcrypt.hash('12345678', 10);\n      const retailPassword = await bcrypt.hash('12345678', 10);\n      const shopPassword = await bcrypt.hash('12345678', 10);\n      \n      const admin = await storage.createUser({\n        email: 'admin@gmail.com',\n        passwordHash: adminPassword,\n        role: 'ADMIN',\n        fullName: 'Admin User',\n        phone: '+91-9876543210'\n      });\n      \n      const retailer = await storage.createUser({\n        email: 'retail@gmail.com',\n        passwordHash: retailPassword,\n        role: 'RETAILER',\n        fullName: 'Retailer User',\n        phone: '+91-9876543211'\n      });\n      \n      const shopOwner = await storage.createUser({\n        email: 'shop@gmail.com',\n        passwordHash: shopPassword,\n        role: 'SHOP_OWNER',\n        fullName: 'Shop Owner',\n        phone: '+91-9876543212'\n      });\n      \n      // Create sample store\n      const store = await storage.createStore({\n        ownerId: retailer.id,\n        name: 'Mumbai Electronics Hub',\n        description: 'Premium electronics and gadgets',\n        address: '123 Commercial Street, Fort',\n        city: 'Mumbai',\n        pincode: '400001',\n        logoUrl: 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=100',\n        isOpen: true,\n        rating: '4.6'\n      });\n      \n      // Create sample products\n      const products = [\n        {\n          name: 'Premium Coffee Beans',\n          brand: 'Blue Tokai',\n          imageUrl: 'https://images.unsplash.com/photo-1447933601403-0c6688de566e?w=400',\n          unit: 'kg',\n          size: '500g',\n          isWholesale: false,\n          createdById: admin.id\n        },\n        {\n          name: 'Wireless Earbuds Pro',\n          brand: 'Sony',\n          imageUrl: 'https://images.unsplash.com/photo-1590658268037-6bf12165a8df?w=400',\n          unit: 'piece',\n          size: '1 unit',\n          isWholesale: true,\n          createdById: admin.id\n        },\n        {\n          name: 'Designer Handbag',\n          brand: 'Coach',\n          imageUrl: 'https://images.unsplash.com/photo-1553062407-98eeb64c6a62?w=400',\n          unit: 'piece',\n          size: 'Standard',\n          isWholesale: false,\n          createdById: admin.id\n        }\n      ];\n      \n      for (const productData of products) {\n        const product = await storage.createProduct(productData);\n        \n        // Create listing for the retailer store\n        await storage.createListing({\n          storeId: store.id,\n          productId: product.id,\n          priceRetail: product.name.includes('Coffee') ? '450' : \n                      product.name.includes('Earbuds') ? '3999' : '12500',\n          priceWholesale: product.isWholesale ? \n                         (product.name.includes('Earbuds') ? '3500' : null) : null,\n          available: !product.name.includes('Smartphone'), // Make smartphone out of stock\n          stockQty: product.name.includes('Coffee') ? 24 :\n                   product.name.includes('Earbuds') ? 0 : 8\n        });\n      }\n      \n      res.json({ message: 'Demo data seeded successfully' });\n    } catch (error) {\n      console.error('Seed error:', error);\n      res.status(500).json({ message: 'Failed to seed data' });\n    }\n  });\n\n  // Delivery Boy routes\n  app.get('/api/delivery/orders', authenticateToken, requireRole('DELIVERY_BOY'), async (req: any, res) => {\n    try {\n      // Get orders assigned to this delivery boy\n      const orders = await storage.getOrdersForDeliveryBoy(req.user.id);\n      res.json(orders);\n    } catch (error) {\n      console.error('Delivery orders error:', error);\n      res.status(500).json({ message: 'Failed to fetch delivery orders' });\n    }\n  });\n\n  app.get('/api/delivery/orders/:id', authenticateToken, requireRole('DELIVERY_BOY'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const order = await storage.getOrderForDeliveryBoy(id, req.user.id);\n      \n      if (!order) {\n        return res.status(404).json({ message: 'Order not found or not assigned to you' });\n      }\n      \n      res.json(order);\n    } catch (error) {\n      console.error('Delivery order details error:', error);\n      res.status(500).json({ message: 'Failed to fetch order details' });\n    }\n  });\n\n  app.post('/api/delivery/orders/:id/request-payment-change', authenticateToken, requireRole('DELIVERY_BOY'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { newAmount, reason } = req.body;\n      \n      const order = await storage.getOrderForDeliveryBoy(id, req.user.id);\n      if (!order) {\n        return res.status(404).json({ message: 'Order not found or not assigned to you' });\n      }\n      \n      if (!['OUT_FOR_DELIVERY', 'READY', 'ACCEPTED'].includes(order.status)) {\n        return res.status(400).json({ message: 'Payment changes only allowed for orders that are ready for delivery or being delivered' });\n      }\n      \n      // Create payment change request\n      const changeRequest = await storage.createPaymentChangeRequest({\n        orderId: id,\n        deliveryBoyId: req.user.id,\n        originalAmount: order.totalAmount,\n        requestedAmount: newAmount,\n        reason,\n        status: 'PENDING'\n      });\n      \n      // Notify shop owner via WebSocket\n      const shopOwnerClient = clients.get(order.ownerId);\n      if (shopOwnerClient && shopOwnerClient.readyState === WebSocket.OPEN) {\n        shopOwnerClient.send(JSON.stringify({\n          type: 'PAYMENT_CHANGE_REQUEST',\n          orderId: id,\n          originalAmount: order.totalAmount,\n          requestedAmount: newAmount,\n          reason,\n          requestId: changeRequest.id\n        }));\n      }\n      \n      await storage.createOrderEvent({\n        orderId: id,\n        type: 'PAYMENT_CHANGE_REQUESTED',\n        message: `Delivery boy requested payment change from ₹${order.totalAmount} to ₹${newAmount}. Reason: ${reason}`\n      });\n      \n      res.json({ \n        message: 'Payment change request sent to shop owner',\n        requestId: changeRequest.id\n      });\n    } catch (error) {\n      console.error('Payment change request error:', error);\n      res.status(500).json({ message: 'Failed to create payment change request' });\n    }\n  });\n\n  // Shop owner responds to payment change request\n  app.post('/api/payment-change-requests/:requestId/respond', authenticateToken, requireRole('SHOP_OWNER'), async (req: any, res) => {\n    try {\n      const { requestId } = req.params;\n      const { response } = req.body; // 'APPROVED' or 'REJECTED'\n      \n      if (!['APPROVED', 'REJECTED'].includes(response)) {\n        return res.status(400).json({ message: 'Invalid response. Must be APPROVED or REJECTED' });\n      }\n      \n      // Get the payment change request\n      const changeRequest = await storage.getPaymentChangeRequest(requestId);\n      if (!changeRequest) {\n        return res.status(404).json({ message: 'Payment change request not found' });\n      }\n      \n      if (changeRequest.status !== 'PENDING') {\n        return res.status(400).json({ message: 'Payment change request has already been processed' });\n      }\n      \n      // Get the order to verify ownership\n      const order = await storage.getOrder(changeRequest.orderId);\n      if (!order || order.ownerId !== req.user.id) {\n        return res.status(403).json({ message: 'Not authorized to respond to this request' });\n      }\n      \n      // Update the payment change request status\n      await storage.updatePaymentChangeRequestStatus(requestId, response);\n      \n      // If approved, update the order amount\n      if (response === 'APPROVED') {\n        await storage.updateOrderAmount(changeRequest.orderId, changeRequest.requestedAmount);\n      }\n      \n      // Notify delivery boy via WebSocket\n      const deliveryBoyClient = clients.get(changeRequest.deliveryBoyId);\n      if (deliveryBoyClient && deliveryBoyClient.readyState === WebSocket.OPEN) {\n        deliveryBoyClient.send(JSON.stringify({\n          type: 'PAYMENT_CHANGE_RESPONSE',\n          orderId: changeRequest.orderId,\n          response,\n          originalAmount: changeRequest.originalAmount,\n          finalAmount: response === 'APPROVED' ? changeRequest.requestedAmount : changeRequest.originalAmount,\n          requestId\n        }));\n      }\n      \n      // Create order event\n      const eventMessage = response === 'APPROVED' \n        ? `Payment change approved: Amount updated from ₹${changeRequest.originalAmount} to ₹${changeRequest.requestedAmount}`\n        : `Payment change rejected: Amount remains ₹${changeRequest.originalAmount}`;\n        \n      await storage.createOrderEvent({\n        orderId: changeRequest.orderId,\n        type: response === 'APPROVED' ? 'PAYMENT_CHANGE_APPROVED' : 'PAYMENT_CHANGE_REJECTED',\n        message: eventMessage\n      });\n      \n      res.json({ \n        message: `Payment change request ${response.toLowerCase()}`,\n        finalAmount: response === 'APPROVED' ? changeRequest.requestedAmount : changeRequest.originalAmount\n      });\n    } catch (error) {\n      console.error('Payment change response error:', error);\n      res.status(500).json({ message: 'Failed to respond to payment change request' });\n    }\n  });\n\n  app.post('/api/delivery/orders/:id/confirm-payment', authenticateToken, requireRole('DELIVERY_BOY'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { amountReceived, paymentMethod = 'CASH' } = req.body;\n      \n      const order = await storage.getOrderForDeliveryBoy(id, req.user.id);\n      if (!order) {\n        return res.status(404).json({ message: 'Order not found or not assigned to you' });\n      }\n      \n      if (order.status !== 'OUT_FOR_DELIVERY') {\n        return res.status(400).json({ message: 'Can only confirm payment during delivery' });\n      }\n      \n      // Update order with payment information\n      await storage.updateOrderPayment(id, {\n        paymentReceived: true,\n        amountReceived,\n        originalAmountReceived: order.totalAmount,\n        remainingBalance: (parseFloat(order.totalAmount) - parseFloat(amountReceived)).toString(),\n        isPartialPayment: parseFloat(amountReceived) < parseFloat(order.totalAmount),\n        paymentReceivedAt: new Date(),\n        paymentReceivedBy: req.user.id\n      });\n      \n      // Update order status to completed\n      await storage.updateOrderStatus(id, 'COMPLETED');\n      \n      // Create khatabook entries\n      await storage.createKhatabookEntry({\n        userId: order.ownerId, // shop owner\n        counterpartyId: order.retailerId,\n        orderId: id,\n        entryType: 'DEBIT',\n        transactionType: 'PAYMENT_RECEIVED',\n        amount: amountReceived,\n        description: `Payment received for order #${id.slice(-8)}`,\n        referenceId: id,\n        metadata: JSON.stringify({ \n          paymentMethod,\n          deliveryBoyId: req.user.id,\n          deliveryBoyName: req.user.fullName\n        })\n      });\n      \n      await storage.createKhatabookEntry({\n        userId: order.retailerId,\n        counterpartyId: order.ownerId,\n        orderId: id,\n        entryType: 'CREDIT',\n        transactionType: 'PAYMENT_CREDIT',\n        amount: amountReceived,\n        description: `Payment received from ${order.owner?.fullName || 'customer'} for order #${id.slice(-8)}`,\n        referenceId: id,\n        metadata: JSON.stringify({ \n          paymentMethod,\n          deliveryBoyId: req.user.id,\n          deliveryBoyName: req.user.fullName\n        })\n      });\n      \n      // Create order events\n      await storage.createOrderEvent({\n        orderId: id,\n        type: 'PAYMENT_RECEIVED',\n        message: `Payment of ₹${amountReceived} received by ${req.user.fullName}`\n      });\n      \n      await storage.createOrderEvent({\n        orderId: id,\n        type: 'COMPLETED',\n        message: `Order completed by delivery boy ${req.user.fullName}`\n      });\n      \n      // Notify both shop owner and retailer\n      [order.ownerId, order.retailerId].forEach(userId => {\n        const client = clients.get(userId);\n        if (client && client.readyState === WebSocket.OPEN) {\n          client.send(JSON.stringify({\n            type: 'ORDER_COMPLETED',\n            orderId: id,\n            amountReceived,\n            paymentMethod,\n            deliveryBoy: req.user.fullName\n          }));\n        }\n      });\n      \n      res.json({ \n        message: 'Payment confirmed and order completed',\n        amountReceived,\n        remainingBalance: (parseFloat(order.totalAmount) - parseFloat(amountReceived)).toString()\n      });\n    } catch (error) {\n      console.error('Payment confirmation error:', error);\n      res.status(500).json({ message: 'Failed to confirm payment' });\n    }\n  });\n\n  // Mark payment as received (different from confirm-payment)\n  app.post('/api/delivery/orders/:id/payment-received', authenticateToken, requireRole('DELIVERY_BOY'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      \n      const order = await storage.getOrderForDeliveryBoy(id, req.user.id);\n      if (!order) {\n        return res.status(404).json({ message: 'Order not found or not assigned to you' });\n      }\n      \n      // Check if payment change was approved (order amount changed) - button should be green\n      const paymentChangeRequests = await storage.getPaymentChangeRequestsForOrder(id);\n      const approvedRequest = paymentChangeRequests.find(req => req.status === 'APPROVED');\n      \n      if (!approvedRequest) {\n        return res.status(400).json({ message: 'Payment can only be marked as received after payment change is approved' });\n      }\n      \n      // Create order event for payment received notification\n      await storage.createOrderEvent({\n        orderId: id,\n        type: 'PAYMENT_RECEIVED_NOTIFICATION',\n        message: `Payment of ₹${order.totalAmount} marked as received by ${req.user.fullName}`\n      });\n      \n      // Notify retailer about payment received\n      const retailerClient = clients.get(order.retailerId);\n      if (retailerClient && retailerClient.readyState === WebSocket.OPEN) {\n        retailerClient.send(JSON.stringify({\n          type: 'PAYMENT_RECEIVED_NOTIFICATION',\n          orderId: id,\n          orderNumber: `#${id.slice(-8)}`,\n          amount: order.totalAmount,\n          customerName: order.owner?.fullName || 'Customer',\n          deliveryBoyName: req.user.fullName,\n          storeName: order.store?.name || 'Store'\n        }));\n      }\n      \n      res.json({ \n        message: 'Payment received notification sent',\n        amount: order.totalAmount\n      });\n    } catch (error) {\n      console.error('Payment received notification error:', error);\n      res.status(500).json({ message: 'Failed to send payment received notification' });\n    }\n  });\n\n  // Delivery boy order status update\n  app.post('/api/delivery/orders/:id/status', authenticateToken, requireRole('DELIVERY_BOY'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n      \n      const order = await storage.getOrderForDeliveryBoy(id, req.user.id);\n      if (!order) {\n        return res.status(404).json({ message: 'Order not found or not assigned to you' });\n      }\n      \n      const validTransitions: { [key: string]: string[] } = {\n        'READY': ['OUT_FOR_DELIVERY'],\n        'OUT_FOR_DELIVERY': ['COMPLETED']\n      };\n      \n      if (!validTransitions[order.status]?.includes(status)) {\n        return res.status(400).json({ message: 'Invalid status transition' });\n      }\n      \n      await storage.updateOrderStatus(id, status);\n      await storage.createOrderEvent({\n        orderId: id,\n        type: status,\n        message: `Order status updated to ${status.toLowerCase().replace('_', ' ')} by ${req.user.fullName}`\n      });\n      \n      // Emit real-time notification\n      emitOrderEvent(id, order.ownerId, order.retailerId, 'orderStatusChanged', {\n        orderId: id,\n        status,\n        previousStatus: order.status,\n        updatedBy: req.user.fullName\n      });\n      \n      res.json({ message: 'Order status updated successfully' });\n    } catch (error) {\n      console.error('Delivery boy status update error:', error);\n      res.status(500).json({ message: 'Failed to update order status' });\n    }\n  });\n\n  // Shop Owner payment change approval routes\n  app.get('/api/shop-owner/payment-change-requests', authenticateToken, requireRole('SHOP_OWNER'), async (req: any, res) => {\n    try {\n      const requests = await storage.getPaymentChangeRequestsForShopOwner(req.user.id);\n      res.json(requests);\n    } catch (error) {\n      console.error('Payment change requests error:', error);\n      res.status(500).json({ message: 'Failed to fetch payment change requests' });\n    }\n  });\n\n  app.post('/api/shop-owner/payment-change-requests/:id/approve', authenticateToken, requireRole('SHOP_OWNER'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const request = await storage.getPaymentChangeRequest(id);\n      \n      if (!request || request.order?.ownerId !== req.user.id) {\n        return res.status(404).json({ message: 'Payment change request not found' });\n      }\n      \n      if (request.status !== 'PENDING') {\n        return res.status(400).json({ message: 'Request already processed' });\n      }\n      \n      // Update the order amount\n      await storage.updateOrderAmount(request.orderId, request.requestedAmount);\n      \n      // Update request status\n      await storage.updatePaymentChangeRequestStatus(id, 'APPROVED');\n      \n      // Create order event\n      await storage.createOrderEvent({\n        orderId: request.orderId,\n        type: 'PAYMENT_CHANGE_APPROVED',\n        message: `Payment change approved by shop owner. New amount: ₹${request.requestedAmount}`\n      });\n\n      // Update khatabook entries with the new amount after shop owner approval\n      const oldAmount = parseFloat(request.order.totalAmount);\n      const newAmount = parseFloat(request.requestedAmount);\n      const amountDifference = newAmount - oldAmount;\n\n      if (amountDifference !== 0) {\n        const adjustmentType = amountDifference > 0 ? 'increase' : 'decrease';\n        const absAmount = Math.abs(amountDifference);\n\n        // Update shop owner's ledger (adjustment to their debt/credit)\n        await storage.addLedgerEntry({\n          userId: request.order.ownerId,\n          counterpartyId: request.order.retailerId,\n          orderId: request.orderId,\n          entryType: amountDifference > 0 ? 'DEBIT' : 'CREDIT',\n          transactionType: 'PAYMENT_ADJUSTED',\n          amount: absAmount.toString(),\n          description: `Payment ${adjustmentType} approved - Order #${request.orderId.slice(-8)} - Adjustment: ₹${absAmount}`,\n          referenceId: request.orderId,\n          metadata: JSON.stringify({\n            oldAmount,\n            newAmount,\n            adjustment: amountDifference,\n            approvedBy: req.user.fullName,\n            requestId: id\n          })\n        });\n\n        // Update retailer's ledger (opposite adjustment)\n        await storage.addLedgerEntry({\n          userId: request.order.retailerId,\n          counterpartyId: request.order.ownerId,\n          orderId: request.orderId,\n          entryType: amountDifference > 0 ? 'CREDIT' : 'DEBIT',\n          transactionType: 'PAYMENT_ADJUSTED',\n          amount: absAmount.toString(),\n          description: `Payment ${adjustmentType} approved - Order #${request.orderId.slice(-8)} - Adjustment: ₹${absAmount}`,\n          referenceId: request.orderId,\n          metadata: JSON.stringify({\n            oldAmount,\n            newAmount,\n            adjustment: amountDifference,\n            approvedBy: req.user.fullName,\n            requestId: id\n          })\n        });\n      }\n      \n      // Notify delivery boy\n      const deliveryBoyClient = clients.get(request.deliveryBoyId);\n      if (deliveryBoyClient && deliveryBoyClient.readyState === WebSocket.OPEN) {\n        deliveryBoyClient.send(JSON.stringify({\n          type: 'PAYMENT_CHANGE_APPROVED',\n          orderId: request.orderId,\n          newAmount: request.requestedAmount\n        }));\n      }\n      \n      res.json({ message: 'Payment change approved' });\n    } catch (error) {\n      console.error('Payment change approval error:', error);\n      res.status(500).json({ message: 'Failed to approve payment change' });\n    }\n  });\n\n  app.post('/api/shop-owner/payment-change-requests/:id/reject', authenticateToken, requireRole('SHOP_OWNER'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { reason } = req.body;\n      const request = await storage.getPaymentChangeRequest(id);\n      \n      if (!request || request.order?.ownerId !== req.user.id) {\n        return res.status(404).json({ message: 'Payment change request not found' });\n      }\n      \n      if (request.status !== 'PENDING') {\n        return res.status(400).json({ message: 'Request already processed' });\n      }\n      \n      // Update request status\n      await storage.updatePaymentChangeRequestStatus(id, 'REJECTED');\n      \n      // Create order event\n      await storage.createOrderEvent({\n        orderId: request.orderId,\n        type: 'PAYMENT_CHANGE_REJECTED',\n        message: `Payment change rejected by shop owner. Reason: ${reason || 'No reason provided'}`\n      });\n      \n      // Notify delivery boy\n      const deliveryBoyClient = clients.get(request.deliveryBoyId);\n      if (deliveryBoyClient && deliveryBoyClient.readyState === WebSocket.OPEN) {\n        deliveryBoyClient.send(JSON.stringify({\n          type: 'PAYMENT_CHANGE_REJECTED',\n          orderId: request.orderId,\n          reason: reason || 'No reason provided'\n        }));\n      }\n      \n      res.json({ message: 'Payment change rejected' });\n    } catch (error) {\n      console.error('Payment change rejection error:', error);\n      res.status(500).json({ message: 'Failed to reject payment change' });\n    }\n  });\n\n  // Shop Owner - Get available delivery boys\n  app.get('/api/delivery-boys/available', authenticateToken, requireRole('SHOP_OWNER'), async (req: any, res) => {\n    try {\n      const deliveryBoys = await storage.getAvailableDeliveryBoys();\n      res.json(deliveryBoys);\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to fetch available delivery boys' });\n    }\n  });\n\n\n  // Shop Owner - Get retailer-specific balances for khatabook\n  app.get('/api/khatabook/retailer-balances', authenticateToken, requireRole('SHOP_OWNER'), async (req: any, res) => {\n    try {\n      const retailerBalances = await storage.getRetailerBalancesForShopOwner(req.user.id);\n      res.json(retailerBalances);\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to fetch retailer balances' });\n    }\n  });\n\n  // Delivery Request Management\n  // Retailer - Create delivery request\n  app.post('/api/delivery-requests', authenticateToken, requireRole('RETAILER'), async (req: any, res) => {\n    try {\n      const validatedData = insertDeliveryRequestSchema.parse({\n        ...req.body,\n        retailerId: req.user.id\n      });\n      \n      const deliveryRequest = await storage.createDeliveryRequest(validatedData);\n      res.status(201).json(deliveryRequest);\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to create delivery request' });\n    }\n  });\n\n  // Share delivery request for order - broadcasts to all delivery boys\n  app.post('/api/orders/:orderId/share-delivery', authenticateToken, requireRole('RETAILER'), async (req: any, res) => {\n    try {\n      const { orderId } = req.params;\n      const { estimatedReward, pickupAddress, deliveryAddress } = req.body;\n      \n      const order = await storage.getOrder(orderId);\n      if (!order || order.retailerId !== req.user.id) {\n        return res.status(404).json({ message: 'Order not found' });\n      }\n\n      // Create a shared delivery request\n      const deliveryRequest = await storage.createDeliveryRequest({\n        retailerId: req.user.id,\n        description: `Delivery for order - ${order.owner?.fullName}`,\n        title: `Order Delivery - ${order.owner?.fullName}`,\n        pickupAddress: pickupAddress || 'Store pickup location',\n        deliveryAddress: deliveryAddress || 'Customer delivery location',\n        estimatedPayment: estimatedReward || '50',\n        orderId: orderId\n      });\n\n      // Broadcast to all delivery boys\n      broadcastToDeliveryBoys('newDeliveryRequest', {\n        requestId: deliveryRequest.id,\n        orderId: orderId,\n        description: deliveryRequest.description,\n        pickupAddress: deliveryRequest.pickupAddress,\n        deliveryAddress: deliveryRequest.deliveryAddress,\n        estimatedPayment: deliveryRequest.estimatedPayment,\n        retailer: req.user.fullName\n      });\n\n      res.json({ message: 'Delivery request shared successfully', requestId: deliveryRequest.id });\n    } catch (error) {\n      console.error('Error sharing delivery request:', error);\n      res.status(400).json({ message: 'Failed to share delivery request' });\n    }\n  });\n\n  // Retailer - Get own delivery requests\n  app.get('/api/delivery-requests', authenticateToken, requireRole('RETAILER'), async (req: any, res) => {\n    try {\n      const deliveryRequests = await storage.getDeliveryRequestsByRetailer(req.user.id);\n      res.json(deliveryRequests);\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to fetch delivery requests' });\n    }\n  });\n\n  // Delivery Boy - Get open delivery requests\n  app.get('/api/delivery-requests/open', authenticateToken, requireRole('DELIVERY_BOY'), async (req: any, res) => {\n    try {\n      const openRequests = await storage.getOpenDeliveryRequests();\n      res.json(openRequests);\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to fetch open delivery requests' });\n    }\n  });\n\n  // Delivery Boy - Accept delivery request\n  app.post('/api/delivery-requests/:id/accept', authenticateToken, requireRole('DELIVERY_BOY'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const request = await storage.getDeliveryRequest(id);\n      \n      if (!request) {\n        return res.status(404).json({ message: 'Delivery request not found' });\n      }\n      \n      if (request.status !== 'OPEN') {\n        return res.status(400).json({ message: 'Delivery request is no longer available' });\n      }\n\n      await storage.acceptDeliveryRequest(id, req.user.id);\n      \n      // If this delivery request is linked to an order, automatically assign the order\n      if (request.orderId) {\n        try {\n          await storage.assignOrderToDeliveryBoy(request.orderId, req.user.id);\n          \n          // Create order event for assignment\n          await storage.createOrderEvent({\n            orderId: request.orderId,\n            type: 'ASSIGNED_DELIVERY_BOY',\n            message: `Order automatically assigned to delivery boy: ${req.user.fullName} via shared delivery request`\n          });\n\n          // Get order details for notification\n          const order = await storage.getOrder(request.orderId);\n          if (order) {\n            emitOrderEvent(request.orderId, order.ownerId, order.retailerId, 'deliveryBoyAssigned', {\n              orderId: request.orderId,\n              deliveryBoy: req.user.fullName,\n              deliveryBoyPhone: req.user.phone || 'Not provided'\n            });\n          }\n        } catch (error) {\n          console.error('Failed to assign order to delivery boy:', error);\n        }\n      }\n      \n      // Notify retailer about acceptance\n      const retailerClient = clients.get(request.retailerId);\n      if (retailerClient && retailerClient.readyState === WebSocket.OPEN) {\n        retailerClient.send(JSON.stringify({\n          type: 'deliveryRequestAccepted',\n          payload: { requestId: id, deliveryBoy: req.user.fullName, orderId: request.orderId }\n        }));\n      }\n\n      res.json({ message: 'Delivery request accepted and order assigned successfully' });\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to accept delivery request' });\n    }\n  });\n\n  // Delivery Boy - Reject delivery request\n  app.post('/api/delivery-requests/:id/reject', authenticateToken, requireRole('DELIVERY_BOY'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const request = await storage.getDeliveryRequest(id);\n      \n      if (!request) {\n        return res.status(404).json({ message: 'Delivery request not found' });\n      }\n      \n      if (request.status !== 'OPEN') {\n        return res.status(400).json({ message: 'Delivery request is no longer available' });\n      }\n\n      await storage.rejectDeliveryRequest(id);\n      res.json({ message: 'Delivery request rejected successfully' });\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to reject delivery request' });\n    }\n  });\n\n  // Delivery Boy - Get accepted delivery requests\n  app.get('/api/delivery-requests/accepted', authenticateToken, requireRole('DELIVERY_BOY'), async (req: any, res) => {\n    try {\n      const acceptedRequests = await storage.getAcceptedDeliveryRequestsByDeliveryBoy(req.user.id);\n      res.json(acceptedRequests);\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to fetch accepted delivery requests' });\n    }\n  });\n\n  // Delivery Boy - Complete delivery request\n  app.post('/api/delivery-requests/:id/complete', authenticateToken, requireRole('DELIVERY_BOY'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { notes } = req.body;\n      \n      const request = await storage.getDeliveryRequest(id);\n      if (!request || request.acceptedBy !== req.user.id) {\n        return res.status(404).json({ message: 'Delivery request not found or not assigned to you' });\n      }\n\n      await storage.completeDeliveryRequest(id, notes);\n      \n      // Notify retailer about completion\n      const retailerClient = clients.get(request.retailerId);\n      if (retailerClient && retailerClient.readyState === WebSocket.OPEN) {\n        retailerClient.send(JSON.stringify({\n          type: 'deliveryRequestCompleted',\n          payload: { requestId: id, deliveryBoy: req.user.fullName, notes }\n        }));\n      }\n\n      res.json({ message: 'Delivery request completed successfully' });\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to complete delivery request' });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":77523},"server/storage.ts":{"content":"import { \n  users, stores, productCatalog, listings, orders, orderItems, orderEvents, fcmTokens, khatabook, paymentAuditTrail, deliveryRequests, paymentChangeRequests, retailerDeliveryBoys,\n  type User, type InsertUser, type Store, type InsertStore,\n  type ProductCatalog, type InsertProductCatalog, type Listing, type InsertListing,\n  type Order, type InsertOrder, type OrderItem, type InsertOrderItem,\n  type OrderEvent, type InsertOrderEvent, type FcmToken, type InsertFcmToken,\n  type Khatabook, type InsertKhatabook, type PaymentAuditTrail, type InsertPaymentAuditTrail,\n  type DeliveryRequest, type InsertDeliveryRequest,\n  type PaymentChangeRequest, type InsertPaymentChangeRequest,\n  type RetailerDeliveryBoy, type InsertRetailerDeliveryBoy\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc, like, or, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserById(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User>;\n  \n  // Store operations\n  getStore(id: string): Promise<Store | undefined>;\n  getStoreByOwnerId(ownerId: string): Promise<Store | undefined>;\n  createStore(store: InsertStore): Promise<Store>;\n  updateStore(id: string, store: Partial<InsertStore>): Promise<Store>;\n  getStores(filters?: { city?: string; pincode?: string; search?: string; name?: string; id?: string }): Promise<any[]>;\n  getStoreWithListings(storeId: string): Promise<any>;\n  \n  // Product catalog operations\n  createProduct(product: InsertProductCatalog): Promise<ProductCatalog>;\n  getProducts(filters?: { search?: string; page?: number; limit?: number }): Promise<ProductCatalog[]>;\n  getProduct(id: string): Promise<ProductCatalog | undefined>;\n  updateProduct(id: string, product: Partial<InsertProductCatalog>): Promise<ProductCatalog>;\n  deleteProduct(id: string): Promise<void>;\n  \n  // Listing operations\n  createListing(listing: InsertListing): Promise<Listing>;\n  getListingsByStore(storeId: string, filters?: { available?: boolean; search?: string }): Promise<any[]>;\n  getListing(id: string): Promise<Listing | undefined>;\n  updateListing(id: string, listing: Partial<InsertListing>): Promise<Listing>;\n  \n  // Order operations\n  createOrder(order: InsertOrder): Promise<Order>;\n  getOrdersByOwner(ownerId: string): Promise<any[]>;\n  getOrdersByRetailer(retailerId: string): Promise<any[]>;\n  getOrder(id: string): Promise<any>;\n  updateOrderStatus(id: string, status: string): Promise<Order>;\n  assignOrderToDeliveryBoy(orderId: string, deliveryBoyId: string): Promise<Order>;\n  \n  // Order items\n  createOrderItems(items: InsertOrderItem[]): Promise<OrderItem[]>;\n  getOrderItems(orderId: string): Promise<any[]>;\n  \n  // Order events\n  createOrderEvent(event: InsertOrderEvent): Promise<OrderEvent>;\n  getOrderEvents(orderId: string): Promise<OrderEvent[]>;\n  \n  // FCM tokens\n  saveFcmToken(token: InsertFcmToken): Promise<FcmToken>;\n  getFcmTokensByUser(userId: string): Promise<FcmToken[]>;\n  \n  // Popular products based on order history\n  getPopularProducts(limit?: number): Promise<any[]>;\n  \n  // Payment confirmation operations\n  updateOrderPayment(orderId: string, paymentData: any): Promise<Order>;\n  \n  // Ledger/Khatabook operations\n  addLedgerEntry(entry: InsertKhatabook): Promise<Khatabook>;\n  getLedgerEntries(userId: string, options?: { page?: number; limit?: number; type?: string; counterpartyId?: string }): Promise<any>;\n  getLedgerSummary(userId: string, counterpartyId?: string): Promise<any>;\n  getOutstandingBalance(shopOwnerId: string, retailerId: string): Promise<number>;\n  \n  // Enhanced payment operations\n  recordPartialPayment(orderId: string, paymentData: any, auditData: InsertPaymentAuditTrail): Promise<Order>;\n  settleBalances(shopOwnerId: string, retailerId: string, settlementData: any): Promise<any>;\n  \n  // Audit trail operations\n  addPaymentAudit(auditData: InsertPaymentAuditTrail): Promise<PaymentAuditTrail>;\n  getPaymentAuditTrail(orderId: string): Promise<PaymentAuditTrail[]>;\n  \n  // Delivery boy operations\n  createDeliveryBoy(deliveryBoy: InsertDeliveryBoy): Promise<DeliveryBoy>;\n  getDeliveryBoysByRetailer(retailerId: string): Promise<DeliveryBoy[]>;\n  getDeliveryBoy(id: string): Promise<DeliveryBoy | undefined>;\n  getDeliveryBoyByPhone(phone: string, retailerId?: string): Promise<DeliveryBoy | undefined>;\n  updateDeliveryBoy(id: string, deliveryBoy: Partial<InsertDeliveryBoy>): Promise<DeliveryBoy>;\n  deleteDeliveryBoy(id: string): Promise<void>;\n  searchDeliveryBoysByLocation(retailerId: string, locations: { pickupLocation?: string; deliveryLocation?: string }): Promise<DeliveryBoy[]>;\n  \n  // Delivery boy order management\n  getOrdersForDeliveryBoy(deliveryBoyUserId: string): Promise<any[]>;\n  getOrderForDeliveryBoy(orderId: string, deliveryBoyUserId: string): Promise<any>;\n  \n  // Payment change requests\n  createPaymentChangeRequest(request: InsertPaymentChangeRequest): Promise<PaymentChangeRequest>;\n  getPaymentChangeRequest(id: string): Promise<any>;\n  getPaymentChangeRequestsForShopOwner(shopOwnerId: string): Promise<any[]>;\n  updatePaymentChangeRequestStatus(id: string, status: string): Promise<PaymentChangeRequest>;\n  \n  // Order amount updates\n  updateOrderAmount(orderId: string, newAmount: string): Promise<Order>;\n  \n  // Khatabook operations\n  createKhatabookEntry(entry: InsertKhatabook): Promise<Khatabook>;\n  \n  // Admin overview operations\n  getAllUsers(): Promise<User[]>;\n  getAllOrdersForAdmin(): Promise<any[]>;\n  getSystemAnalytics(): Promise<any>;\n\n  // Delivery request operations\n  createDeliveryRequest(request: InsertDeliveryRequest): Promise<DeliveryRequest>;\n  getDeliveryRequest(id: string): Promise<DeliveryRequest | undefined>;\n  getDeliveryRequestsByRetailer(retailerId: string): Promise<DeliveryRequest[]>;\n  getOpenDeliveryRequests(): Promise<DeliveryRequest[]>;\n  getAcceptedDeliveryRequestsByDeliveryBoy(deliveryBoyId: string): Promise<DeliveryRequest[]>;\n  acceptDeliveryRequest(id: string, deliveryBoyId: string): Promise<DeliveryRequest>;\n  rejectDeliveryRequest(id: string): Promise<DeliveryRequest>;\n  completeDeliveryRequest(id: string, notes?: string): Promise<DeliveryRequest>;\n\n  // Retailer-Delivery Boy relationship operations\n  addDeliveryBoyToRetailer(retailerId: string, deliveryBoyId: string, addedBy: string, notes?: string): Promise<RetailerDeliveryBoy>;\n  removeDeliveryBoyFromRetailer(retailerId: string, deliveryBoyId: string): Promise<void>;\n  isDeliveryBoyLinkedToRetailer(retailerId: string, deliveryBoyId: string): Promise<boolean>;\n  getLinkedDeliveryBoys(retailerId: string): Promise<any[]>;\n  getLinkedRetailers(deliveryBoyId: string): Promise<any[]>;\n  getRetailerDeliveryBoyRelationship(retailerId: string, deliveryBoyId: string): Promise<RetailerDeliveryBoy | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    // Generate custom ID based on role\n    const idResult = await db.execute(sql`SELECT generate_user_id(${insertUser.role}) as id`);\n    const customId = (idResult.rows[0] as any).id;\n    \n    const [user] = await db.insert(users).values({\n      ...insertUser,\n      id: customId\n    }).returning();\n    return user;\n  }\n\n  async getUserById(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async updateUser(id: string, updateData: Partial<InsertUser>): Promise<User> {\n    const [user] = await db.update(users).set(updateData).where(eq(users.id, id)).returning();\n    return user;\n  }\n\n  async getStore(id: string): Promise<Store | undefined> {\n    const [store] = await db.select().from(stores).where(eq(stores.id, id));\n    return store || undefined;\n  }\n\n  async getStoreByOwnerId(ownerId: string): Promise<Store | undefined> {\n    const [store] = await db.select().from(stores).where(eq(stores.ownerId, ownerId));\n    return store || undefined;\n  }\n\n  async createStore(insertStore: InsertStore): Promise<Store> {\n    const [store] = await db.insert(stores).values(insertStore).returning();\n    return store;\n  }\n\n  async updateStore(id: string, updateStore: Partial<InsertStore>): Promise<Store> {\n    const [store] = await db.update(stores).set({ ...updateStore, updatedAt: new Date() }).where(eq(stores.id, id)).returning();\n    return store;\n  }\n\n  async getStores(filters?: { city?: string; pincode?: string; search?: string; name?: string; id?: string }): Promise<any[]> {\n    const query = db.select({\n      id: stores.id,\n      ownerId: stores.ownerId,\n      name: stores.name,\n      description: stores.description,\n      address: stores.address,\n      city: stores.city,\n      pincode: stores.pincode,\n      logoUrl: stores.logoUrl,\n      isOpen: stores.isOpen,\n      rating: stores.rating,\n      createdAt: stores.createdAt,\n      updatedAt: stores.updatedAt,\n      // Include retailer information\n      retailerName: users.fullName,\n      retailerEmail: users.email,\n      retailerPhone: users.phone\n    })\n    .from(stores)\n    .leftJoin(users, eq(stores.ownerId, users.id));\n    \n    const conditions = [];\n    if (filters?.city) {\n      conditions.push(eq(stores.city, filters.city));\n    }\n    if (filters?.pincode) {\n      conditions.push(eq(stores.pincode, filters.pincode));\n    }\n    if (filters?.search) {\n      conditions.push(like(stores.name, `%${filters.search}%`));\n    }\n    if (filters?.name) {\n      conditions.push(like(stores.name, `%${filters.name}%`));\n    }\n    if (filters?.id) {\n      conditions.push(eq(stores.id, filters.id));\n    }\n    \n    if (conditions.length > 0) {\n      return await query.where(and(...conditions));\n    }\n    \n    return await query;\n  }\n\n  async getStoreWithListings(storeId: string): Promise<any> {\n    const store = await db.query.stores.findFirst({\n      where: eq(stores.id, storeId),\n      with: {\n        owner: {\n          columns: {\n            id: true,\n            fullName: true,\n            email: true,\n            phone: true\n          }\n        },\n        listings: {\n          with: {\n            product: true\n          },\n          where: eq(listings.available, true)\n        }\n      }\n    });\n    return store;\n  }\n\n  async createProduct(insertProduct: InsertProductCatalog): Promise<ProductCatalog> {\n    const [product] = await db.insert(productCatalog).values(insertProduct).returning();\n    return product;\n  }\n\n  async getProducts(filters?: { search?: string; page?: number; limit?: number }): Promise<ProductCatalog[]> {\n    let query = db.select().from(productCatalog);\n    \n    if (filters?.search) {\n      query = query.where(or(\n        like(productCatalog.name, `%${filters.search}%`),\n        like(productCatalog.brand, `%${filters.search}%`)\n      ));\n    }\n    \n    return await query.orderBy(desc(productCatalog.createdAt));\n  }\n\n  async getProduct(id: string): Promise<ProductCatalog | undefined> {\n    const [product] = await db.select().from(productCatalog).where(eq(productCatalog.id, id));\n    return product || undefined;\n  }\n\n  async updateProduct(id: string, updateProduct: Partial<InsertProductCatalog>): Promise<ProductCatalog> {\n    const [product] = await db.update(productCatalog).set({ ...updateProduct, updatedAt: new Date() }).where(eq(productCatalog.id, id)).returning();\n    return product;\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    await db.delete(productCatalog).where(eq(productCatalog.id, id));\n  }\n\n  async createListing(insertListing: InsertListing): Promise<Listing> {\n    const [listing] = await db.insert(listings).values(insertListing).returning();\n    return listing;\n  }\n\n  async getListingsByStore(storeId: string, filters?: { available?: boolean; search?: string }): Promise<any[]> {\n    const query = db.query.listings.findMany({\n      where: and(\n        eq(listings.storeId, storeId),\n        filters?.available !== undefined ? eq(listings.available, filters.available) : undefined\n      ),\n      with: {\n        product: true\n      }\n    });\n    \n    return await query;\n  }\n\n  async getListing(id: string): Promise<Listing | undefined> {\n    const [listing] = await db.select().from(listings).where(eq(listings.id, id));\n    return listing || undefined;\n  }\n\n  async updateListing(id: string, updateListing: Partial<InsertListing>): Promise<Listing> {\n    const [listing] = await db.update(listings).set({ ...updateListing, updatedAt: new Date() }).where(eq(listings.id, id)).returning();\n    return listing;\n  }\n\n  async createOrder(insertOrder: InsertOrder): Promise<Order> {\n    const [order] = await db.insert(orders).values(insertOrder).returning();\n    return order;\n  }\n\n  async getOrdersByOwner(ownerId: string): Promise<any[]> {\n    return await db.query.orders.findMany({\n      where: eq(orders.ownerId, ownerId),\n      with: {\n        store: true,\n        retailer: true,\n        items: {\n          with: {\n            listing: {\n              with: {\n                product: true\n              }\n            }\n          }\n        },\n        timeline: true\n      },\n      orderBy: desc(orders.createdAt)\n    });\n  }\n\n  async getOrdersByRetailer(retailerId: string): Promise<any[]> {\n    return await db.query.orders.findMany({\n      where: eq(orders.retailerId, retailerId),\n      with: {\n        owner: true,\n        store: true,\n        items: {\n          with: {\n            listing: {\n              with: {\n                product: true\n              }\n            }\n          }\n        },\n        timeline: true\n      },\n      orderBy: desc(orders.createdAt)\n    });\n  }\n\n  async getOrder(id: string): Promise<any> {\n    return await db.query.orders.findFirst({\n      where: eq(orders.id, id),\n      with: {\n        owner: true,\n        retailer: true,\n        store: true,\n        items: {\n          with: {\n            listing: {\n              with: {\n                product: true\n              }\n            }\n          }\n        },\n        timeline: {\n          orderBy: asc(orderEvents.createdAt)\n        }\n      }\n    });\n  }\n\n  async updateOrderStatus(id: string, status: string): Promise<Order> {\n    const [order] = await db.update(orders).set({ status: status as any, updatedAt: new Date() }).where(eq(orders.id, id)).returning();\n    return order;\n  }\n\n  async assignOrderToDeliveryBoy(orderId: string, deliveryBoyId: string): Promise<Order> {\n    const [order] = await db.update(orders).set({ \n      assignedDeliveryBoyId: deliveryBoyId, \n      updatedAt: new Date() \n    }).where(eq(orders.id, orderId)).returning();\n    return order;\n  }\n\n  async createOrderItems(items: InsertOrderItem[]): Promise<OrderItem[]> {\n    return await db.insert(orderItems).values(items).returning();\n  }\n\n  async getOrderItems(orderId: string): Promise<any[]> {\n    return await db.query.orderItems.findMany({\n      where: eq(orderItems.orderId, orderId),\n      with: {\n        listing: {\n          with: {\n            product: true\n          }\n        }\n      }\n    });\n  }\n\n  async createOrderEvent(insertEvent: InsertOrderEvent): Promise<OrderEvent> {\n    const [event] = await db.insert(orderEvents).values(insertEvent).returning();\n    return event;\n  }\n\n  async getOrderEvents(orderId: string): Promise<OrderEvent[]> {\n    return await db.select().from(orderEvents).where(eq(orderEvents.orderId, orderId)).orderBy(asc(orderEvents.createdAt));\n  }\n\n  async saveFcmToken(insertToken: InsertFcmToken): Promise<FcmToken> {\n    const [token] = await db.insert(fcmTokens).values(insertToken).returning();\n    return token;\n  }\n\n  async getFcmTokensByUser(userId: string): Promise<FcmToken[]> {\n    return await db.select().from(fcmTokens).where(eq(fcmTokens.userId, userId));\n  }\n\n  async getPopularProducts(limit: number = 6): Promise<any[]> {\n    // Get products with order frequency from completed orders\n    const popularProducts = await db\n      .select({\n        product: productCatalog,\n        totalOrdered: sql<number>`sum(${orderItems.qty})`.as('total_ordered'),\n        orderCount: sql<number>`count(distinct ${orders.id})`.as('order_count'),\n        avgPrice: sql<number>`avg(${orderItems.priceAt})`.as('avg_price')\n      })\n      .from(orderItems)\n      .innerJoin(listings, eq(orderItems.listingId, listings.id))\n      .innerJoin(productCatalog, eq(listings.productId, productCatalog.id))\n      .innerJoin(orders, eq(orderItems.orderId, orders.id))\n      .where(eq(orders.status, 'COMPLETED'))\n      .groupBy(productCatalog.id, productCatalog.name, productCatalog.brand, productCatalog.imageUrl, productCatalog.unit, productCatalog.size, productCatalog.isWholesale, productCatalog.createdById, productCatalog.createdAt, productCatalog.updatedAt)\n      .orderBy(sql`sum(${orderItems.qty}) DESC`)\n      .limit(limit);\n\n    // If no orders exist, return random products from catalog\n    if (popularProducts.length === 0) {\n      const randomProducts = await db\n        .select({\n          product: productCatalog,\n          totalOrdered: sql<number>`0`.as('total_ordered'),\n          orderCount: sql<number>`0`.as('order_count'),\n          avgPrice: sql<number>`0`.as('avg_price')\n        })\n        .from(productCatalog)\n        .orderBy(sql`RANDOM()`)\n        .limit(limit);\n      \n      return randomProducts;\n    }\n\n    return popularProducts;\n  }\n\n  async updateOrderPayment(orderId: string, paymentData: any): Promise<Order> {\n    const [order] = await db.update(orders)\n      .set({\n        paymentReceived: paymentData.paymentReceived,\n        amountReceived: paymentData.amountReceived,\n        originalAmountReceived: paymentData.originalAmountReceived,\n        paymentReceivedAt: paymentData.paymentReceivedAt,\n        paymentReceivedBy: paymentData.paymentReceivedBy,\n        amountAdjustedBy: paymentData.amountAdjustedBy,\n        amountAdjustedAt: paymentData.amountAdjustedAt,\n        adjustmentNote: paymentData.adjustmentNote,\n        updatedAt: new Date()\n      })\n      .where(eq(orders.id, orderId))\n      .returning();\n    return order;\n  }\n\n  async addLedgerEntry(entry: InsertKhatabook): Promise<Khatabook> {\n    // Calculate running balance for the user (considering counterparty if provided)\n    let balanceQuery = db.select({ balance: khatabook.balance })\n      .from(khatabook)\n      .where(eq(khatabook.userId, entry.userId));\n    \n    if (entry.counterpartyId) {\n      const counterpartyConditions = [\n        eq(khatabook.userId, entry.userId),\n        eq(khatabook.counterpartyId, entry.counterpartyId)\n      ];\n      balanceQuery = db.select({ balance: khatabook.balance })\n        .from(khatabook)\n        .where(and(...counterpartyConditions));\n    }\n    \n    const lastEntry = await balanceQuery\n      .orderBy(desc(khatabook.createdAt))\n      .limit(1);\n    \n    const lastBalance = lastEntry[0]?.balance || \"0\";\n    const lastBalanceNum = parseFloat(lastBalance);\n    const entryAmount = parseFloat(entry.amount);\n    \n    let newBalance = lastBalanceNum;\n    if (entry.entryType === 'CREDIT') {\n      newBalance += entryAmount;\n    } else {\n      newBalance -= entryAmount;\n    }\n    \n    const [ledgerEntry] = await db.insert(khatabook).values({\n      ...entry,\n      balance: newBalance.toString()\n    }).returning();\n    return ledgerEntry;\n  }\n\n  async getLedgerEntries(userId: string, options: { page?: number; limit?: number; type?: string; counterpartyId?: string } = {}): Promise<any> {\n    const { page = 1, limit = 20, type, counterpartyId } = options;\n    const offset = (page - 1) * limit;\n    \n    let whereConditions = [eq(khatabook.userId, userId)];\n    \n    if (type) {\n      whereConditions.push(eq(khatabook.entryType, type as any));\n    }\n    \n    if (counterpartyId) {\n      whereConditions.push(eq(khatabook.counterpartyId, counterpartyId));\n    }\n    \n    let query = db.select({\n      id: khatabook.id,\n      entryType: khatabook.entryType,\n      transactionType: khatabook.transactionType,\n      amount: khatabook.amount,\n      balance: khatabook.balance,\n      description: khatabook.description,\n      referenceId: khatabook.referenceId,\n      counterpartyId: khatabook.counterpartyId,\n      metadata: khatabook.metadata,\n      createdAt: khatabook.createdAt,\n      orderId: khatabook.orderId\n    })\n    .from(khatabook)\n    .where(and(...whereConditions));\n    \n    const entries = await query\n      .orderBy(desc(khatabook.createdAt))\n      .limit(limit)\n      .offset(offset);\n    \n    const total = await db.select({ count: sql<number>`count(*)` })\n      .from(khatabook)\n      .where(and(...whereConditions));\n    \n    return {\n      entries,\n      pagination: {\n        page,\n        limit,\n        total: total[0].count,\n        totalPages: Math.ceil(total[0].count / limit)\n      }\n    };\n  }\n\n\n  async getLedgerSummary(userId: string, counterpartyId?: string): Promise<any> {\n    let whereConditions = [eq(khatabook.userId, userId)];\n    \n    if (counterpartyId) {\n      whereConditions.push(eq(khatabook.counterpartyId, counterpartyId));\n    }\n    \n    const lastEntry = await db.select({ balance: khatabook.balance })\n      .from(khatabook)\n      .where(and(...whereConditions))\n      .orderBy(desc(khatabook.createdAt))\n      .limit(1);\n    \n    const currentBalance = lastEntry[0]?.balance || \"0\";\n    \n    // Get summary statistics\n    const stats = await db.select({\n      totalCredits: sql<number>`COALESCE(SUM(CASE WHEN entry_type = 'CREDIT' THEN amount ELSE 0 END), 0)`,\n      totalDebits: sql<number>`COALESCE(SUM(CASE WHEN entry_type = 'DEBIT' THEN amount ELSE 0 END), 0)`,\n      totalTransactions: sql<number>`COUNT(*)`\n    })\n    .from(khatabook)\n    .where(and(...whereConditions));\n    \n    // Get recent transactions\n    const recentTransactions = await db.select({\n      id: khatabook.id,\n      entryType: khatabook.entryType,\n      transactionType: khatabook.transactionType,\n      amount: khatabook.amount,\n      description: khatabook.description,\n      counterpartyId: khatabook.counterpartyId,\n      createdAt: khatabook.createdAt\n    })\n    .from(khatabook)\n    .where(and(...whereConditions))\n    .orderBy(desc(khatabook.createdAt))\n    .limit(5);\n    \n    return {\n      currentBalance: parseFloat(currentBalance),\n      totalCredits: stats[0].totalCredits,\n      totalDebits: stats[0].totalDebits,\n      totalTransactions: stats[0].totalTransactions,\n      recentTransactions\n    };\n  }\n\n  async getOutstandingBalance(shopOwnerId: string, retailerId: string): Promise<number> {\n    const lastEntry = await db.select({ balance: khatabook.balance })\n      .from(khatabook)\n      .where(and(\n        eq(khatabook.userId, shopOwnerId),\n        eq(khatabook.counterpartyId, retailerId)\n      ))\n      .orderBy(desc(khatabook.createdAt))\n      .limit(1);\n    \n    const balance = lastEntry[0]?.balance || \"0\";\n    return parseFloat(balance);\n  }\n\n  async recordPartialPayment(orderId: string, paymentData: any, auditData: InsertPaymentAuditTrail): Promise<Order> {\n    // Get the order first to calculate remaining balance\n    const order = await this.getOrder(orderId);\n    if (!order) {\n      throw new Error('Order not found');\n    }\n    \n    const totalAmount = parseFloat(order.totalAmount);\n    const amountReceived = parseFloat(paymentData.amountReceived);\n    const remainingBalance = totalAmount - amountReceived;\n    \n    // Update order with partial payment information\n    const [updatedOrder] = await db.update(orders)\n      .set({\n        paymentReceived: true,\n        amountReceived: paymentData.amountReceived,\n        originalAmountReceived: paymentData.amountReceived,\n        remainingBalance: remainingBalance.toString(),\n        isPartialPayment: remainingBalance > 0,\n        paymentReceivedAt: paymentData.paymentReceivedAt,\n        paymentReceivedBy: paymentData.paymentReceivedBy,\n        updatedAt: new Date()\n      })\n      .where(eq(orders.id, orderId))\n      .returning();\n    \n    // Add audit trail\n    await this.addPaymentAudit(auditData);\n    \n    return updatedOrder;\n  }\n\n  async settleBalances(shopOwnerId: string, retailerId: string, settlementData: any): Promise<any> {\n    const { currentOrderPayment, outstandingBalancePayment, totalPayment, orderId, note } = settlementData;\n    \n    // Create ledger entries for the settlement\n    const entries = [];\n    \n    if (currentOrderPayment > 0) {\n      // Payment for current order\n      entries.push(await this.addLedgerEntry({\n        userId: shopOwnerId,\n        counterpartyId: retailerId,\n        orderId: orderId,\n        entryType: 'DEBIT',\n        transactionType: 'PAYMENT_CREDIT',\n        amount: currentOrderPayment.toString(),\n        description: `Payment for current order #${orderId?.slice(-8)}`,\n        referenceId: orderId,\n        metadata: JSON.stringify({ settlementType: 'current_order' })\n      }));\n      \n      entries.push(await this.addLedgerEntry({\n        userId: retailerId,\n        counterpartyId: shopOwnerId,\n        orderId: orderId,\n        entryType: 'CREDIT',\n        transactionType: 'PAYMENT_CREDIT',\n        amount: currentOrderPayment.toString(),\n        description: `Payment received for order #${orderId?.slice(-8)}`,\n        referenceId: orderId,\n        metadata: JSON.stringify({ settlementType: 'current_order' })\n      }));\n    }\n    \n    if (outstandingBalancePayment > 0) {\n      // Payment for outstanding balance\n      entries.push(await this.addLedgerEntry({\n        userId: shopOwnerId,\n        counterpartyId: retailerId,\n        entryType: 'DEBIT',\n        transactionType: 'BALANCE_CLEAR_CREDIT',\n        amount: outstandingBalancePayment.toString(),\n        description: `Settlement of outstanding balance. ${note || ''}`,\n        referenceId: `SETTLEMENT-${Date.now()}`,\n        metadata: JSON.stringify({ settlementType: 'outstanding_balance', note })\n      }));\n      \n      entries.push(await this.addLedgerEntry({\n        userId: retailerId,\n        counterpartyId: shopOwnerId,\n        entryType: 'CREDIT',\n        transactionType: 'BALANCE_CLEAR_CREDIT',\n        amount: outstandingBalancePayment.toString(),\n        description: `Outstanding balance settlement received. ${note || ''}`,\n        referenceId: `SETTLEMENT-${Date.now()}`,\n        metadata: JSON.stringify({ settlementType: 'outstanding_balance', note })\n      }));\n    }\n    \n    return { entries, totalSettled: totalPayment };\n  }\n\n  async addPaymentAudit(auditData: InsertPaymentAuditTrail): Promise<PaymentAuditTrail> {\n    const [audit] = await db.insert(paymentAuditTrail).values(auditData).returning();\n    return audit;\n  }\n\n  async getPaymentAuditTrail(orderId: string): Promise<PaymentAuditTrail[]> {\n    return await db.select().from(paymentAuditTrail)\n      .where(eq(paymentAuditTrail.orderId, orderId))\n      .orderBy(desc(paymentAuditTrail.createdAt));\n  }\n\n  async getDeliveryBoysByRetailer(retailerId: string): Promise<User[]> {\n    // Return all delivery boy users - since delivery boys are now just users with DELIVERY_BOY role\n    return await db.select().from(users)\n      .where(eq(users.role, 'DELIVERY_BOY'))\n      .orderBy(desc(users.createdAt));\n  }\n\n  async getDeliveryBoy(id: string): Promise<User | undefined> {\n    // Get delivery boy user by ID\n    const [deliveryBoy] = await db.select().from(users)\n      .where(\n        and(\n          eq(users.id, id),\n          eq(users.role, 'DELIVERY_BOY')\n        )\n      );\n    return deliveryBoy || undefined;\n  }\n\n  async getDeliveryBoyByPhone(phone: string): Promise<User | undefined> {\n    // Get delivery boy user by phone\n    const [deliveryBoy] = await db.select().from(users)\n      .where(\n        and(\n          eq(users.phone, phone),\n          eq(users.role, 'DELIVERY_BOY')\n        )\n      );\n    return deliveryBoy || undefined;\n  }\n\n  async findDeliveryBoyById(retailerId: string, deliveryBoyId: string): Promise<{ user: User; alreadyAdded: boolean } | undefined> {\n    // Search for delivery boy user directly by ID\n    const [deliveryBoyUser] = await db.select().from(users)\n      .where(\n        and(\n          eq(users.id, deliveryBoyId),\n          eq(users.role, 'DELIVERY_BOY')\n        )\n      );\n    \n    if (!deliveryBoyUser) {\n      return undefined;\n    }\n    \n    // Check if this delivery boy is already linked to the retailer\n    const alreadyAdded = await this.isDeliveryBoyLinkedToRetailer(retailerId, deliveryBoyId);\n    \n    return {\n      user: deliveryBoyUser,\n      alreadyAdded\n    };\n  }\n\n  // Retailer-Delivery Boy relationship operations\n  async addDeliveryBoyToRetailer(retailerId: string, deliveryBoyId: string, addedBy: string, notes?: string): Promise<RetailerDeliveryBoy> {\n    const [relationship] = await db.insert(retailerDeliveryBoys).values({\n      retailerId,\n      deliveryBoyId,\n      addedBy,\n      notes,\n      status: 'ACTIVE'\n    }).returning();\n    return relationship;\n  }\n\n  async removeDeliveryBoyFromRetailer(retailerId: string, deliveryBoyId: string): Promise<void> {\n    await db.delete(retailerDeliveryBoys)\n      .where(\n        and(\n          eq(retailerDeliveryBoys.retailerId, retailerId),\n          eq(retailerDeliveryBoys.deliveryBoyId, deliveryBoyId)\n        )\n      );\n  }\n\n  async isDeliveryBoyLinkedToRetailer(retailerId: string, deliveryBoyId: string): Promise<boolean> {\n    const [relationship] = await db.select().from(retailerDeliveryBoys)\n      .where(\n        and(\n          eq(retailerDeliveryBoys.retailerId, retailerId),\n          eq(retailerDeliveryBoys.deliveryBoyId, deliveryBoyId),\n          eq(retailerDeliveryBoys.status, 'ACTIVE')\n        )\n      );\n    return !!relationship;\n  }\n\n  async getLinkedDeliveryBoys(retailerId: string): Promise<any[]> {\n    const result = await db\n      .select({\n        id: users.id,\n        email: users.email,\n        fullName: users.fullName,\n        phone: users.phone,\n        role: users.role,\n        linkedAt: retailerDeliveryBoys.addedAt,\n        notes: retailerDeliveryBoys.notes,\n        relationshipId: retailerDeliveryBoys.id\n      })\n      .from(retailerDeliveryBoys)\n      .innerJoin(users, eq(retailerDeliveryBoys.deliveryBoyId, users.id))\n      .where(\n        and(\n          eq(retailerDeliveryBoys.retailerId, retailerId),\n          eq(retailerDeliveryBoys.status, 'ACTIVE')\n        )\n      )\n      .orderBy(desc(retailerDeliveryBoys.addedAt));\n    \n    return result;\n  }\n\n  async getLinkedRetailers(deliveryBoyId: string): Promise<any[]> {\n    const result = await db\n      .select({\n        id: users.id,\n        email: users.email,\n        fullName: users.fullName,\n        phone: users.phone,\n        role: users.role,\n        linkedAt: retailerDeliveryBoys.addedAt,\n        notes: retailerDeliveryBoys.notes,\n        relationshipId: retailerDeliveryBoys.id\n      })\n      .from(retailerDeliveryBoys)\n      .innerJoin(users, eq(retailerDeliveryBoys.retailerId, users.id))\n      .where(\n        and(\n          eq(retailerDeliveryBoys.deliveryBoyId, deliveryBoyId),\n          eq(retailerDeliveryBoys.status, 'ACTIVE')\n        )\n      )\n      .orderBy(desc(retailerDeliveryBoys.addedAt));\n    \n    return result;\n  }\n\n  async getRetailerDeliveryBoyRelationship(retailerId: string, deliveryBoyId: string): Promise<RetailerDeliveryBoy | undefined> {\n    const [relationship] = await db.select().from(retailerDeliveryBoys)\n      .where(\n        and(\n          eq(retailerDeliveryBoys.retailerId, retailerId),\n          eq(retailerDeliveryBoys.deliveryBoyId, deliveryBoyId)\n        )\n      );\n    return relationship || undefined;\n  }\n\n\n\n  // Delivery boy order management\n  async getOrdersForDeliveryBoy(deliveryBoyUserId: string): Promise<any[]> {\n    const result = await db\n      .select({\n        id: orders.id,\n        status: orders.status,\n        totalAmount: orders.totalAmount,\n        deliveryType: orders.deliveryType,\n        deliveryAt: orders.deliveryAt,\n        note: orders.note,\n        createdAt: orders.createdAt,\n        store: {\n          id: stores.id,\n          name: stores.name,\n          address: stores.address,\n          city: stores.city,\n          pincode: stores.pincode,\n        },\n        owner: {\n          id: users.id,\n          fullName: users.fullName,\n          phone: users.phone,\n        }\n      })\n      .from(orders)\n      .innerJoin(stores, eq(orders.storeId, stores.id))\n      .innerJoin(users, eq(orders.ownerId, users.id))\n      .where(\n        and(\n          eq(orders.assignedDeliveryBoyId, deliveryBoyUserId),\n          or(\n            eq(orders.status, 'ACCEPTED'),\n            eq(orders.status, 'READY'),\n            eq(orders.status, 'OUT_FOR_DELIVERY')\n          )\n        )\n      )\n      .orderBy(desc(orders.createdAt));\n    \n    // For each order, check if there are any approved payment change requests\n    const ordersWithApprovalStatus = await Promise.all(\n      result.map(async (order) => {\n        const [approvedRequest] = await db\n          .select({\n            id: paymentChangeRequests.id,\n            status: paymentChangeRequests.status\n          })\n          .from(paymentChangeRequests)\n          .where(\n            and(\n              eq(paymentChangeRequests.orderId, order.id),\n              eq(paymentChangeRequests.deliveryBoyId, deliveryBoyUserId),\n              eq(paymentChangeRequests.status, 'APPROVED')\n            )\n          )\n          .limit(1);\n        \n        return {\n          ...order,\n          paymentChangeApproved: !!approvedRequest\n        };\n      })\n    );\n    \n    return ordersWithApprovalStatus;\n  }\n\n  async getOrderForDeliveryBoy(orderId: string, deliveryBoyUserId: string): Promise<any> {\n    const [result] = await db\n      .select({\n        id: orders.id,\n        status: orders.status,\n        totalAmount: orders.totalAmount,\n        deliveryType: orders.deliveryType,\n        deliveryAt: orders.deliveryAt,\n        note: orders.note,\n        paymentReceived: orders.paymentReceived,\n        amountReceived: orders.amountReceived,\n        remainingBalance: orders.remainingBalance,\n        isPartialPayment: orders.isPartialPayment,\n        createdAt: orders.createdAt,\n        ownerId: orders.ownerId,\n        retailerId: orders.retailerId,\n        store: {\n          id: stores.id,\n          name: stores.name,\n          address: stores.address,\n          city: stores.city,\n          pincode: stores.pincode,\n        },\n        owner: {\n          id: users.id,\n          fullName: users.fullName,\n          phone: users.phone,\n        }\n      })\n      .from(orders)\n      .innerJoin(stores, eq(orders.storeId, stores.id))\n      .innerJoin(users, eq(orders.ownerId, users.id))\n      .where(\n        and(\n          eq(orders.id, orderId),\n          eq(orders.assignedDeliveryBoyId, deliveryBoyUserId)\n        )\n      );\n    \n    return result;\n  }\n\n  // Payment change requests\n  async createPaymentChangeRequest(request: InsertPaymentChangeRequest): Promise<PaymentChangeRequest> {\n    const [result] = await db.insert(paymentChangeRequests).values(request).returning();\n    return result;\n  }\n\n  async getPaymentChangeRequest(id: string): Promise<any> {\n    const [result] = await db\n      .select({\n        id: paymentChangeRequests.id,\n        orderId: paymentChangeRequests.orderId,\n        deliveryBoyId: paymentChangeRequests.deliveryBoyId,\n        originalAmount: paymentChangeRequests.originalAmount,\n        requestedAmount: paymentChangeRequests.requestedAmount,\n        reason: paymentChangeRequests.reason,\n        status: paymentChangeRequests.status,\n        approvedBy: paymentChangeRequests.approvedBy,\n        approvedAt: paymentChangeRequests.approvedAt,\n        createdAt: paymentChangeRequests.createdAt,\n        order: {\n          id: orders.id,\n          ownerId: orders.ownerId,\n          retailerId: orders.retailerId,\n          status: orders.status,\n        }\n      })\n      .from(paymentChangeRequests)\n      .innerJoin(orders, eq(paymentChangeRequests.orderId, orders.id))\n      .where(eq(paymentChangeRequests.id, id));\n    \n    return result;\n  }\n\n  async getPaymentChangeRequestsForShopOwner(shopOwnerId: string): Promise<any[]> {\n    const result = await db\n      .select({\n        id: paymentChangeRequests.id,\n        orderId: paymentChangeRequests.orderId,\n        originalAmount: paymentChangeRequests.originalAmount,\n        requestedAmount: paymentChangeRequests.requestedAmount,\n        reason: paymentChangeRequests.reason,\n        status: paymentChangeRequests.status,\n        createdAt: paymentChangeRequests.createdAt,\n        deliveryBoy: {\n          id: users.id,\n          fullName: users.fullName,\n        },\n        order: {\n          id: orders.id,\n          status: orders.status,\n        }\n      })\n      .from(paymentChangeRequests)\n      .innerJoin(orders, eq(paymentChangeRequests.orderId, orders.id))\n      .innerJoin(users, eq(paymentChangeRequests.deliveryBoyId, users.id))\n      .where(\n        and(\n          eq(orders.ownerId, shopOwnerId),\n          eq(paymentChangeRequests.status, 'PENDING')\n        )\n      )\n      .orderBy(desc(paymentChangeRequests.createdAt));\n    \n    return result;\n  }\n\n  async updatePaymentChangeRequestStatus(id: string, status: string): Promise<PaymentChangeRequest> {\n    const [result] = await db\n      .update(paymentChangeRequests)\n      .set({ \n        status,\n        approvedAt: status === 'APPROVED' ? new Date() : undefined\n      })\n      .where(eq(paymentChangeRequests.id, id))\n      .returning();\n    \n    return result;\n  }\n\n  async getPaymentChangeRequestsForOrder(orderId: string): Promise<any[]> {\n    const result = await db\n      .select({\n        id: paymentChangeRequests.id,\n        orderId: paymentChangeRequests.orderId,\n        deliveryBoyId: paymentChangeRequests.deliveryBoyId,\n        originalAmount: paymentChangeRequests.originalAmount,\n        requestedAmount: paymentChangeRequests.requestedAmount,\n        reason: paymentChangeRequests.reason,\n        status: paymentChangeRequests.status,\n        createdAt: paymentChangeRequests.createdAt,\n        approvedAt: paymentChangeRequests.approvedAt\n      })\n      .from(paymentChangeRequests)\n      .where(eq(paymentChangeRequests.orderId, orderId))\n      .orderBy(desc(paymentChangeRequests.createdAt));\n    \n    return result;\n  }\n\n  // Order amount updates\n  async updateOrderAmount(orderId: string, newAmount: string): Promise<Order> {\n    const [result] = await db\n      .update(orders)\n      .set({ \n        totalAmount: newAmount,\n        updatedAt: new Date()\n      })\n      .where(eq(orders.id, orderId))\n      .returning();\n    \n    return result;\n  }\n\n  // Khatabook operations\n  async createKhatabookEntry(entry: InsertKhatabook): Promise<Khatabook> {\n    // Calculate the new balance\n    const currentBalance = await this.getCurrentBalance(entry.userId, entry.counterpartyId || undefined);\n    const newBalance = entry.entryType === 'CREDIT' \n      ? (currentBalance + parseFloat(entry.amount.toString()))\n      : (currentBalance - parseFloat(entry.amount.toString()));\n    \n    const [result] = await db.insert(khatabook).values({\n      ...entry,\n      balance: newBalance.toString()\n    }).returning();\n    \n    return result;\n  }\n\n  private async getCurrentBalance(userId: string, counterpartyId?: string): Promise<number> {\n    const conditions = [eq(khatabook.userId, userId)];\n    if (counterpartyId) {\n      conditions.push(eq(khatabook.counterpartyId, counterpartyId));\n    }\n\n    const [result] = await db\n      .select({ balance: khatabook.balance })\n      .from(khatabook)\n      .where(and(...conditions))\n      .orderBy(desc(khatabook.createdAt))\n      .limit(1);\n    \n    return result ? parseFloat(result.balance.toString()) : 0;\n  }\n  // Get popular retailers based on order volume and ratings\n  async getPopularRetailers(limit: number = 10): Promise<any[]> {\n    const popularRetailers = await db\n      .select({\n        id: stores.id,\n        name: stores.name,\n        city: stores.city,\n        pincode: stores.pincode,\n        isOpen: stores.isOpen,\n        rating: sql<number>`AVG(CAST(${stores.rating} AS DECIMAL))`.as('rating'),\n        orderCount: sql<number>`COUNT(${orders.id})`.as('orderCount')\n      })\n      .from(stores)\n      .leftJoin(orders, eq(stores.id, orders.retailerId))\n      .groupBy(stores.id, stores.name, stores.city, stores.pincode, stores.isOpen)\n      .orderBy(sql`COUNT(${orders.id}) DESC`, sql`AVG(CAST(${stores.rating} AS DECIMAL)) DESC`)\n      .limit(limit);\n    \n    return popularRetailers;\n  }\n\n  // Get available delivery boys (all delivery boys for now - could be enhanced with availability status)\n  async getAvailableDeliveryBoys(): Promise<any[]> {\n    const deliveryBoys = await db\n      .select({\n        id: users.id,\n        name: users.fullName,\n        phone: users.phone,\n        email: users.email\n      })\n      .from(users)\n      .where(eq(users.role, 'DELIVERY_BOY'));\n    \n    return deliveryBoys;\n  }\n\n  // Get retailer-specific balances for shop owner khatabook\n  async getRetailerBalancesForShopOwner(shopOwnerId: string): Promise<any[]> {\n    const retailerBalances = await db\n      .select({\n        retailerId: stores.id,\n        retailerName: stores.name,\n        currentBalance: sql<number>`\n          COALESCE(SUM(CASE \n            WHEN ${khatabook.entryType} = 'CREDIT' THEN ${khatabook.amount}\n            WHEN ${khatabook.entryType} = 'DEBIT' THEN -${khatabook.amount}\n            ELSE 0\n          END), 0)`.as('currentBalance'),\n        totalCredits: sql<number>`\n          COALESCE(SUM(CASE \n            WHEN ${khatabook.entryType} = 'CREDIT' THEN ${khatabook.amount}\n            ELSE 0\n          END), 0)`.as('totalCredits'),\n        totalDebits: sql<number>`\n          COALESCE(SUM(CASE \n            WHEN ${khatabook.entryType} = 'DEBIT' THEN ${khatabook.amount}\n            ELSE 0\n          END), 0)`.as('totalDebits')\n      })\n      .from(stores)\n      .leftJoin(orders, eq(stores.id, orders.retailerId))\n      .leftJoin(khatabook, eq(orders.id, khatabook.orderId))\n      .where(eq(orders.ownerId, shopOwnerId))\n      .groupBy(stores.id, stores.name)\n      .having(sql`COUNT(${orders.id}) > 0`);\n    \n    return retailerBalances;\n  }\n\n  // Admin overview operations\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  async getAllOrdersForAdmin(): Promise<any[]> {\n    return await db.query.orders.findMany({\n      with: {\n        owner: true,\n        retailer: true,\n        store: true,\n        items: {\n          with: {\n            listing: {\n              with: {\n                product: true\n              }\n            }\n          }\n        }\n      },\n      orderBy: desc(orders.createdAt),\n      limit: 50\n    });\n  }\n\n  async getSystemAnalytics(): Promise<any> {\n    const totalUsers = await db.select({ count: sql`count(*)` }).from(users);\n    const totalStores = await db.select({ count: sql`count(*)` }).from(stores);\n    const totalProducts = await db.select({ count: sql`count(*)` }).from(productCatalog);\n    const totalOrders = await db.select({ count: sql`count(*)` }).from(orders);\n    \n    const usersByRole = await db.select({\n      role: users.role,\n      count: sql`count(*)`\n    }).from(users).groupBy(users.role);\n\n    const ordersByStatus = await db.select({\n      status: orders.status,\n      count: sql`count(*)`\n    }).from(orders).groupBy(orders.status);\n\n    return {\n      totals: {\n        users: totalUsers[0]?.count || 0,\n        stores: totalStores[0]?.count || 0,\n        products: totalProducts[0]?.count || 0,\n        orders: totalOrders[0]?.count || 0\n      },\n      usersByRole,\n      ordersByStatus\n    };\n  }\n\n  // Delivery request operations\n  async createDeliveryRequest(request: InsertDeliveryRequest): Promise<DeliveryRequest> {\n    const [deliveryRequest] = await db.insert(deliveryRequests).values(request).returning();\n    return deliveryRequest;\n  }\n\n  async getDeliveryRequest(id: string): Promise<DeliveryRequest | undefined> {\n    const [request] = await db.select().from(deliveryRequests).where(eq(deliveryRequests.id, id));\n    return request || undefined;\n  }\n\n  async getDeliveryRequestsByRetailer(retailerId: string): Promise<DeliveryRequest[]> {\n    return await db.select().from(deliveryRequests)\n      .where(eq(deliveryRequests.retailerId, retailerId))\n      .orderBy(desc(deliveryRequests.createdAt));\n  }\n\n  async getOpenDeliveryRequests(): Promise<DeliveryRequest[]> {\n    return await db.select().from(deliveryRequests)\n      .where(eq(deliveryRequests.status, 'OPEN'))\n      .orderBy(desc(deliveryRequests.createdAt));\n  }\n\n  async getAcceptedDeliveryRequestsByDeliveryBoy(deliveryBoyId: string): Promise<DeliveryRequest[]> {\n    return await db.select().from(deliveryRequests)\n      .where(and(\n        eq(deliveryRequests.acceptedBy, deliveryBoyId),\n        eq(deliveryRequests.status, 'ACCEPTED')\n      ))\n      .orderBy(desc(deliveryRequests.acceptedAt));\n  }\n\n  async acceptDeliveryRequest(id: string, deliveryBoyId: string): Promise<DeliveryRequest> {\n    const [request] = await db.update(deliveryRequests)\n      .set({ \n        status: 'ACCEPTED', \n        acceptedBy: deliveryBoyId, \n        acceptedAt: new Date(),\n        updatedAt: new Date()\n      })\n      .where(eq(deliveryRequests.id, id))\n      .returning();\n    return request;\n  }\n\n  async rejectDeliveryRequest(id: string): Promise<DeliveryRequest> {\n    const [request] = await db.update(deliveryRequests)\n      .set({ \n        status: 'REJECTED',\n        updatedAt: new Date()\n      })\n      .where(eq(deliveryRequests.id, id))\n      .returning();\n    return request;\n  }\n\n  async completeDeliveryRequest(id: string, notes?: string): Promise<DeliveryRequest> {\n    const [request] = await db.update(deliveryRequests)\n      .set({ \n        status: 'COMPLETED', \n        completedAt: new Date(),\n        notes,\n        updatedAt: new Date()\n      })\n      .where(eq(deliveryRequests.id, id))\n      .returning();\n    return request;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":46338},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, boolean, decimal, integer, timestamp, pgEnum } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const roleEnum = pgEnum('role', ['ADMIN', 'RETAILER', 'SHOP_OWNER', 'DELIVERY_BOY']);\nexport const orderStatusEnum = pgEnum('order_status', ['PENDING', 'ACCEPTED', 'REJECTED', 'READY', 'OUT_FOR_DELIVERY', 'COMPLETED', 'CANCELLED']);\nexport const deliveryTypeEnum = pgEnum('delivery_type', ['PICKUP', 'DELIVERY']);\nexport const deliveryRequestStatusEnum = pgEnum('delivery_request_status', ['OPEN', 'ACCEPTED', 'REJECTED', 'COMPLETED']);\nexport const ledgerEntryTypeEnum = pgEnum('ledger_entry_type', ['CREDIT', 'DEBIT']);\nexport const ledgerTransactionTypeEnum = pgEnum('ledger_transaction_type', ['ORDER_PLACED', 'ORDER_DEBIT', 'PAYMENT_RECEIVED', 'PAYMENT_CREDIT', 'BALANCE_CLEAR_CREDIT', 'PAYMENT_ADJUSTED', 'ADJUSTMENT', 'REFUND', 'COMMISSION']);\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey(),\n  email: text(\"email\").notNull().unique(),\n  passwordHash: text(\"password_hash\").notNull(),\n  role: roleEnum(\"role\").notNull(),\n  fullName: text(\"full_name\").notNull(),\n  phone: text(\"phone\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const stores = pgTable(\"stores\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ownerId: varchar(\"owner_id\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  address: text(\"address\"),\n  city: text(\"city\"),\n  pincode: text(\"pincode\"),\n  logoUrl: text(\"logo_url\"),\n  isOpen: boolean(\"is_open\").default(true),\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const productCatalog = pgTable(\"product_catalog\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  brand: text(\"brand\"),\n  imageUrl: text(\"image_url\"),\n  unit: text(\"unit\").notNull(), // kg, piece, box, liter\n  size: text(\"size\"), // 500g, 1L, 10pcs\n  isWholesale: boolean(\"is_wholesale\").default(false),\n  createdById: varchar(\"created_by_id\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const listings = pgTable(\"listings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  storeId: varchar(\"store_id\").notNull(),\n  productId: varchar(\"product_id\").notNull(),\n  priceRetail: decimal(\"price_retail\", { precision: 10, scale: 2 }).notNull(),\n  priceWholesale: decimal(\"price_wholesale\", { precision: 10, scale: 2 }),\n  available: boolean(\"available\").default(true),\n  stockQty: integer(\"stock_qty\"),\n  sku: text(\"sku\").unique(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ownerId: varchar(\"owner_id\").notNull(),\n  retailerId: varchar(\"retailer_id\").notNull(),\n  storeId: varchar(\"store_id\").notNull(),\n  status: orderStatusEnum(\"status\").default('PENDING'),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).default(\"0\"),\n  deliveryType: deliveryTypeEnum(\"delivery_type\").default('PICKUP'),\n  deliveryAt: timestamp(\"delivery_at\"),\n  note: text(\"note\"),\n  // Payment confirmation fields\n  paymentReceived: boolean(\"payment_received\").default(false),\n  amountReceived: decimal(\"amount_received\", { precision: 10, scale: 2 }),\n  originalAmountReceived: decimal(\"original_amount_received\", { precision: 10, scale: 2 }),\n  remainingBalance: decimal(\"remaining_balance\", { precision: 10, scale: 2 }).default(\"0\"),\n  isPartialPayment: boolean(\"is_partial_payment\").default(false),\n  paymentReceivedAt: timestamp(\"payment_received_at\"),\n  paymentReceivedBy: varchar(\"payment_received_by\"), // delivery boy user id\n  amountAdjustedBy: varchar(\"amount_adjusted_by\"), // shop owner user id\n  amountAdjustedAt: timestamp(\"amount_adjusted_at\"),\n  adjustmentNote: text(\"adjustment_note\"),\n  assignedDeliveryBoyId: varchar(\"assigned_delivery_boy_id\"), // delivery boy assigned to this order\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const orderItems = pgTable(\"order_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").notNull(),\n  listingId: varchar(\"listing_id\").notNull(),\n  qty: integer(\"qty\").notNull(),\n  priceAt: decimal(\"price_at\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const orderEvents = pgTable(\"order_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").notNull(),\n  type: text(\"type\").notNull(),\n  message: text(\"message\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const fcmTokens = pgTable(\"fcm_tokens\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  token: text(\"token\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const khatabook = pgTable(\"khatabook\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(), // shop owner or retailer\n  counterpartyId: varchar(\"counterparty_id\"), // the other party in the transaction\n  orderId: varchar(\"order_id\"), // related order (optional)\n  entryType: ledgerEntryTypeEnum(\"entry_type\").notNull(), // CREDIT or DEBIT\n  transactionType: ledgerTransactionTypeEnum(\"transaction_type\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  balance: decimal(\"balance\", { precision: 10, scale: 2 }).notNull(), // running balance\n  description: text(\"description\").notNull(),\n  referenceId: varchar(\"reference_id\"), // order id, payment id, etc.\n  metadata: text(\"metadata\"), // JSON string for additional data\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const paymentAuditTrail = pgTable(\"payment_audit_trail\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").notNull(),\n  userId: varchar(\"user_id\").notNull(), // who made the change\n  action: text(\"action\").notNull(), // PAYMENT_RECEIVED, AMOUNT_ADJUSTED, BALANCE_SETTLED\n  oldAmount: decimal(\"old_amount\", { precision: 10, scale: 2 }),\n  newAmount: decimal(\"new_amount\", { precision: 10, scale: 2 }),\n  reason: text(\"reason\"),\n  metadata: text(\"metadata\"), // JSON string for additional context\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n\nexport const deliveryRequests = pgTable(\"delivery_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  retailerId: varchar(\"retailer_id\").notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  pickupAddress: text(\"pickup_address\").notNull(),\n  deliveryAddress: text(\"delivery_address\").notNull(),\n  estimatedDistance: decimal(\"estimated_distance\", { precision: 8, scale: 2 }), // in kilometers\n  estimatedPayment: decimal(\"estimated_payment\", { precision: 10, scale: 2 }).notNull(),\n  orderId: varchar(\"order_id\"), // optional link to specific order\n  status: deliveryRequestStatusEnum(\"status\").default('OPEN'),\n  acceptedBy: varchar(\"accepted_by\"), // delivery boy user id\n  acceptedAt: timestamp(\"accepted_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const paymentChangeRequests = pgTable(\"payment_change_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").notNull(),\n  deliveryBoyId: varchar(\"delivery_boy_id\").notNull(),\n  originalAmount: decimal(\"original_amount\", { precision: 10, scale: 2 }).notNull(),\n  requestedAmount: decimal(\"requested_amount\", { precision: 10, scale: 2 }).notNull(),\n  reason: text(\"reason\").notNull(),\n  status: text(\"status\").notNull().default('PENDING'), // PENDING, APPROVED, REJECTED\n  approvedBy: varchar(\"approved_by\"), // shop owner user id\n  approvedAt: timestamp(\"approved_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Many-to-many relationship between retailers and delivery boys\nexport const retailerDeliveryBoys = pgTable(\"retailer_delivery_boys\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  retailerId: varchar(\"retailer_id\").notNull(),\n  deliveryBoyId: varchar(\"delivery_boy_id\").notNull(),\n  addedAt: timestamp(\"added_at\").defaultNow(),\n  addedBy: varchar(\"added_by\"), // user id who added this relationship\n  status: text(\"status\").notNull().default('ACTIVE'), // ACTIVE, INACTIVE\n  notes: text(\"notes\"), // optional notes about this delivery boy\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  store: one(stores, { fields: [users.id], references: [stores.ownerId] }),\n  fcmTokens: many(fcmTokens),\n  ordersAsOwner: many(orders, { relationName: \"ownerOrders\" }),\n  ordersAsRetailer: many(orders, { relationName: \"retailerOrders\" }),\n  createdProducts: many(productCatalog),\n  ledgerEntries: many(khatabook),\n  deliveryRequests: many(deliveryRequests),\n  acceptedDeliveryRequests: many(deliveryRequests, { relationName: \"acceptedDeliveryRequests\" }),\n  // Retailer relationships\n  linkedDeliveryBoys: many(retailerDeliveryBoys, { relationName: \"retailerLinkedDeliveryBoys\" }),\n  // Delivery boy relationships  \n  linkedToRetailers: many(retailerDeliveryBoys, { relationName: \"deliveryBoyLinkedToRetailers\" }),\n}));\n\nexport const storesRelations = relations(stores, ({ one, many }) => ({\n  owner: one(users, { fields: [stores.ownerId], references: [users.id] }),\n  listings: many(listings),\n  orders: many(orders),\n}));\n\nexport const productCatalogRelations = relations(productCatalog, ({ one, many }) => ({\n  createdBy: one(users, { fields: [productCatalog.createdById], references: [users.id] }),\n  listings: many(listings),\n}));\n\nexport const listingsRelations = relations(listings, ({ one, many }) => ({\n  store: one(stores, { fields: [listings.storeId], references: [stores.id] }),\n  product: one(productCatalog, { fields: [listings.productId], references: [productCatalog.id] }),\n  orderItems: many(orderItems),\n}));\n\nexport const ordersRelations = relations(orders, ({ one, many }) => ({\n  owner: one(users, { fields: [orders.ownerId], references: [users.id], relationName: \"ownerOrders\" }),\n  retailer: one(users, { fields: [orders.retailerId], references: [users.id], relationName: \"retailerOrders\" }),\n  store: one(stores, { fields: [orders.storeId], references: [stores.id] }),\n  items: many(orderItems),\n  timeline: many(orderEvents),\n}));\n\nexport const orderItemsRelations = relations(orderItems, ({ one }) => ({\n  order: one(orders, { fields: [orderItems.orderId], references: [orders.id] }),\n  listing: one(listings, { fields: [orderItems.listingId], references: [listings.id] }),\n}));\n\nexport const orderEventsRelations = relations(orderEvents, ({ one }) => ({\n  order: one(orders, { fields: [orderEvents.orderId], references: [orders.id] }),\n}));\n\nexport const fcmTokensRelations = relations(fcmTokens, ({ one }) => ({\n  user: one(users, { fields: [fcmTokens.userId], references: [users.id] }),\n}));\n\nexport const khatabookRelations = relations(khatabook, ({ one }) => ({\n  user: one(users, { fields: [khatabook.userId], references: [users.id] }),\n  counterparty: one(users, { fields: [khatabook.counterpartyId], references: [users.id] }),\n  order: one(orders, { fields: [khatabook.orderId], references: [orders.id] }),\n}));\n\nexport const paymentAuditTrailRelations = relations(paymentAuditTrail, ({ one }) => ({\n  order: one(orders, { fields: [paymentAuditTrail.orderId], references: [orders.id] }),\n  user: one(users, { fields: [paymentAuditTrail.userId], references: [users.id] }),\n}));\n\n\nexport const deliveryRequestsRelations = relations(deliveryRequests, ({ one }) => ({\n  retailer: one(users, { fields: [deliveryRequests.retailerId], references: [users.id] }),\n  acceptedBy: one(users, { fields: [deliveryRequests.acceptedBy], references: [users.id], relationName: \"acceptedDeliveryRequests\" }),\n  order: one(orders, { fields: [deliveryRequests.orderId], references: [orders.id] }),\n}));\n\nexport const paymentChangeRequestsRelations = relations(paymentChangeRequests, ({ one }) => ({\n  order: one(orders, { fields: [paymentChangeRequests.orderId], references: [orders.id] }),\n  deliveryBoy: one(users, { fields: [paymentChangeRequests.deliveryBoyId], references: [users.id] }),\n  approver: one(users, { fields: [paymentChangeRequests.approvedBy], references: [users.id] }),\n}));\n\nexport const retailerDeliveryBoysRelations = relations(retailerDeliveryBoys, ({ one }) => ({\n  retailer: one(users, { fields: [retailerDeliveryBoys.retailerId], references: [users.id] }),\n  deliveryBoy: one(users, { fields: [retailerDeliveryBoys.deliveryBoyId], references: [users.id] }),\n  addedByUser: one(users, { fields: [retailerDeliveryBoys.addedBy], references: [users.id] }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStoreSchema = createInsertSchema(stores).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertProductCatalogSchema = createInsertSchema(productCatalog).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertListingSchema = createInsertSchema(listings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  priceRetail: z.union([z.string(), z.number()]).transform(val => String(val)),\n  priceWholesale: z.union([z.string(), z.number(), z.null()]).transform(val => val === null ? null : String(val)),\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrderEventSchema = createInsertSchema(orderEvents).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFcmTokenSchema = createInsertSchema(fcmTokens).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertKhatabookSchema = createInsertSchema(khatabook).omit({\n  id: true,\n  createdAt: true,\n}).partial({\n  balance: true,\n});\n\nexport const insertPaymentAuditTrailSchema = createInsertSchema(paymentAuditTrail).omit({\n  id: true,\n  createdAt: true,\n});\n\n\nexport const insertDeliveryRequestSchema = createInsertSchema(deliveryRequests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPaymentChangeRequestSchema = createInsertSchema(paymentChangeRequests).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertRetailerDeliveryBoySchema = createInsertSchema(retailerDeliveryBoys).omit({\n  id: true,\n  addedAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Store = typeof stores.$inferSelect;\nexport type InsertStore = z.infer<typeof insertStoreSchema>;\nexport type ProductCatalog = typeof productCatalog.$inferSelect;\nexport type InsertProductCatalog = z.infer<typeof insertProductCatalogSchema>;\nexport type Listing = typeof listings.$inferSelect;\nexport type InsertListing = z.infer<typeof insertListingSchema>;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type OrderItem = typeof orderItems.$inferSelect;\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\nexport type OrderEvent = typeof orderEvents.$inferSelect;\nexport type InsertOrderEvent = z.infer<typeof insertOrderEventSchema>;\nexport type FcmToken = typeof fcmTokens.$inferSelect;\nexport type InsertFcmToken = z.infer<typeof insertFcmTokenSchema>;\nexport type Khatabook = typeof khatabook.$inferSelect;\nexport type InsertKhatabook = z.infer<typeof insertKhatabookSchema>;\nexport type PaymentAuditTrail = typeof paymentAuditTrail.$inferSelect;\nexport type InsertPaymentAuditTrail = z.infer<typeof insertPaymentAuditTrailSchema>;\nexport type DeliveryRequest = typeof deliveryRequests.$inferSelect;\nexport type InsertDeliveryRequest = z.infer<typeof insertDeliveryRequestSchema>;\nexport type PaymentChangeRequest = typeof paymentChangeRequests.$inferSelect;\nexport type InsertPaymentChangeRequest = z.infer<typeof insertPaymentChangeRequestSchema>;\nexport type RetailerDeliveryBoy = typeof retailerDeliveryBoys.$inferSelect;\nexport type InsertRetailerDeliveryBoy = z.infer<typeof insertRetailerDeliveryBoySchema>;\n","size_bytes":16908},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useSocket } from \"@/hooks/use-socket\";\nimport Login from \"@/pages/login\";\nimport AdminDashboard from \"@/pages/admin/dashboard\";\nimport RetailerDashboard from \"@/pages/retailer/dashboard\";\nimport ShopOwnerDashboard from \"@/pages/shop-owner/dashboard\";\nimport DeliveryBoyDashboard from \"@/pages/delivery-boy/dashboard\";\nimport NotFound from \"@/pages/not-found\";\nimport ToastNotifications from \"@/components/toast-notifications\";\n\nfunction AppContent() {\n  const { user, isLoading } = useAuth();\n  useSocket(); // Initialize socket connection\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <Login />;\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={() => {\n        if (user.role === 'ADMIN') return <AdminDashboard />;\n        if (user.role === 'RETAILER') return <RetailerDashboard />;\n        if (user.role === 'SHOP_OWNER') return <ShopOwnerDashboard />;\n        if (user.role === 'DELIVERY_BOY') return <DeliveryBoyDashboard />;\n        return <NotFound />;\n      }} />\n      <Route path=\"/admin/*\" component={() => user.role === 'ADMIN' ? <AdminDashboard /> : <NotFound />} />\n      <Route path=\"/retailer/*\" component={() => user.role === 'RETAILER' ? <RetailerDashboard /> : <NotFound />} />\n      <Route path=\"/shop/*\" component={() => user.role === 'SHOP_OWNER' ? <ShopOwnerDashboard /> : <NotFound />} />\n      <Route path=\"/delivery/*\" component={() => user.role === 'DELIVERY_BOY' ? <DeliveryBoyDashboard /> : <NotFound />} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AppContent />\n        <Toaster />\n        <ToastNotifications />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2404},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Brand Colors */\n  --zomato-red: #CB202D;\n  --mine-shaft: #2D2D2D;\n  --desert-storm: #F4F4F2;\n  --valencia-red: #D94148;\n  \n  /* Updated theme colors using brand palette */\n  --background: #f0f0f0;\n  --foreground: #1a1a1a;\n  --card: #fcfcfc;\n  --card-foreground: hsl(0, 0%, 0%);\n  --popover: hsl(45, 25%, 97%);\n  --popover-foreground: hsl(0, 0%, 100%);\n  --primary: #eb1a4e;\n  --primary-foreground: #ffffff;\n  --secondary: #c4c4c4;\n  --secondary-foreground: #1a1a1a;\n  --muted: #e3e3e3;\n  --muted-foreground: #212121;\n  --accent: hsl(0, 0%, 100%);\n  --accent-foreground: hsl(0, 0%, 10.2%);\n  --destructive: hsl(0, 0%, 0%);\n  --destructive-foreground: #ffffff;\n  --border: #e8e8e8;\n  --input: #b5b5b5;\n  --ring: hsl(0, 0%, 41.96%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar-background: #F4F4F2;\n  --sidebar-foreground: hsl(20, 14%, 17%);\n  --sidebar-primary: hsl(9, 75%, 61%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(25, 45%, 80%);\n  --sidebar-accent-foreground: hsl(20, 14%, 17%);\n  --sidebar-border: hsl(45, 15%, 80%);\n  --sidebar-ring: hsl(9, 75%, 61%);\n  --font-sans: 'Poppins', sans-serif;\n  --font-serif: 'Poppins', sans-serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.8rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00), 0px 1px 2px -1px hsl(9, 75%, 61% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00), 0px 1px 2px -1px hsl(9, 75%, 61% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00), 0px 2px 4px -1px hsl(9, 75%, 61% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00), 0px 4px 6px -1px hsl(9, 75%, 61% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00), 0px 8px 10px -1px hsl(9, 75%, 61% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  --sidebar: hsl(45, 25%, 97%);\n}\n\n.dark {\n  /* Dark theme using brand colors */\n  --background: hsl(20, 14%, 4%);\n  --foreground: hsl(45, 25%, 91%);\n  --card: hsl(20, 14%, 8%);\n  --card-foreground: hsl(45, 25%, 85%);\n  --popover: hsl(20, 14%, 4%);\n  --popover-foreground: hsl(45, 25%, 91%);\n  --primary: hsl(9, 75%, 61%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(30, 15%, 52%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(20, 14%, 15%);\n  --muted-foreground: hsl(45, 15%, 46%);\n  --accent: hsl(25, 45%, 20%);\n  --accent-foreground: hsl(45, 25%, 85%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(20, 14%, 15%);\n  --input: hsl(20, 14%, 18%);\n  --ring: hsl(9, 75%, 61%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar-background: #2D2D2D;\n  --sidebar-foreground: hsl(45, 25%, 85%);\n  --sidebar-primary: hsl(9, 75%, 61%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(25, 45%, 20%);\n  --sidebar-accent-foreground: hsl(45, 25%, 85%);\n  --sidebar-border: hsl(20, 14%, 15%);\n  --sidebar-ring: hsl(9, 75%, 61%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --sidebar: hsl(20, 14%, 8%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":4680},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/toast-notifications.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useSocket } from \"@/hooks/use-socket\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nexport default function ToastNotifications() {\n  const { socket, isConnected } = useSocket();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [paymentChangeRequest, setPaymentChangeRequest] = useState<any>(null);\n\n  // Mutations for handling payment change requests\n  const respondToPaymentChangeMutation = useMutation({\n    mutationFn: async ({ requestId, response }: { requestId: string; response: 'APPROVED' | 'REJECTED' }) => {\n      return apiRequest('POST', `/api/payment-change-requests/${requestId}/respond`, { response });\n    },\n    onSuccess: (data, variables) => {\n      const action = variables.response === 'APPROVED' ? 'approved' : 'rejected';\n      toast({ \n        title: `Payment change ${action}`, \n        description: `The payment change request has been ${action}`,\n        variant: variables.response === 'APPROVED' ? 'default' : 'destructive'\n      });\n      setPaymentChangeRequest(null);\n      queryClient.invalidateQueries({ queryKey: ['/api/orders'] });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to respond to payment change request\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handlePaymentChangeResponse = (approved: boolean) => {\n    if (!paymentChangeRequest) return;\n    \n    respondToPaymentChangeMutation.mutate({\n      requestId: paymentChangeRequest.requestId,\n      response: approved ? 'APPROVED' : 'REJECTED'\n    });\n  };\n\n  useEffect(() => {\n    if (!socket || !isConnected || !user) return;\n\n    const handleOrderEvent = (data: any) => {\n      const { event, payload, orderId, type } = data;\n      \n      // Handle delivery request notifications\n      if (type === 'newDeliveryRequest' && user.role === 'DELIVERY_BOY') {\n        toast({\n          title: \"🚚 New Delivery Request!\",\n          description: `${payload.description}\\nPickup: ${payload.pickupAddress}\\nDelivery: ${payload.deliveryAddress}\\nReward: ₹${payload.estimatedPayment}`,\n          duration: 15000,\n        });\n        return;\n      }\n      \n      // Handle payment change requests for shop owners\n      if (type === 'PAYMENT_CHANGE_REQUEST' && user.role === 'SHOP_OWNER') {\n        setPaymentChangeRequest({\n          orderId: data.orderId,\n          originalAmount: data.originalAmount,\n          requestedAmount: data.requestedAmount,\n          reason: data.reason,\n          requestId: data.requestId\n        });\n        \n        toast({\n          title: \"💰 Payment Change Request\",\n          description: `Delivery boy requests changing payment from ₹${data.originalAmount} to ₹${data.requestedAmount}`,\n          duration: 10000,\n        });\n        return;\n      }\n      \n      // Handle payment change responses for delivery boys\n      if (type === 'PAYMENT_CHANGE_RESPONSE' && user.role === 'DELIVERY_BOY') {\n        const statusMessage = data.response === 'APPROVED' \n          ? `✅ Payment change approved! New amount: ₹${data.finalAmount}`\n          : `❌ Payment change rejected. Amount remains: ₹${data.finalAmount}`;\n          \n        toast({\n          title: \"Payment Change Response\",\n          description: statusMessage,\n          variant: data.response === 'APPROVED' ? 'default' : 'destructive',\n          duration: 8000,\n        });\n        return;\n      }\n      \n      // Handle payment received notifications for retailers\n      if (type === 'PAYMENT_RECEIVED_NOTIFICATION' && user.role === 'RETAILER') {\n        toast({\n          title: \"💰 Payment Received!\",\n          description: `${data.deliveryBoyName} collected ₹${data.amount} from ${data.customerName} for order ${data.orderNumber}`,\n          duration: 10000,\n        });\n        return;\n      }\n      \n      switch (event) {\n        case 'orderPlaced':\n          if (user.role === 'RETAILER') {\n            toast({\n              title: \"New Order Received!\",\n              description: `Order #${orderId.slice(-8)} - ₹${payload.totalAmount}`,\n              duration: 5000,\n            });\n          }\n          break;\n          \n        case 'orderAccepted':\n          if (user.role === 'SHOP_OWNER') {\n            toast({\n              title: \"Order Accepted\",\n              description: `Your order #${orderId.slice(-8)} has been accepted`,\n              duration: 5000,\n            });\n          }\n          break;\n          \n        case 'orderRejected':\n          if (user.role === 'SHOP_OWNER') {\n            toast({\n              title: \"Order Rejected\",\n              description: `Your order #${orderId.slice(-8)} was rejected${payload.reason ? `: ${payload.reason}` : ''}`,\n              variant: \"destructive\",\n              duration: 5000,\n            });\n          }\n          break;\n          \n        case 'orderStatusChanged':\n          const statusMessages = {\n            'READY': 'Your order is ready for pickup/delivery',\n            'OUT_FOR_DELIVERY': 'Your order is out for delivery',\n            'COMPLETED': 'Your order has been completed'\n          };\n          \n          const message = statusMessages[payload.status as keyof typeof statusMessages];\n          if (message && user.role === 'SHOP_OWNER') {\n            toast({\n              title: \"Order Status Updated\",\n              description: `Order #${orderId.slice(-8)}: ${message}`,\n              duration: 5000,\n            });\n          }\n          break;\n          \n        case 'orderCancelled':\n          if (user.role === 'RETAILER') {\n            toast({\n              title: \"Order Cancelled\",\n              description: `Order #${orderId.slice(-8)} was cancelled by customer`,\n              variant: \"destructive\",\n              duration: 5000,\n            });\n          }\n          break;\n      }\n    };\n\n    // Listen for all order events\n    socket.addEventListener('message', (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        handleOrderEvent(data);\n      } catch (error) {\n        console.error('Failed to parse WebSocket message:', error);\n      }\n    });\n\n    return () => {\n      // WebSocket cleanup is handled in useSocket hook\n    };\n  }, [socket, isConnected, user, toast]);\n\n  return (\n    <>\n      {/* Payment Change Request Modal */}\n      <Dialog open={!!paymentChangeRequest} onOpenChange={() => setPaymentChangeRequest(null)}>\n        <DialogContent className=\"sm:max-w-md\" data-testid=\"payment-change-request-modal\">\n          <DialogHeader>\n            <DialogTitle className=\"text-center\">💰 Payment Change Request</DialogTitle>\n          </DialogHeader>\n          \n          {paymentChangeRequest && (\n            <div className=\"space-y-4\">\n              <div className=\"bg-muted p-4 rounded-lg\">\n                <div className=\"text-sm text-muted-foreground mb-2\">Order #{paymentChangeRequest.orderId.slice(-8)}</div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span>Original Amount:</span>\n                    <span className=\"font-semibold\">₹{paymentChangeRequest.originalAmount}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Requested Amount:</span>\n                    <span className=\"font-semibold text-primary\">₹{paymentChangeRequest.requestedAmount}</span>\n                  </div>\n                  <div className=\"border-t pt-2\">\n                    <span className=\"text-sm font-medium\">Reason:</span>\n                    <p className=\"text-sm text-muted-foreground mt-1\">{paymentChangeRequest.reason}</p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex gap-3\">\n                <Button \n                  variant=\"destructive\" \n                  className=\"flex-1\"\n                  onClick={() => handlePaymentChangeResponse(false)}\n                  disabled={respondToPaymentChangeMutation.isPending}\n                  data-testid=\"reject-payment-change\"\n                >\n                  ❌ Reject\n                </Button>\n                <Button \n                  className=\"flex-1\"\n                  onClick={() => handlePaymentChangeResponse(true)}\n                  disabled={respondToPaymentChangeMutation.isPending}\n                  data-testid=\"accept-payment-change\"\n                >\n                  ✅ Accept\n                </Button>\n              </div>\n              \n              <div className=\"text-xs text-center text-muted-foreground\">\n                This request was sent by the delivery boy for order transparency\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":9122},"client/src/hooks/use-auth.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuthStore } from \"@/store/auth\";\nimport { login as authLogin, logout as authLogout, getCurrentUser } from \"@/lib/auth\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nexport function useAuth() {\n  const { user, token, setUser, setToken, clearAuth } = useAuthStore();\n\n  // Check for existing session on mount\n  const { data: currentUser, isLoading } = useQuery({\n    queryKey: ['/api/auth/me'],\n    queryFn: getCurrentUser,\n    enabled: !!token && !user,\n    retry: false,\n    staleTime: Infinity,\n    onError: () => {\n      // If getting current user fails, clear tokens\n      clearAuth();\n    },\n  });\n\n  // Update user in store when query resolves\n  useEffect(() => {\n    if (currentUser && !user) {\n      setUser(currentUser.user);\n    }\n  }, [currentUser, user, setUser]);\n\n  // Login mutation\n  const loginMutation = useMutation({\n    mutationFn: authLogin,\n    onSuccess: (data) => {\n      setToken(data.accessToken);\n      setUser(data.user);\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n    },\n  });\n\n  // Logout mutation\n  const logoutMutation = useMutation({\n    mutationFn: authLogout,\n    onSuccess: () => {\n      clearAuth();\n      queryClient.clear();\n    },\n  });\n\n  const login = async (email: string, password: string) => {\n    return loginMutation.mutateAsync({ email, password });\n  };\n\n  const logout = () => {\n    logoutMutation.mutate();\n  };\n\n  return {\n    user,\n    token,\n    isLoading: isLoading || loginMutation.isPending,\n    login,\n    logout,\n    isAuthenticated: !!user && !!token,\n  };\n}\n","size_bytes":1659},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-socket.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { connectSocket, disconnectSocket, getSocket } from \"@/lib/socket\";\n\nexport function useSocket() {\n  const { user, isAuthenticated } = useAuth();\n  const [isConnected, setIsConnected] = useState(false);\n  const [socket, setSocket] = useState<WebSocket | null>(null);\n\n  useEffect(() => {\n    if (!isAuthenticated || !user) {\n      // Disconnect if not authenticated\n      if (socket) {\n        disconnectSocket();\n        setSocket(null);\n        setIsConnected(false);\n      }\n      return;\n    }\n\n    // Connect socket\n    const ws = connectSocket(user.id);\n    setSocket(ws);\n\n    const handleOpen = () => {\n      setIsConnected(true);\n      console.log('WebSocket connected');\n    };\n\n    const handleClose = () => {\n      setIsConnected(false);\n      console.log('WebSocket disconnected');\n    };\n\n    const handleError = (error: Event) => {\n      console.error('WebSocket error:', error);\n      setIsConnected(false);\n    };\n\n    ws.addEventListener('open', handleOpen);\n    ws.addEventListener('close', handleClose);\n    ws.addEventListener('error', handleError);\n\n    return () => {\n      ws.removeEventListener('open', handleOpen);\n      ws.removeEventListener('close', handleClose);\n      ws.removeEventListener('error', handleError);\n      disconnectSocket();\n      setSocket(null);\n      setIsConnected(false);\n    };\n  }, [isAuthenticated, user]);\n\n  return {\n    socket: socket || getSocket(),\n    isConnected,\n  };\n}\n","size_bytes":1528},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface User {\n  id: string;\n  email: string;\n  fullName: string;\n  role: 'ADMIN' | 'RETAILER' | 'SHOP_OWNER' | 'DELIVERY_BOY';\n}\n\nexport interface AuthResponse {\n  accessToken: string;\n  refreshToken: string;\n  user: User;\n}\n\nconst TOKEN_KEY = 'accessToken';\nconst REFRESH_TOKEN_KEY = 'refreshToken';\n\nexport function getStoredToken(): string | null {\n  return localStorage.getItem(TOKEN_KEY);\n}\n\nexport function setStoredToken(token: string): void {\n  localStorage.setItem(TOKEN_KEY, token);\n}\n\nexport function getStoredRefreshToken(): string | null {\n  return localStorage.getItem(REFRESH_TOKEN_KEY);\n}\n\nexport function setStoredRefreshToken(token: string): void {\n  localStorage.setItem(REFRESH_TOKEN_KEY, token);\n}\n\nexport function clearStoredTokens(): void {\n  localStorage.removeItem(TOKEN_KEY);\n  localStorage.removeItem(REFRESH_TOKEN_KEY);\n}\n\nexport async function login(credentials: LoginCredentials): Promise<AuthResponse> {\n  const response = await apiRequest('POST', '/api/auth/login', credentials);\n  const data = await response.json();\n  \n  // Store tokens\n  setStoredToken(data.accessToken);\n  setStoredRefreshToken(data.refreshToken);\n  \n  return data;\n}\n\nexport async function logout(): Promise<void> {\n  try {\n    // Try to call logout endpoint if token exists\n    const token = getStoredToken();\n    if (token) {\n      await fetch('/api/auth/logout', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n    }\n  } catch (error) {\n    // Ignore logout errors, just clear local storage\n    console.warn('Logout request failed, clearing local storage');\n  } finally {\n    clearStoredTokens();\n  }\n}\n\nexport async function getCurrentUser() {\n  const token = getStoredToken();\n  if (!token) {\n    throw new Error('No token available');\n  }\n\n  const response = await fetch('/api/auth/me', {\n    headers: {\n      'Authorization': `Bearer ${token}`,\n    },\n  });\n\n  if (!response.ok) {\n    if (response.status === 401 || response.status === 403) {\n      // Try to refresh token first\n      try {\n        const newToken = await refreshToken();\n        // Retry with new token\n        const retryResponse = await fetch('/api/auth/me', {\n          headers: {\n            'Authorization': `Bearer ${newToken}`,\n          },\n        });\n        if (retryResponse.ok) {\n          return retryResponse.json();\n        }\n      } catch (refreshError) {\n        // Refresh failed, clear tokens\n        clearStoredTokens();\n      }\n      clearStoredTokens();\n    }\n    throw new Error('Failed to get current user');\n  }\n\n  return response.json();\n}\n\nexport async function refreshToken(): Promise<string> {\n  const refreshToken = getStoredRefreshToken();\n  if (!refreshToken) {\n    throw new Error('No refresh token available');\n  }\n\n  const response = await apiRequest('POST', '/api/auth/refresh', {\n    refreshToken,\n  });\n\n  const data = await response.json();\n  setStoredToken(data.accessToken);\n  \n  return data.accessToken;\n}\n","size_bytes":3121},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\nimport { refreshToken, clearStoredTokens } from \"./auth\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n  retryOnAuth: boolean = true,\n): Promise<Response> {\n  const headers: Record<string, string> = {};\n  \n  // Add Authorization header if token exists\n  const token = localStorage.getItem('accessToken');\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  \n  // Add Content-Type header for requests with data\n  if (data) {\n    headers['Content-Type'] = 'application/json';\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  // Handle token expiration\n  if (res.status === 403 && retryOnAuth && url !== '/api/auth/refresh') {\n    try {\n      // Try to refresh the token\n      await refreshToken();\n      \n      // Retry the original request with the new token\n      const newToken = localStorage.getItem('accessToken');\n      const newHeaders = { ...headers };\n      if (newToken) {\n        newHeaders['Authorization'] = `Bearer ${newToken}`;\n      }\n      \n      const retryRes = await fetch(url, {\n        method,\n        headers: newHeaders,\n        body: data ? JSON.stringify(data) : undefined,\n        credentials: \"include\",\n      });\n      \n      await throwIfResNotOk(retryRes);\n      return retryRes;\n    } catch (refreshError) {\n      // Refresh failed, clear tokens and redirect to login\n      clearStoredTokens();\n      window.location.href = '/';\n      throw refreshError;\n    }\n  }\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const headers: Record<string, string> = {};\n    \n    // Add Authorization header if token exists\n    const token = localStorage.getItem('accessToken');\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    // Handle token expiration for queries\n    if (res.status === 403) {\n      try {\n        // Try to refresh the token\n        await refreshToken();\n        \n        // Retry the query with the new token\n        const newToken = localStorage.getItem('accessToken');\n        const newHeaders = { ...headers };\n        if (newToken) {\n          newHeaders['Authorization'] = `Bearer ${newToken}`;\n        }\n        \n        const retryRes = await fetch(queryKey.join(\"/\") as string, {\n          headers: newHeaders,\n          credentials: \"include\",\n        });\n        \n        await throwIfResNotOk(retryRes);\n        return await retryRes.json();\n      } catch (refreshError) {\n        // Refresh failed, clear tokens and redirect to login\n        clearStoredTokens();\n        window.location.href = '/';\n        throw refreshError;\n      }\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":3734},"client/src/lib/socket.ts":{"content":"let socket: WebSocket | null = null;\n\nexport function connectSocket(userId: string): WebSocket {\n  if (socket && socket.readyState === WebSocket.OPEN) {\n    return socket;\n  }\n\n  const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n  const wsUrl = `${protocol}//${window.location.host}/ws?userId=${userId}`;\n  \n  socket = new WebSocket(wsUrl);\n  \n  socket.addEventListener('open', () => {\n    console.log('WebSocket connection established');\n  });\n\n  socket.addEventListener('error', (error) => {\n    console.error('WebSocket error:', error);\n  });\n\n  socket.addEventListener('close', (event) => {\n    console.log('WebSocket connection closed:', event.code, event.reason);\n    socket = null;\n  });\n\n  return socket;\n}\n\nexport function disconnectSocket(): void {\n  if (socket && socket.readyState === WebSocket.OPEN) {\n    socket.close();\n  }\n  socket = null;\n}\n\nexport function getSocket(): WebSocket | null {\n  return socket;\n}\n\nexport function sendMessage(message: any): void {\n  if (socket && socket.readyState === WebSocket.OPEN) {\n    socket.send(JSON.stringify(message));\n  } else {\n    console.warn('WebSocket is not connected. Cannot send message:', message);\n  }\n}\n","size_bytes":1194},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport logoUrl from \"../assets/logo.png\";\n\nconst demoAccounts = [\n  { email: 'admin@test.com', role: 'Admin', icon: 'fas fa-user-shield' },\n  { email: 'retailer@test.com', role: 'Retailer', icon: 'fas fa-store' },\n  { email: 'shop@test.com', role: 'Shop Owner', icon: 'fas fa-shopping-cart' },\n  { email: 'delivery@test.com', role: 'Delivery Boy', icon: 'fas fa-truck' }\n];\n\nexport default function Login() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const { login } = useAuth();\n  const { toast } = useToast();\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    \n    try {\n      await login(email, password);\n      toast({ title: \"Login successful!\", description: \"Welcome to ShopLink\" });\n    } catch (error: any) {\n      toast({ \n        title: \"Login failed\", \n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const fillLogin = (demoEmail: string) => {\n    setEmail(demoEmail);\n    if (demoEmail === 'admin@test.com') setPassword('admin123');\n    else if (demoEmail === 'retailer@test.com') setPassword('retailer123');\n    else if (demoEmail === 'shop@test.com') setPassword('shop123');\n    else if (demoEmail === 'delivery@test.com') setPassword('delivery123');\n    else setPassword('password123');\n  };\n\n  return (\n    <div className=\"flex items-center justify-center min-h-screen bg-gradient-to-br from-primary/5 to-accent/10\">\n      <Card className=\"w-full max-w-md mx-4 shadow-xl\">\n        <CardContent className=\"p-8\">\n          <div className=\"text-center mb-8\">\n            <div className=\"w-20 h-20 flex items-center justify-center mx-auto mb-4\">\n              <img src={logoUrl} alt=\"ShopLink Logo\" className=\"w-full h-full object-contain\" />\n            </div>\n            <h1 className=\"text-2xl font-bold text-foreground\">Shop Now</h1>\n            <p className=\"text-muted-foreground mt-2\">B2B Commerce Platform</p>\n          </div>\n          \n          <form onSubmit={handleLogin} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"email\" className=\"text-sm font-medium text-foreground\">Email</Label>\n              <Input \n                id=\"email\"\n                type=\"email\" \n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                placeholder=\"Enter your email\" \n                required\n                data-testid=\"input-email\"\n                className=\"mt-2\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"password\" className=\"text-sm font-medium text-foreground\">Password</Label>\n              <Input \n                id=\"password\"\n                type=\"password\" \n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Enter your password\" \n                required\n                data-testid=\"input-password\"\n                className=\"mt-2\"\n              />\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading}\n              data-testid=\"button-login\"\n            >\n              {isLoading ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary-foreground mr-2\"></div>\n                  Signing In...\n                </>\n              ) : (\n                'Sign In'\n              )}\n            </Button>\n          </form>\n          \n          <div className=\"mt-6 pt-6 border-t border-border\">\n            <p className=\"text-sm text-muted-foreground mb-3 text-center\">Demo Accounts</p>\n            <div className=\"space-y-2\">\n              {demoAccounts.map((account) => (\n                <Button\n                  key={account.email}\n                  variant=\"outline\"\n                  onClick={() => fillLogin(account.email)}\n                  className=\"w-full justify-start text-sm\"\n                  data-testid={`button-demo-${account.role.toLowerCase().replace(' ', '-')}`}\n                >\n                  <i className={`${account.icon} mr-3`}></i>\n                  <span className=\"font-medium\">{account.role}:</span>\n                  <span className=\"ml-1\">{account.email}</span>\n                </Button>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4910},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-background\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-destructive\" />\n            <h1 className=\"text-2xl font-bold text-foreground\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-muted-foreground\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":728},"client/src/store/auth.ts":{"content":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { getStoredToken, clearStoredTokens } from '@/lib/auth';\n\ninterface User {\n  id: string;\n  email: string;\n  fullName: string;\n  role: 'ADMIN' | 'RETAILER' | 'SHOP_OWNER' | 'DELIVERY_BOY';\n}\n\ninterface AuthState {\n  user: User | null;\n  token: string | null;\n  setUser: (user: User | null) => void;\n  setToken: (token: string | null) => void;\n  clearAuth: () => void;\n}\n\nexport const useAuthStore = create<AuthState>()(\n  persist(\n    (set) => ({\n      user: null,\n      token: getStoredToken(),\n      setUser: (user) => set({ user }),\n      setToken: (token) => set({ token }),\n      clearAuth: () => {\n        clearStoredTokens();\n        set({ user: null, token: null });\n      },\n    }),\n    {\n      name: 'auth-storage',\n      partialize: (state) => ({ \n        user: state.user,\n        // Don't persist token here, it's handled by auth.ts\n      }),\n    }\n  )\n);\n","size_bytes":955},"client/src/store/cart.ts":{"content":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\nexport interface CartItem {\n  listingId: string;\n  storeId: string;\n  name: string;\n  brand: string;\n  size: string;\n  price: number;\n  imageUrl: string;\n  qty: number;\n}\n\ninterface CartState {\n  cart: CartItem[];\n  addToCart: (item: Omit<CartItem, 'qty'> & { qty?: number }) => void;\n  removeFromCart: (listingId: string) => void;\n  updateQuantity: (listingId: string, qty: number) => void;\n  clearCart: () => void;\n  getTotalAmount: () => number;\n  getItemCount: () => number;\n}\n\nexport const useCartStore = create<CartState>()(\n  persist(\n    (set, get) => ({\n      cart: [],\n      \n      addToCart: (item) => {\n        const { cart } = get();\n        const existingItem = cart.find(cartItem => cartItem.listingId === item.listingId);\n        \n        if (existingItem) {\n          // Update quantity of existing item\n          set({\n            cart: cart.map(cartItem =>\n              cartItem.listingId === item.listingId\n                ? { ...cartItem, qty: cartItem.qty + (item.qty || 1) }\n                : cartItem\n            )\n          });\n        } else {\n          // Add new item to cart\n          set({\n            cart: [...cart, { ...item, qty: item.qty || 1 }]\n          });\n        }\n      },\n      \n      removeFromCart: (listingId) => {\n        set({\n          cart: get().cart.filter(item => item.listingId !== listingId)\n        });\n      },\n      \n      updateQuantity: (listingId, qty) => {\n        if (qty <= 0) {\n          get().removeFromCart(listingId);\n          return;\n        }\n        \n        set({\n          cart: get().cart.map(item =>\n            item.listingId === listingId ? { ...item, qty } : item\n          )\n        });\n      },\n      \n      clearCart: () => {\n        set({ cart: [] });\n      },\n      \n      getTotalAmount: () => {\n        return get().cart.reduce((total, item) => total + (item.price * item.qty), 0);\n      },\n      \n      getItemCount: () => {\n        return get().cart.reduce((count, item) => count + item.qty, 0);\n      },\n    }),\n    {\n      name: 'cart-storage',\n    }\n  )\n);\n","size_bytes":2129},"client/src/components/layout/header.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { ProfileSidebar } from \"@/components/ui/profile-sidebar\";\nimport logoUrl from \"../../assets/logo.png\";\n\ninterface HeaderProps {\n  onMenuClick?: () => void;\n  onNavigationMenuClick?: () => void;\n}\n\nexport default function Header({ onMenuClick, onNavigationMenuClick }: HeaderProps = {}) {\n  const [showProfileSidebar, setShowProfileSidebar] = useState(false);\n  const { user } = useAuth();\n\n  const getRoleDisplay = (role: string) => {\n    return role.replace('_', ' ');\n  };\n\n  const getUserInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase();\n  };\n\n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <img src={logoUrl} alt=\"ShopLink Logo\" className=\"w-10 h-10 object-contain\" />\n          <h1 className=\"text-xl font-bold text-foreground\">Shop Now</h1>\n          <Badge variant=\"secondary\" data-testid=\"badge-role\">\n            {getRoleDisplay(user?.role || '')}\n          </Badge>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          {/* Notifications */}\n          <Button variant=\"ghost\" size=\"sm\" className=\"relative\" data-testid=\"button-notifications\">\n            <i className=\"fas fa-bell\"></i>\n            <span className=\"absolute -top-1 -right-1 w-5 h-5 bg-destructive text-destructive-foreground text-xs rounded-full flex items-center justify-center hidden\">\n              3\n            </span>\n          </Button>\n          \n          {/* Profile Icon */}\n          <Button \n            variant=\"ghost\" \n            onClick={() => setShowProfileSidebar(true)}\n            className=\"flex items-center space-x-2\"\n            data-testid=\"button-profile\"\n          >\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n              <span className=\"text-sm font-medium text-primary-foreground\">\n                {getUserInitials(user?.fullName || '')}\n              </span>\n            </div>\n            <span className=\"font-medium text-foreground hidden sm:block\">{user?.fullName}</span>\n            <i className=\"fas fa-user text-sm text-muted-foreground\"></i>\n          </Button>\n          \n          {/* Navigation Menu Button */}\n          {onNavigationMenuClick && (\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={onNavigationMenuClick}\n              data-testid=\"button-navigation-menu\"\n              className=\"bg-[#fa0000]\"\n            >\n              <i className=\"fas fa-bars\"></i>\n            </Button>\n          )}\n        </div>\n      </div>\n      {/* Profile Sidebar */}\n      <ProfileSidebar \n        isOpen={showProfileSidebar} \n        onClose={() => setShowProfileSidebar(false)} \n      />\n    </header>\n  );\n}\n","size_bytes":3048},"client/src/components/modals/add-product-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AddProductModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function AddProductModal({ isOpen, onClose }: AddProductModalProps) {\n  const [formData, setFormData] = useState({\n    name: '',\n    brand: '',\n    unit: 'kg',\n    size: '',\n    imageUrl: '',\n    isWholesale: false\n  });\n  \n  const { toast } = useToast();\n\n  const createProductMutation = useMutation({\n    mutationFn: async (productData: any) => {\n      return await apiRequest('POST', '/api/retailer/catalog', productData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/retailer/catalog'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/catalog'] });\n      toast({ title: \"Product added successfully\" });\n      onClose();\n      setFormData({\n        name: '',\n        brand: '',\n        unit: 'kg',\n        size: '',\n        imageUrl: '',\n        isWholesale: false\n      });\n    },\n    onError: () => {\n      toast({ title: \"Failed to add product\", variant: \"destructive\" });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createProductMutation.mutate(formData);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Add New Product</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"productName\">Product Name</Label>\n            <Input\n              id=\"productName\"\n              value={formData.name}\n              onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n              placeholder=\"Enter product name\"\n              required\n              data-testid=\"input-product-name\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"brand\">Brand</Label>\n            <Input\n              id=\"brand\"\n              value={formData.brand}\n              onChange={(e) => setFormData(prev => ({ ...prev, brand: e.target.value }))}\n              placeholder=\"Enter brand name\"\n              data-testid=\"input-product-brand\"\n            />\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"unit\">Unit</Label>\n              <Select value={formData.unit} onValueChange={(value) => setFormData(prev => ({ ...prev, unit: value }))}>\n                <SelectTrigger data-testid=\"select-product-unit\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"kg\">kg</SelectItem>\n                  <SelectItem value=\"piece\">piece</SelectItem>\n                  <SelectItem value=\"box\">box</SelectItem>\n                  <SelectItem value=\"liter\">liter</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"size\">Size/Pack</Label>\n              <Input\n                id=\"size\"\n                value={formData.size}\n                onChange={(e) => setFormData(prev => ({ ...prev, size: e.target.value }))}\n                placeholder=\"e.g., 500g\"\n                data-testid=\"input-product-size\"\n              />\n            </div>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"imageUrl\">Product Image URL</Label>\n            <Input\n              id=\"imageUrl\"\n              value={formData.imageUrl}\n              onChange={(e) => setFormData(prev => ({ ...prev, imageUrl: e.target.value }))}\n              placeholder=\"https://example.com/image.jpg\"\n              data-testid=\"input-product-image\"\n            />\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Checkbox \n              id=\"wholesale\"\n              checked={formData.isWholesale}\n              onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isWholesale: !!checked }))}\n              data-testid=\"checkbox-wholesale\"\n            />\n            <Label htmlFor=\"wholesale\" className=\"text-sm\">Wholesale product</Label>\n          </div>\n          \n          <div className=\"flex space-x-3 pt-4\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose} className=\"flex-1\" data-testid=\"button-cancel\">\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              className=\"flex-1\" \n              disabled={createProductMutation.isPending}\n              data-testid=\"button-submit-product\"\n            >\n              {createProductMutation.isPending ? 'Adding...' : 'Add Product'}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5364},"client/src/components/modals/store-catalog-modal.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useCartStore } from \"@/store/cart\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface StoreCatalogModalProps {\n  store: any;\n  isOpen: boolean;\n  onClose: () => void;\n  onNavigateToCart?: () => void;\n}\n\nexport default function StoreCatalogModal({ store, isOpen, onClose, onNavigateToCart }: StoreCatalogModalProps) {\n  const { addToCart } = useCartStore();\n  const { toast } = useToast();\n\n  const { data: storeWithListings, isLoading } = useQuery({\n    queryKey: ['/api/stores', store?.id],\n    queryFn: async () => {\n      if (!store?.id) return null;\n      const response = await fetch(`/api/stores/${store.id}`);\n      if (!response.ok) throw new Error('Failed to fetch store details');\n      return response.json();\n    },\n    enabled: !!store?.id && isOpen\n  });\n\n  const handleAddToCart = (listing: any) => {\n    addToCart({\n      listingId: listing.id,\n      storeId: store.id,\n      name: listing.product.name,\n      brand: listing.product.brand,\n      size: listing.product.size,\n      price: parseFloat(listing.priceRetail),\n      imageUrl: listing.product.imageUrl,\n      qty: 1\n    });\n    \n    toast({ \n      title: \"Added to cart!\", \n      description: `${listing.product.name} has been added to your cart.`,\n      action: onNavigateToCart ? (\n        <Button\n          size=\"sm\"\n          onClick={onNavigateToCart}\n          className=\"ml-auto\"\n        >\n          <i className=\"fas fa-shopping-cart mr-1\"></i>\n          View Cart\n        </Button>\n      ) : undefined\n    });\n  };\n\n  if (!isOpen || !store) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"text-xl font-semibold text-foreground\">{store.name}</h3>\n              <p className=\"text-sm text-muted-foreground mt-1\">Browse products and add to cart</p>\n            </div>\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"overflow-auto max-h-[70vh] p-2\">\n          {isLoading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n              <span className=\"ml-2 text-muted-foreground\">Loading products...</span>\n            </div>\n          ) : !storeWithListings?.listings || storeWithListings.listings.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <i className=\"fas fa-box-open text-4xl mb-4 opacity-50\"></i>\n              <p>No products available in this store</p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {storeWithListings.listings.map((listing: any) => (\n                <div \n                  key={listing.id} \n                  className=\"bg-background border border-border rounded-lg p-4 hover:shadow-md transition-shadow\"\n                  data-testid={`product-card-${listing.id}`}\n                >\n                  <img \n                    src={listing.product.imageUrl || 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=200&h=160'} \n                    alt={listing.product.name}\n                    className=\"w-full h-40 object-cover rounded-md mb-3\"\n                  />\n                  <h4 className=\"font-medium text-foreground mb-1\">{listing.product.name}</h4>\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    {listing.product.brand} • {listing.product.size}\n                  </p>\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div>\n                      <div className=\"font-bold text-foreground\">₹{listing.priceRetail}</div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {listing.stockQty > 0 ? `${listing.stockQty} in stock` : 'Stock not specified'}\n                      </div>\n                    </div>\n                    <Badge \n                      variant={listing.available ? \"default\" : \"destructive\"}\n                      className=\"text-xs\"\n                    >\n                      {listing.available ? 'Available' : 'Unavailable'}\n                    </Badge>\n                  </div>\n                  <Button \n                    onClick={() => handleAddToCart(listing)}\n                    disabled={!listing.available}\n                    className=\"w-full\"\n                    data-testid={`button-add-to-cart-${listing.id}`}\n                  >\n                    {listing.available ? (\n                      <>\n                        <i className=\"fas fa-cart-plus mr-2\"></i>\n                        Add to Cart\n                      </>\n                    ) : (\n                      <>\n                        <i className=\"fas fa-ban mr-2\"></i>\n                        Out of Stock\n                      </>\n                    )}\n                  </Button>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5455},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport Header from \"@/components/layout/header\";\nimport AddProductModal from \"@/components/modals/add-product-modal\";\nimport { NavigationSidebar, NavigationItem } from \"@/components/ui/navigation-sidebar\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AdminDashboard() {\n  const [activeSection, setActiveSection] = useState('overview');\n  const [isNavigationOpen, setIsNavigationOpen] = useState(false);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [userFilter, setUserFilter] = useState('');\n  const [storeFilter, setStoreFilter] = useState('');\n  const { toast } = useToast();\n\n  // Analytics Data\n  const { data: analytics, isLoading: analyticsLoading } = useQuery({\n    queryKey: ['/api/admin/analytics'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/analytics', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        }\n      });\n      if (!response.ok) throw new Error('Failed to fetch analytics');\n      return response.json();\n    }\n  });\n\n  // Products Data\n  const { data: products = [], isLoading: productsLoading } = useQuery({\n    queryKey: ['/api/admin/catalog', searchQuery],\n    queryFn: async () => {\n      const response = await fetch(`/api/admin/catalog?search=${searchQuery}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        }\n      });\n      if (!response.ok) throw new Error('Failed to fetch products');\n      return response.json();\n    }\n  });\n\n  // Users Data\n  const { data: users = [], isLoading: usersLoading } = useQuery({\n    queryKey: ['/api/admin/users'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/users', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        }\n      });\n      if (!response.ok) throw new Error('Failed to fetch users');\n      return response.json();\n    }\n  });\n\n  // Stores Data\n  const { data: stores = [], isLoading: storesLoading } = useQuery({\n    queryKey: ['/api/admin/stores'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/stores', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        }\n      });\n      if (!response.ok) throw new Error('Failed to fetch stores');\n      return response.json();\n    }\n  });\n\n  // Orders Data\n  const { data: orders = [], isLoading: ordersLoading } = useQuery({\n    queryKey: ['/api/admin/orders'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/orders', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        }\n      });\n      if (!response.ok) throw new Error('Failed to fetch orders');\n      return response.json();\n    }\n  });\n\n  const deleteProductMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      await apiRequest('DELETE', `/api/admin/catalog/${productId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/catalog'] });\n      toast({ title: \"Product deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete product\", variant: \"destructive\" });\n    }\n  });\n\n  const handleDeleteProduct = (productId: string) => {\n    if (window.confirm('Are you sure you want to delete this product?')) {\n      deleteProductMutation.mutate(productId);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'PENDING': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';\n      case 'ACCEPTED': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';\n      case 'REJECTED': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';\n      case 'READY': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';\n      case 'COMPLETED': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200';\n    }\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case 'ADMIN': return 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200';\n      case 'RETAILER': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';\n      case 'SHOP_OWNER': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';\n      case 'DELIVERY_BOY': return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200';\n    }\n  };\n\n  const filteredUsers = users.filter((user: any) => \n    userFilter === '' || user.role === userFilter\n  );\n\n  const filteredStores = stores.filter((store: any) => \n    storeFilter === '' || \n    (storeFilter === 'open' && store.isOpen) ||\n    (storeFilter === 'closed' && !store.isOpen)\n  );\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header onNavigationMenuClick={() => setIsNavigationOpen(true)} />\n      \n      <div className=\"h-[calc(100vh-80px)]\">\n        {/* Main Content */}\n        <main className=\"flex-1 p-6 overflow-auto\">\n          {/* Overview Section */}\n          {activeSection === 'overview' && (\n            <div>\n              <div className=\"mb-6\">\n                <h2 className=\"text-3xl font-bold text-foreground mb-2\">System Overview</h2>\n                <p className=\"text-muted-foreground\">Complete administrative control of your platform</p>\n              </div>\n\n              {analyticsLoading ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n                  {[1,2,3,4].map(i => (\n                    <Card key={i}>\n                      <CardContent className=\"p-6\">\n                        <div className=\"animate-pulse\">\n                          <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                          <div className=\"h-8 bg-muted rounded\"></div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n                  <Card className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-blue-100 text-sm font-medium\">Total Users</p>\n                          <p className=\"text-3xl font-bold\">{analytics?.totals?.users || 0}</p>\n                        </div>\n                        <i className=\"fas fa-users text-2xl text-blue-200\"></i>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-gradient-to-r from-green-500 to-green-600 text-white\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-green-100 text-sm font-medium\">Active Stores</p>\n                          <p className=\"text-3xl font-bold\">{analytics?.totals?.stores || 0}</p>\n                        </div>\n                        <i className=\"fas fa-store text-2xl text-green-200\"></i>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-gradient-to-r from-purple-500 to-purple-600 text-white\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-purple-100 text-sm font-medium\">Products</p>\n                          <p className=\"text-3xl font-bold\">{analytics?.totals?.products || 0}</p>\n                        </div>\n                        <i className=\"fas fa-box text-2xl text-purple-200\"></i>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-gradient-to-r from-orange-500 to-orange-600 text-white\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-orange-100 text-sm font-medium\">Total Orders</p>\n                          <p className=\"text-3xl font-bold\">{analytics?.totals?.orders || 0}</p>\n                        </div>\n                        <i className=\"fas fa-shopping-cart text-2xl text-orange-200\"></i>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n\n              {/* Quick Stats Cards */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <i className=\"fas fa-users text-blue-500\"></i>\n                      Users by Role\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {analytics?.usersByRole?.map((role: any) => (\n                      <div key={role.role} className=\"flex justify-between items-center py-2 border-b last:border-b-0\">\n                        <div className=\"flex items-center gap-2\">\n                          <Badge className={getRoleColor(role.role)}>\n                            {role.role.replace('_', ' ')}\n                          </Badge>\n                        </div>\n                        <span className=\"font-semibold\">{role.count}</span>\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <i className=\"fas fa-chart-pie text-green-500\"></i>\n                      Orders by Status\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {analytics?.ordersByStatus?.map((status: any) => (\n                      <div key={status.status} className=\"flex justify-between items-center py-2 border-b last:border-b-0\">\n                        <div className=\"flex items-center gap-2\">\n                          <Badge className={getStatusColor(status.status)}>\n                            {status.status.replace('_', ' ')}\n                          </Badge>\n                        </div>\n                        <span className=\"font-semibold\">{status.count}</span>\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Recent Activity */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <i className=\"fas fa-clock text-purple-500\"></i>\n                    Recent Orders\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {ordersLoading ? (\n                    <div className=\"space-y-4\">\n                      {[1,2,3].map(i => (\n                        <div key={i} className=\"animate-pulse flex space-x-4\">\n                          <div className=\"h-12 w-12 bg-muted rounded\"></div>\n                          <div className=\"flex-1 space-y-2\">\n                            <div className=\"h-4 bg-muted rounded\"></div>\n                            <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {orders.slice(0, 5).map((order: any) => (\n                        <div key={order.id} className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg\">\n                          <div className=\"flex items-center space-x-4\">\n                            <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n                              <i className=\"fas fa-receipt text-primary-foreground text-sm\"></i>\n                            </div>\n                            <div>\n                              <p className=\"font-medium text-foreground\">#{order.id.slice(-8)}</p>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {order.owner?.fullName} → {order.store?.name}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <Badge className={getStatusColor(order.status)}>\n                              {order.status}\n                            </Badge>\n                            <p className=\"text-sm font-medium text-foreground mt-1\">₹{order.totalAmount}</p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          {/* User Management Section */}\n          {activeSection === 'users' && (\n            <div>\n              <div className=\"flex items-center justify-between mb-6\">\n                <div>\n                  <h2 className=\"text-2xl font-bold text-foreground\">User Management</h2>\n                  <p className=\"text-muted-foreground\">Manage all system users and their roles</p>\n                </div>\n                <div className=\"flex items-center space-x-4\">\n                  <Select value={userFilter} onValueChange={setUserFilter}>\n                    <SelectTrigger className=\"w-48\" data-testid=\"select-user-role\">\n                      <SelectValue placeholder=\"Filter by role\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"\">All Roles</SelectItem>\n                      <SelectItem value=\"ADMIN\">Admins</SelectItem>\n                      <SelectItem value=\"RETAILER\">Retailers</SelectItem>\n                      <SelectItem value=\"SHOP_OWNER\">Shop Owners</SelectItem>\n                      <SelectItem value=\"DELIVERY_BOY\">Delivery Boys</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <Card>\n                <div className=\"overflow-hidden\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-muted\">\n                      <tr>\n                        <th className=\"text-left px-6 py-3 text-sm font-medium text-muted-foreground\">User</th>\n                        <th className=\"text-left px-6 py-3 text-sm font-medium text-muted-foreground\">Role</th>\n                        <th className=\"text-left px-6 py-3 text-sm font-medium text-muted-foreground\">Phone</th>\n                        <th className=\"text-left px-6 py-3 text-sm font-medium text-muted-foreground\">Joined</th>\n                        <th className=\"text-left px-6 py-3 text-sm font-medium text-muted-foreground\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-border\">\n                      {usersLoading ? (\n                        <tr>\n                          <td colSpan={5} className=\"px-6 py-8 text-center text-muted-foreground\">\n                            <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary mx-auto mb-2\"></div>\n                            Loading users...\n                          </td>\n                        </tr>\n                      ) : filteredUsers.length === 0 ? (\n                        <tr>\n                          <td colSpan={5} className=\"px-6 py-8 text-center text-muted-foreground\">\n                            No users found for the selected filter.\n                          </td>\n                        </tr>\n                      ) : (\n                        filteredUsers.map((user: any) => (\n                          <tr key={user.id} data-testid={`row-user-${user.id}`}>\n                            <td className=\"px-6 py-4\">\n                              <div className=\"flex items-center space-x-3\">\n                                <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n                                  <span className=\"text-primary-foreground font-medium text-sm\">\n                                    {user.fullName.split(' ').map((n: string) => n[0]).join('').toUpperCase()}\n                                  </span>\n                                </div>\n                                <div>\n                                  <div className=\"font-medium text-foreground\">{user.fullName}</div>\n                                  <div className=\"text-sm text-muted-foreground\">{user.email}</div>\n                                </div>\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4\">\n                              <Badge className={getRoleColor(user.role)}>\n                                {user.role.replace('_', ' ')}\n                              </Badge>\n                            </td>\n                            <td className=\"px-6 py-4 text-foreground\">{user.phone || 'Not provided'}</td>\n                            <td className=\"px-6 py-4 text-muted-foreground\">\n                              {new Date(user.createdAt).toLocaleDateString()}\n                            </td>\n                            <td className=\"px-6 py-4\">\n                              <div className=\"flex items-center space-x-2\">\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  data-testid={`button-view-user-${user.id}`}\n                                >\n                                  <i className=\"fas fa-eye\"></i>\n                                </Button>\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  data-testid={`button-edit-user-${user.id}`}\n                                >\n                                  <i className=\"fas fa-edit\"></i>\n                                </Button>\n                              </div>\n                            </td>\n                          </tr>\n                        ))\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </Card>\n            </div>\n          )}\n\n          {/* Store Management Section */}\n          {activeSection === 'stores' && (\n            <div>\n              <div className=\"flex items-center justify-between mb-6\">\n                <div>\n                  <h2 className=\"text-2xl font-bold text-foreground\">Store Oversight</h2>\n                  <p className=\"text-muted-foreground\">Monitor and manage all retail stores</p>\n                </div>\n                <div className=\"flex items-center space-x-4\">\n                  <Select value={storeFilter} onValueChange={setStoreFilter}>\n                    <SelectTrigger className=\"w-48\" data-testid=\"select-store-status\">\n                      <SelectValue placeholder=\"Filter by status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"\">All Stores</SelectItem>\n                      <SelectItem value=\"open\">Open Stores</SelectItem>\n                      <SelectItem value=\"closed\">Closed Stores</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {storesLoading ? (\n                  [1,2,3,4,5,6].map(i => (\n                    <Card key={i}>\n                      <CardContent className=\"p-6\">\n                        <div className=\"animate-pulse space-y-4\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-12 h-12 bg-muted rounded\"></div>\n                            <div className=\"flex-1 space-y-2\">\n                              <div className=\"h-4 bg-muted rounded\"></div>\n                              <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                ) : filteredStores.length === 0 ? (\n                  <div className=\"col-span-full\">\n                    <Card>\n                      <CardContent className=\"p-8 text-center text-muted-foreground\">\n                        <i className=\"fas fa-store text-4xl mb-4 opacity-50\"></i>\n                        <p>No stores found for the selected filter.</p>\n                      </CardContent>\n                    </Card>\n                  </div>\n                ) : (\n                  filteredStores.map((store: any) => (\n                    <Card \n                      key={store.id} \n                      className=\"hover:shadow-lg transition-shadow\"\n                      data-testid={`card-store-${store.id}`}\n                    >\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-start justify-between mb-4\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center\">\n                              <i className=\"fas fa-store text-primary-foreground\"></i>\n                            </div>\n                            <div>\n                              <h3 className=\"font-semibold text-foreground\">{store.name}</h3>\n                              <p className=\"text-sm text-muted-foreground\">Store ID: {store.id.slice(-8)}</p>\n                            </div>\n                          </div>\n                          <span className={`w-3 h-3 rounded-full ${store.isOpen ? 'bg-green-500' : 'bg-red-500'}`}></span>\n                        </div>\n                        \n                        <div className=\"space-y-2 mb-4\">\n                          <div className=\"flex items-center text-sm text-muted-foreground\">\n                            <i className=\"fas fa-map-marker-alt mr-2\"></i>\n                            {store.city}, {store.pincode}\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center text-sm text-muted-foreground\">\n                              <i className=\"fas fa-star text-yellow-500 mr-1\"></i>\n                              <span>{store.rating ? parseFloat(store.rating).toFixed(1) : '4.5'}</span>\n                            </div>\n                            <Badge variant={store.isOpen ? \"default\" : \"secondary\"}>\n                              {store.isOpen ? 'Open' : 'Closed'}\n                            </Badge>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center justify-between\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            data-testid={`button-view-store-${store.id}`}\n                          >\n                            <i className=\"fas fa-eye mr-1\"></i>\n                            View Details\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            data-testid={`button-edit-store-${store.id}`}\n                          >\n                            <i className=\"fas fa-edit\"></i>\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Product Catalog Section */}\n          {activeSection === 'catalog' && (\n            <div>\n              <div className=\"flex items-center justify-between mb-6\">\n                <div>\n                  <h2 className=\"text-2xl font-bold text-foreground\">Product Catalog</h2>\n                  <p className=\"text-muted-foreground\">Manage global product catalog for all retailers</p>\n                </div>\n                <Button \n                  onClick={() => setShowAddModal(true)}\n                  data-testid=\"button-add-product\"\n                >\n                  <i className=\"fas fa-plus mr-2\"></i>\n                  Add Product\n                </Button>\n              </div>\n\n              {/* Search and Filters */}\n              <Card className=\"mb-6\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex-1\">\n                      <Input\n                        placeholder=\"Search products...\"\n                        value={searchQuery}\n                        onChange={(e) => setSearchQuery(e.target.value)}\n                        data-testid=\"input-search-products\"\n                      />\n                    </div>\n                    <Select>\n                      <SelectTrigger className=\"w-48\" data-testid=\"select-category\">\n                        <SelectValue placeholder=\"All Categories\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Categories</SelectItem>\n                        <SelectItem value=\"electronics\">Electronics</SelectItem>\n                        <SelectItem value=\"fashion\">Fashion</SelectItem>\n                        <SelectItem value=\"home\">Home & Garden</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <Button variant=\"secondary\" data-testid=\"button-filter\">\n                      <i className=\"fas fa-filter mr-2\"></i>\n                      Filter\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Product Table */}\n              <Card>\n                <div className=\"overflow-hidden\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-muted\">\n                      <tr>\n                        <th className=\"text-left px-6 py-3 text-sm font-medium text-muted-foreground\">Product</th>\n                        <th className=\"text-left px-6 py-3 text-sm font-medium text-muted-foreground\">Brand</th>\n                        <th className=\"text-left px-6 py-3 text-sm font-medium text-muted-foreground\">Unit/Size</th>\n                        <th className=\"text-left px-6 py-3 text-sm font-medium text-muted-foreground\">Type</th>\n                        <th className=\"text-left px-6 py-3 text-sm font-medium text-muted-foreground\">Created</th>\n                        <th className=\"text-left px-6 py-3 text-sm font-medium text-muted-foreground\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-border\">\n                      {productsLoading ? (\n                        <tr>\n                          <td colSpan={6} className=\"px-6 py-8 text-center text-muted-foreground\">\n                            <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary mx-auto mb-2\"></div>\n                            Loading products...\n                          </td>\n                        </tr>\n                      ) : products.length === 0 ? (\n                        <tr>\n                          <td colSpan={6} className=\"px-6 py-8 text-center text-muted-foreground\">\n                            No products found. Add your first product to get started.\n                          </td>\n                        </tr>\n                      ) : (\n                        products.map((product: any) => (\n                          <tr key={product.id} data-testid={`row-product-${product.id}`}>\n                            <td className=\"px-6 py-4\">\n                              <div className=\"flex items-center space-x-3\">\n                                <img \n                                  src={product.imageUrl || 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=80&h=80'} \n                                  alt={product.name}\n                                  className=\"w-12 h-12 rounded-md object-cover\"\n                                />\n                                <div>\n                                  <div className=\"font-medium text-foreground\">{product.name}</div>\n                                  <div className=\"text-sm text-muted-foreground\">{product.description || 'No description'}</div>\n                                </div>\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 text-foreground\">{product.brand || 'No brand'}</td>\n                            <td className=\"px-6 py-4 text-foreground\">{product.unit} / {product.size || 'Standard'}</td>\n                            <td className=\"px-6 py-4\">\n                              <Badge variant={product.isWholesale ? \"default\" : \"secondary\"}>\n                                {product.isWholesale ? 'Wholesale' : 'Retail'}\n                              </Badge>\n                            </td>\n                            <td className=\"px-6 py-4 text-muted-foreground\">\n                              {new Date(product.createdAt).toLocaleDateString()}\n                            </td>\n                            <td className=\"px-6 py-4\">\n                              <div className=\"flex items-center space-x-2\">\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  data-testid={`button-edit-product-${product.id}`}\n                                >\n                                  <i className=\"fas fa-edit\"></i>\n                                </Button>\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  onClick={() => handleDeleteProduct(product.id)}\n                                  className=\"text-destructive hover:text-destructive/80\"\n                                  data-testid={`button-delete-product-${product.id}`}\n                                >\n                                  <i className=\"fas fa-trash\"></i>\n                                </Button>\n                              </div>\n                            </td>\n                          </tr>\n                        ))\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </Card>\n            </div>\n          )}\n\n          {/* Order Monitoring Section */}\n          {activeSection === 'orders' && (\n            <div>\n              <div className=\"mb-6\">\n                <h2 className=\"text-2xl font-bold text-foreground\">Order Monitoring</h2>\n                <p className=\"text-muted-foreground\">System-wide order oversight and management</p>\n              </div>\n\n              <div className=\"space-y-4\">\n                {ordersLoading ? (\n                  [1,2,3,4,5].map(i => (\n                    <Card key={i}>\n                      <CardContent className=\"p-6\">\n                        <div className=\"animate-pulse space-y-4\">\n                          <div className=\"flex justify-between\">\n                            <div className=\"space-y-2\">\n                              <div className=\"h-4 bg-muted rounded w-32\"></div>\n                              <div className=\"h-3 bg-muted rounded w-48\"></div>\n                            </div>\n                            <div className=\"h-6 bg-muted rounded w-20\"></div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                ) : orders.length === 0 ? (\n                  <Card>\n                    <CardContent className=\"p-8 text-center text-muted-foreground\">\n                      <i className=\"fas fa-receipt text-4xl mb-4 opacity-50\"></i>\n                      <p>No orders found in the system.</p>\n                    </CardContent>\n                  </Card>\n                ) : (\n                  orders.map((order: any) => (\n                    <Card key={order.id} data-testid={`card-order-${order.id}`}>\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-start justify-between mb-4\">\n                          <div>\n                            <h4 className=\"font-semibold text-foreground\">Order #{order.id.slice(-8)}</h4>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {order.owner?.fullName} → {order.store?.name}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              Placed on {new Date(order.createdAt).toLocaleDateString()}\n                            </p>\n                          </div>\n                          <div className=\"text-right\">\n                            <Badge className={getStatusColor(order.status)} data-testid={`status-${order.id}`}>\n                              {order.status.replace('_', ' ')}\n                            </Badge>\n                            <p className=\"font-semibold text-foreground mt-1\">₹{order.totalAmount}</p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"mb-4\">\n                          <h5 className=\"font-medium text-foreground mb-2\">Items ({order.items?.length || 0})</h5>\n                          <div className=\"space-y-1\">\n                            {order.items?.slice(0, 3).map((item: any) => (\n                              <div key={item.id} className=\"flex items-center justify-between text-sm\">\n                                <span className=\"text-muted-foreground\">\n                                  {item.listing?.product?.name} x{item.qty}\n                                </span>\n                                <span className=\"text-foreground\">₹{parseFloat(item.priceAt) * item.qty}</span>\n                              </div>\n                            ))}\n                            {order.items?.length > 3 && (\n                              <p className=\"text-xs text-muted-foreground\">\n                                +{order.items.length - 3} more items\n                              </p>\n                            )}\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-2\">\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {order.deliveryType}\n                            </Badge>\n                            {order.deliveryAt && (\n                              <span className=\"text-xs text-muted-foreground\">\n                                Delivery: {new Date(order.deliveryAt).toLocaleDateString()}\n                              </span>\n                            )}\n                          </div>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            data-testid={`button-view-order-${order.id}`}\n                          >\n                            <i className=\"fas fa-eye mr-1\"></i>\n                            View Details\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Analytics Section */}\n          {activeSection === 'analytics' && (\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground mb-6\">Advanced Analytics</h2>\n              \n              <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n                <TabsList>\n                  <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n                  <TabsTrigger value=\"users\">User Analytics</TabsTrigger>\n                  <TabsTrigger value=\"orders\">Order Analytics</TabsTrigger>\n                  <TabsTrigger value=\"performance\">Performance</TabsTrigger>\n                </TabsList>\n                \n                <TabsContent value=\"overview\" className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                    <Card>\n                      <CardContent className=\"p-6 text-center\">\n                        <div className=\"text-2xl font-bold text-blue-600\">{analytics?.totals?.users || 0}</div>\n                        <div className=\"text-sm text-muted-foreground\">Total Users</div>\n                      </CardContent>\n                    </Card>\n                    <Card>\n                      <CardContent className=\"p-6 text-center\">\n                        <div className=\"text-2xl font-bold text-green-600\">{analytics?.totals?.stores || 0}</div>\n                        <div className=\"text-sm text-muted-foreground\">Active Stores</div>\n                      </CardContent>\n                    </Card>\n                    <Card>\n                      <CardContent className=\"p-6 text-center\">\n                        <div className=\"text-2xl font-bold text-purple-600\">{analytics?.totals?.products || 0}</div>\n                        <div className=\"text-sm text-muted-foreground\">Products</div>\n                      </CardContent>\n                    </Card>\n                    <Card>\n                      <CardContent className=\"p-6 text-center\">\n                        <div className=\"text-2xl font-bold text-orange-600\">{analytics?.totals?.orders || 0}</div>\n                        <div className=\"text-sm text-muted-foreground\">Total Orders</div>\n                      </CardContent>\n                    </Card>\n                  </div>\n                </TabsContent>\n                \n                <TabsContent value=\"users\">\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <p className=\"text-muted-foreground\">Detailed user analytics and insights coming soon...</p>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n                \n                <TabsContent value=\"orders\">\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <p className=\"text-muted-foreground\">Order trends and analytics coming soon...</p>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n                \n                <TabsContent value=\"performance\">\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <p className=\"text-muted-foreground\">System performance metrics coming soon...</p>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              </Tabs>\n            </div>\n          )}\n        </main>\n      </div>\n\n      <AddProductModal \n        isOpen={showAddModal} \n        onClose={() => setShowAddModal(false)} \n      />\n      \n      {/* Navigation Sidebar */}\n      <NavigationSidebar\n        isOpen={isNavigationOpen}\n        onClose={() => setIsNavigationOpen(false)}\n        title=\"Navigation\"\n      >\n        <NavigationItem\n          onClick={() => {\n            setActiveSection('overview');\n            setIsNavigationOpen(false);\n          }}\n          active={activeSection === 'overview'}\n          icon=\"fas fa-tachometer-alt\"\n          label=\"Overview\"\n          testId=\"button-nav-overview-navigation\"\n        />\n        <NavigationItem\n          onClick={() => {\n            setActiveSection('users');\n            setIsNavigationOpen(false);\n          }}\n          active={activeSection === 'users'}\n          icon=\"fas fa-users\"\n          label=\"User Management\"\n          testId=\"button-nav-users-navigation\"\n        />\n        <NavigationItem\n          onClick={() => {\n            setActiveSection('stores');\n            setIsNavigationOpen(false);\n          }}\n          active={activeSection === 'stores'}\n          icon=\"fas fa-store\"\n          label=\"Store Oversight\"\n          testId=\"button-nav-stores-navigation\"\n        />\n        <NavigationItem\n          onClick={() => {\n            setActiveSection('catalog');\n            setIsNavigationOpen(false);\n          }}\n          active={activeSection === 'catalog'}\n          icon=\"fas fa-boxes\"\n          label=\"Product Catalog\"\n          testId=\"button-nav-catalog-navigation\"\n        />\n        <NavigationItem\n          onClick={() => {\n            setActiveSection('orders');\n            setIsNavigationOpen(false);\n          }}\n          active={activeSection === 'orders'}\n          icon=\"fas fa-receipt\"\n          label=\"Order Monitoring\"\n          testId=\"button-nav-orders-navigation\"\n        />\n        <NavigationItem\n          onClick={() => {\n            setActiveSection('analytics');\n            setIsNavigationOpen(false);\n          }}\n          active={activeSection === 'analytics'}\n          icon=\"fas fa-chart-line\"\n          label=\"Analytics\"\n          testId=\"button-nav-analytics-navigation\"\n        />\n      </NavigationSidebar>\n    </div>\n  );\n}","size_bytes":42946},"client/src/pages/retailer/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport Header from \"@/components/layout/header\";\nimport EnhancedKhatabook from \"@/components/enhanced-khatabook\";\nimport AddFromCatalogModal from \"@/components/modals/add-from-catalog-modal\";\nimport AddManualProductModal from \"@/components/modals/add-manual-product-modal\";\nimport { NavigationSidebar, NavigationItem } from \"@/components/ui/navigation-sidebar\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function RetailerDashboard() {\n  const [activeSection, setActiveSection] = useState('orders');\n  const [isNavigationOpen, setIsNavigationOpen] = useState(false);\n  const [newDeliveryBoy, setNewDeliveryBoy] = useState({ name: '', phone: '', address: '' });\n  const [editingDeliveryBoy, setEditingDeliveryBoy] = useState<any>(null);\n  const [paymentModal, setPaymentModal] = useState<{ isOpen: boolean; order: any }>({ isOpen: false, order: null });\n  const [paymentAmount, setPaymentAmount] = useState('');\n  const [paymentNote, setPaymentNote] = useState('');\n  const [selectedOrderForDelivery, setSelectedOrderForDelivery] = useState<any>(null);\n  const [isSelectingDeliveryBoy, setIsSelectingDeliveryBoy] = useState(false);\n  const [deliveryAssignmentStep, setDeliveryAssignmentStep] = useState<'own' | 'find'>('own');\n  const [recentlyCreatedDeliveryBoy, setRecentlyCreatedDeliveryBoy] = useState<any>(null);\n  const [showManualModal, setShowManualModal] = useState(false);\n  const [showCatalogModal, setShowCatalogModal] = useState(false);\n  const [deliveryRequestForm, setDeliveryRequestForm] = useState({ description: '', pickupAddress: '', dropoffAddress: '', estimatedReward: '' });\n  const [editingStore, setEditingStore] = useState(false);\n  const [storeFormData, setStoreFormData] = useState({\n    name: '',\n    address: '',\n    city: '',\n    pincode: '',\n    phone: '',\n    description: ''\n  });\n  const [editingListing, setEditingListing] = useState<any>(null);\n  const [editListingForm, setEditListingForm] = useState({\n    priceRetail: '',\n    priceWholesale: '',\n    stockQty: '',\n    available: true\n  });\n  const [deliveryBoySearchForm, setDeliveryBoySearchForm] = useState({\n    deliveryBoyId: ''\n  });\n  const [searchResults, setSearchResults] = useState<any>(null);\n  const [isSearching, setIsSearching] = useState(false);\n  const [deliveryBoyAssignmentModal, setDeliveryBoyAssignmentModal] = useState<{ isOpen: boolean; order: any }>({ isOpen: false, order: null });\n  const [selectedDeliveryBoyId, setSelectedDeliveryBoyId] = useState('');\n  const { toast } = useToast();\n\n  const { data: store } = useQuery({\n    queryKey: ['/api/retailer/store/me'],\n    queryFn: async () => {\n      const response = await fetch('/api/retailer/store/me', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        }\n      });\n      if (!response.ok) throw new Error('Failed to fetch store');\n      return response.json();\n    }\n  });\n\n  const { data: listings = [] } = useQuery({\n    queryKey: ['/api/retailer/listings'],\n    queryFn: async () => {\n      const response = await fetch('/api/retailer/listings', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        }\n      });\n      if (!response.ok) throw new Error('Failed to fetch listings');\n      return response.json();\n    }\n  });\n\n  const { data: orders = [] } = useQuery({\n    queryKey: ['/api/retailer/orders'],\n    queryFn: async () => {\n      const response = await fetch('/api/retailer/orders', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        }\n      });\n      if (!response.ok) throw new Error('Failed to fetch orders');\n      return response.json();\n    }\n  });\n\n  const { data: ledgerSummary } = useQuery({\n    queryKey: ['/api/khatabook/summary'],\n    queryFn: async () => {\n      const response = await fetch('/api/khatabook/summary', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        }\n      });\n      if (!response.ok) throw new Error('Failed to fetch ledger summary');\n      return response.json();\n    }\n  });\n\n  const { data: ledgerEntries } = useQuery({\n    queryKey: ['/api/khatabook'],\n    queryFn: async () => {\n      const response = await fetch('/api/khatabook', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        }\n      });\n      if (!response.ok) throw new Error('Failed to fetch ledger entries');\n      return response.json();\n    }\n  });\n\n  const { data: deliveryBoys = [] } = useQuery({\n    queryKey: ['/api/retailer/delivery-boys'],\n    queryFn: async () => {\n      const response = await fetch('/api/retailer/delivery-boys', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        }\n      });\n      if (!response.ok) throw new Error('Failed to fetch delivery boys');\n      return response.json();\n    }\n  });\n\n  const { data: deliveryRequests = [] } = useQuery({\n    queryKey: ['/api/retailer/delivery-requests'],\n    queryFn: async () => {\n      const response = await fetch('/api/retailer/delivery-requests', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        }\n      });\n      if (!response.ok) throw new Error('Failed to fetch delivery requests');\n      return response.json();\n    }\n  });\n\n  const acceptOrderMutation = useMutation({\n    mutationFn: async ({ orderId, deliveryAt }: { orderId: string; deliveryAt?: string }) => {\n      await apiRequest('POST', `/api/orders/${orderId}/accept`, { deliveryAt });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/retailer/orders'] });\n      toast({ title: \"Order accepted successfully\" });\n    }\n  });\n\n  const rejectOrderMutation = useMutation({\n    mutationFn: async ({ orderId, reason }: { orderId: string; reason: string }) => {\n      await apiRequest('POST', `/api/orders/${orderId}/reject`, { reason });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/retailer/orders'] });\n      toast({ title: \"Order rejected\" });\n    }\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ orderId, status }: { orderId: string; status: string }) => {\n      await apiRequest('POST', `/api/orders/${orderId}/status`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/retailer/orders'] });\n      toast({ title: \"Order status updated\" });\n    }\n  });\n\n  const confirmPaymentMutation = useMutation({\n    mutationFn: async ({ orderId, amountReceived, note }: { orderId: string; amountReceived?: string; note?: string }) => {\n      await apiRequest('POST', `/api/orders/${orderId}/payment-received`, { amountReceived, note });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/retailer/orders'] });\n      setPaymentModal({ isOpen: false, order: null });\n      setPaymentAmount('');\n      setPaymentNote('');\n      toast({ \n        title: \"✅ Payment Confirmed\", \n        description: \"Shop owner has been notified of payment receipt\" \n      });\n    }\n  });\n\n  const assignDeliveryBoyMutation = useMutation({\n    mutationFn: async ({ orderId, deliveryBoyId }: { orderId: string; deliveryBoyId: string }) => {\n      return apiRequest('POST', `/api/orders/${orderId}/assign-delivery-boy`, { deliveryBoyId });\n    },\n    onSuccess: () => {\n      toast({ title: \"Delivery boy assigned successfully\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/retailer/orders'] });\n      setDeliveryBoyAssignmentModal({ isOpen: false, order: null });\n      setSelectedDeliveryBoyId('');\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Assignment failed\", \n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handlePaymentSubmit = (order: any) => {\n    const totalAmount = parseFloat(order.totalAmount);\n    const amountReceived = paymentAmount ? parseFloat(paymentAmount) : totalAmount;\n    \n    if (amountReceived <= 0) {\n      toast({ title: \"Please enter a valid amount\", variant: \"destructive\" });\n      return;\n    }\n    \n    if (amountReceived > totalAmount) {\n      toast({ title: \"Amount cannot exceed order total\", variant: \"destructive\" });\n      return;\n    }\n    \n    confirmPaymentMutation.mutate({ \n      orderId: order.id, \n      amountReceived: amountReceived.toString(), \n      note: paymentNote \n    });\n  };\n\n  const createDeliveryBoyMutation = useMutation({\n    mutationFn: async (data: { name: string; phone: string; address?: string }) => {\n      const response = await apiRequest('POST', '/api/retailer/delivery-boys', data);\n      return response;\n    },\n    onSuccess: (createdDeliveryBoy) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/retailer/delivery-boys'] });\n      toast({ title: \"Delivery boy added successfully\" });\n      setNewDeliveryBoy({ name: '', phone: '', address: '' });\n      setRecentlyCreatedDeliveryBoy(createdDeliveryBoy);\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to add delivery boy\", \n        description: error.response?.data?.message || \"An error occurred\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const updateDeliveryBoyMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      await apiRequest('PUT', `/api/retailer/delivery-boys/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/retailer/delivery-boys'] });\n      toast({ title: \"Delivery boy updated successfully\" });\n    }\n  });\n\n  const updateStoreMutation = useMutation({\n    mutationFn: async (storeData: any) => {\n      await apiRequest('POST', '/api/retailer/store', storeData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/retailer/store/me'] });\n      toast({ title: \"Store information updated successfully\" });\n      setEditingStore(false);\n    },\n    onError: () => {\n      toast({ title: \"Failed to update store information\", variant: \"destructive\" });\n    }\n  });\n\n\n  const deleteDeliveryBoyMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest('DELETE', `/api/retailer/delivery-boys/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/retailer/delivery-boys'] });\n      toast({ title: \"Delivery boy removed successfully\" });\n    }\n  });\n\n  const addDeliveryBoyToRetailerMutation = useMutation({\n    mutationFn: async ({ deliveryBoyId, notes }: { deliveryBoyId: string; notes?: string }) => {\n      await apiRequest('POST', '/api/retailer/delivery-boys', { deliveryBoyId, notes });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/retailer/delivery-boys'] });\n      setSearchResults(null); // Clear search results after adding\n      setDeliveryBoySearchForm({ deliveryBoyId: '' }); // Clear search form\n      toast({ title: \"Delivery boy added to your team successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to add delivery boy\", \n        description: error.response?.data?.message || \"An error occurred\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const removeDeliveryBoyFromRetailerMutation = useMutation({\n    mutationFn: async (deliveryBoyId: string) => {\n      await apiRequest('DELETE', `/api/retailer/delivery-boys/${deliveryBoyId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/retailer/delivery-boys'] });\n      setSearchResults(null); // Clear search results after removing\n      setDeliveryBoySearchForm({ deliveryBoyId: '' }); // Clear search form\n      toast({ title: \"Delivery boy removed from your team successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to remove delivery boy\", \n        description: error.response?.data?.message || \"An error occurred\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const createDeliveryRequestMutation = useMutation({\n    mutationFn: async (data: { description: string; pickupAddress: string; dropoffAddress: string; estimatedReward?: string }) => {\n      await apiRequest('POST', '/api/retailer/delivery-requests', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/retailer/delivery-requests'] });\n      toast({ title: \"Delivery request posted successfully\" });\n      setDeliveryRequestForm({ description: '', pickupAddress: '', dropoffAddress: '', estimatedReward: '' });\n    },\n    onError: () => {\n      toast({ title: \"Failed to post delivery request\", variant: \"destructive\" });\n    }\n  });\n\n  const updateListingMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      await apiRequest('PUT', `/api/retailer/listings/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/retailer/listings'] });\n      toast({ title: \"Product updated successfully\" });\n      setEditingListing(null);\n      setEditListingForm({\n        priceRetail: '',\n        priceWholesale: '',\n        stockQty: '',\n        available: true\n      });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update product\", variant: \"destructive\" });\n    }\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'PENDING': return 'bg-yellow-100 text-yellow-800';\n      case 'ACCEPTED': return 'bg-green-100 text-green-800';\n      case 'REJECTED': return 'bg-red-100 text-red-800';\n      case 'READY': return 'bg-blue-100 text-blue-800';\n      case 'COMPLETED': return 'bg-green-100 text-green-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const pendingOrders = orders.filter((order: any) => order.status === 'PENDING');\n  const ordersNeedingDelivery = orders.filter((order: any) => \n    (order.status === 'ACCEPTED' || order.status === 'READY') && !order.assignedDeliveryBoyId\n  );\n\n  const handleEditListing = (listing: any) => {\n    setEditingListing(listing);\n    setEditListingForm({\n      priceRetail: listing.priceRetail.toString(),\n      priceWholesale: listing.priceWholesale?.toString() || '',\n      stockQty: listing.stockQty?.toString() || '',\n      available: listing.available\n    });\n  };\n\n  const handleSaveListing = () => {\n    if (!editingListing) return;\n    \n    const updateData = {\n      priceRetail: parseFloat(editListingForm.priceRetail),\n      priceWholesale: editListingForm.priceWholesale ? parseFloat(editListingForm.priceWholesale) : null,\n      stockQty: parseInt(editListingForm.stockQty),\n      available: editListingForm.available\n    };\n\n    updateListingMutation.mutate({ id: editingListing.id, data: updateData });\n  };\n\n  const toggleListingAvailability = (listing: any) => {\n    updateListingMutation.mutate({ \n      id: listing.id, \n      data: { available: !listing.available }\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header onNavigationMenuClick={() => setIsNavigationOpen(true)} />\n      \n      <div className=\"h-[calc(100vh-80px)]\">\n        {/* Main Content */}\n        <main className=\"flex-1 p-6 overflow-auto\">\n          {/* Store Profile Section */}\n          {activeSection === 'store' && (\n            <div>\n              <div className=\"mb-6\">\n                <h2 className=\"text-2xl font-bold text-foreground mb-2\">Store Profile</h2>\n                <p className=\"text-muted-foreground\">Manage your store information and settings</p>\n              </div>\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                {/* Store Info Card */}\n                <div className=\"lg:col-span-2\">\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <h3 className=\"text-lg font-semibold text-foreground\">Store Information</h3>\n                        <div className=\"flex space-x-2\">\n                          {editingStore && (\n                            <Button \n                              variant=\"outline\" \n                              onClick={() => {\n                                setEditingStore(false);\n                                setStoreFormData({\n                                  name: '',\n                                  address: '',\n                                  city: '',\n                                  pincode: '',\n                                  phone: '',\n                                  description: ''\n                                });\n                              }}\n                              data-testid=\"button-cancel-store-edit\"\n                            >\n                              <i className=\"fas fa-times mr-2\"></i>\n                              Cancel\n                            </Button>\n                          )}\n                          <Button \n                            variant=\"outline\" \n                            onClick={() => {\n                              if (editingStore) {\n                                // Save store changes\n                                updateStoreMutation.mutate(storeFormData);\n                              } else {\n                                // Start editing - populate form with current store data\n                                setStoreFormData({\n                                  name: store?.name || '',\n                                  address: store?.address || '',\n                                  city: store?.city || '',\n                                  pincode: store?.pincode || '',\n                                  phone: store?.phone || '',\n                                  description: store?.description || ''\n                                });\n                                setEditingStore(true);\n                              }\n                            }}\n                            disabled={updateStoreMutation.isPending}\n                            data-testid=\"button-edit-store\"\n                          >\n                            {updateStoreMutation.isPending ? (\n                              <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                            ) : editingStore ? (\n                              <i className=\"fas fa-save mr-2\"></i>\n                            ) : (\n                              <i className=\"fas fa-edit mr-2\"></i>\n                            )}\n                            {editingStore ? 'Save' : 'Edit'}\n                          </Button>\n                        </div>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <Label className=\"text-sm font-medium text-foreground\">Store Name</Label>\n                          <Input \n                            value={editingStore ? storeFormData.name : (store?.name || '')} \n                            readOnly={!editingStore}\n                            onChange={(e) => editingStore && setStoreFormData(prev => ({ ...prev, name: e.target.value }))}\n                            className=\"mt-2\"\n                            placeholder=\"Enter store name\"\n                            data-testid=\"input-store-name\"\n                          />\n                        </div>\n                        <div>\n                          <Label className=\"text-sm font-medium text-foreground\">City</Label>\n                          <Input \n                            value={editingStore ? storeFormData.city : (store?.city || '')} \n                            readOnly={!editingStore}\n                            onChange={(e) => editingStore && setStoreFormData(prev => ({ ...prev, city: e.target.value }))}\n                            className=\"mt-2\"\n                            placeholder=\"Enter city\"\n                            data-testid=\"input-store-city\"\n                          />\n                        </div>\n                        <div>\n                          <Label className=\"text-sm font-medium text-foreground\">Pincode</Label>\n                          <Input \n                            value={editingStore ? storeFormData.pincode : (store?.pincode || '')} \n                            readOnly={!editingStore}\n                            onChange={(e) => editingStore && setStoreFormData(prev => ({ ...prev, pincode: e.target.value }))}\n                            className=\"mt-2\"\n                            placeholder=\"Enter pincode\"\n                            data-testid=\"input-store-pincode\"\n                          />\n                        </div>\n                        <div>\n                          <Label className=\"text-sm font-medium text-foreground\">Phone</Label>\n                          <Input \n                            value={editingStore ? storeFormData.phone : (store?.phone || '')} \n                            readOnly={!editingStore}\n                            onChange={(e) => editingStore && setStoreFormData(prev => ({ ...prev, phone: e.target.value }))}\n                            className=\"mt-2\"\n                            placeholder=\"Enter phone number\"\n                            data-testid=\"input-store-phone\"\n                          />\n                        </div>\n                        <div className=\"md:col-span-2\">\n                          <Label className=\"text-sm font-medium text-foreground\">Address</Label>\n                          <Textarea \n                            value={editingStore ? storeFormData.address : (store?.address || '')} \n                            readOnly={!editingStore}\n                            onChange={(e) => editingStore && setStoreFormData(prev => ({ ...prev, address: e.target.value }))}\n                            rows={2} \n                            className=\"mt-2\"\n                            placeholder=\"Enter complete address\"\n                            data-testid=\"textarea-store-address\"\n                          />\n                        </div>\n                        {editingStore && (\n                          <div className=\"md:col-span-2\">\n                            <Label className=\"text-sm font-medium text-foreground\">Description</Label>\n                            <Textarea \n                              value={storeFormData.description}\n                              onChange={(e) => setStoreFormData(prev => ({ ...prev, description: e.target.value }))}\n                              rows={2}\n                              className=\"mt-2\"\n                              placeholder=\"Enter store description (optional)\"\n                              data-testid=\"textarea-store-description\"\n                            />\n                          </div>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Store Stats */}\n                <div className=\"space-y-4\">\n                  <Card>\n                    <CardContent className=\"p-6 text-center\">\n                      <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-store-rating\">\n                        {store?.rating || '0.0'}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Store Rating</div>\n                      <div className=\"flex justify-center mt-2\">\n                        <div className=\"flex text-yellow-400\">\n                          {[1,2,3,4,5].map(star => (\n                            <i key={star} className=\"fas fa-star text-xs\"></i>\n                          ))}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardContent className=\"p-6 text-center\">\n                      <div className=\"text-2xl font-bold text-foreground\" data-testid=\"text-active-products\">\n                        {listings.length}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Active Products</div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardContent className=\"p-6 text-center\">\n                      <div className=\"text-2xl font-bold text-foreground\" data-testid=\"text-pending-orders\">\n                        {pendingOrders.length}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Pending Orders</div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Inventory Section */}\n          {activeSection === 'listings' && (\n            <div>\n              <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6\">\n                <div>\n                  <h2 className=\"text-xl sm:text-2xl font-bold text-foreground\">Inventory Management</h2>\n                  <p className=\"text-sm sm:text-base text-muted-foreground\">Add products manually or from global catalog</p>\n                </div>\n                <div className=\"flex flex-col sm:flex-row gap-2 sm:gap-3\">\n                  <Button \n                    variant=\"outline\"\n                    onClick={() => setShowManualModal(true)}\n                    data-testid=\"button-add-manual-product\"\n                    className=\"w-full sm:w-auto\"\n                  >\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Add Manually\n                  </Button>\n                  <Button \n                    onClick={() => setShowCatalogModal(true)}\n                    data-testid=\"button-add-from-catalog\"\n                    className=\"w-full sm:w-auto\"\n                  >\n                    <i className=\"fas fa-search mr-2\"></i>\n                    Add from Catalog\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {listings.map((listing: any) => (\n                  <Card key={listing.id} className=\"hover:shadow-md transition-shadow\" data-testid={`card-listing-${listing.id}`}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <img \n                          src={listing.product.imageUrl || 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=80&h=80'} \n                          alt={listing.product.name}\n                          className=\"w-16 h-16 rounded-md object-cover\"\n                        />\n                        <div className=\"flex items-center space-x-2\">\n                          <span className={`w-3 h-3 rounded-full ${listing.available ? 'bg-green-500' : 'bg-red-500'}`}></span>\n                          <span className=\"text-xs text-muted-foreground\">\n                            {listing.available ? 'Available' : 'Unavailable'}\n                          </span>\n                        </div>\n                      </div>\n                      <h4 className=\"font-medium text-foreground mb-1\">{listing.product.name}</h4>\n                      <p className=\"text-sm text-muted-foreground mb-3\">\n                        {listing.product.brand} • {listing.product.size}\n                      </p>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-muted-foreground\">Retail Price:</span>\n                          <span className=\"font-medium text-foreground\">₹{listing.priceRetail}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-muted-foreground\">Stock:</span>\n                          <span className={`font-medium ${listing.stockQty > 0 ? 'text-foreground' : 'text-destructive'}`}>\n                            {listing.stockQty || 0} units\n                          </span>\n                        </div>\n                      </div>\n                      <div className=\"mt-4 flex space-x-2\">\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\" \n                          className=\"flex-1\" \n                          onClick={() => handleEditListing(listing)}\n                          data-testid={`button-edit-listing-${listing.id}`}\n                        >\n                          <i className=\"fas fa-edit mr-1\"></i>\n                          Edit\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => toggleListingAvailability(listing)}\n                          className={listing.available ? \"text-orange-600 border-orange-600 hover:bg-orange-50\" : \"text-green-600 border-green-600 hover:bg-green-50\"}\n                          data-testid={`button-toggle-listing-${listing.id}`}\n                        >\n                          <i className={`fas ${listing.available ? 'fa-pause' : 'fa-play'}`}></i>\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n\n              {/* Edit Listing Modal */}\n              <Dialog open={!!editingListing} onOpenChange={(open) => !open && setEditingListing(null)}>\n                <DialogContent className=\"sm:max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Edit Product Details</DialogTitle>\n                  </DialogHeader>\n                  \n                  {editingListing && (\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center gap-3 p-3 bg-muted rounded-lg\">\n                        <img \n                          src={editingListing.product.imageUrl || 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=60&h=60'} \n                          alt={editingListing.product.name}\n                          className=\"w-12 h-12 rounded object-cover\"\n                        />\n                        <div>\n                          <h4 className=\"font-medium\">{editingListing.product.name}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{editingListing.product.brand} • {editingListing.product.size}</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-3\">\n                        <div>\n                          <Label htmlFor=\"editPriceRetail\">Retail Price (₹)</Label>\n                          <Input\n                            id=\"editPriceRetail\"\n                            type=\"number\"\n                            step=\"0.01\"\n                            value={editListingForm.priceRetail}\n                            onChange={(e) => setEditListingForm(prev => ({ ...prev, priceRetail: e.target.value }))}\n                            className=\"mt-1\"\n                          />\n                        </div>\n                        \n                        <div>\n                          <Label htmlFor=\"editStockQty\">Stock Quantity</Label>\n                          <Input\n                            id=\"editStockQty\"\n                            type=\"number\"\n                            value={editListingForm.stockQty}\n                            onChange={(e) => setEditListingForm(prev => ({ ...prev, stockQty: e.target.value }))}\n                            className=\"mt-1\"\n                          />\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"editPriceWholesale\">Wholesale Price (₹) - Optional</Label>\n                        <Input\n                          id=\"editPriceWholesale\"\n                          type=\"number\"\n                          step=\"0.01\"\n                          value={editListingForm.priceWholesale}\n                          onChange={(e) => setEditListingForm(prev => ({ ...prev, priceWholesale: e.target.value }))}\n                          className=\"mt-1\"\n                          placeholder=\"Leave empty if not applicable\"\n                        />\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"checkbox\"\n                          id=\"editAvailable\"\n                          checked={editListingForm.available}\n                          onChange={(e) => setEditListingForm(prev => ({ ...prev, available: e.target.checked }))}\n                          className=\"rounded\"\n                        />\n                        <Label htmlFor=\"editAvailable\">Available for sale</Label>\n                      </div>\n                      \n                      <div className=\"flex space-x-3 pt-4\">\n                        <Button \n                          variant=\"outline\" \n                          onClick={() => setEditingListing(null)} \n                          className=\"flex-1\"\n                        >\n                          Cancel\n                        </Button>\n                        <Button \n                          onClick={handleSaveListing} \n                          className=\"flex-1\"\n                          disabled={updateListingMutation.isPending}\n                        >\n                          {updateListingMutation.isPending ? (\n                            <>\n                              <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                              Updating...\n                            </>\n                          ) : (\n                            <>\n                              <i className=\"fas fa-save mr-2\"></i>\n                              Save Changes\n                            </>\n                          )}\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n                </DialogContent>\n              </Dialog>\n            </div>\n          )}\n\n          {/* Orders Section */}\n          {activeSection === 'orders' && (\n            <div>\n              <div className=\"mb-6\">\n                <h2 className=\"text-2xl font-bold text-foreground mb-2\">Order Management</h2>\n                <p className=\"text-muted-foreground\">Review and process incoming orders</p>\n              </div>\n\n              <div className=\"space-y-4\">\n                {orders.map((order: any) => (\n                  <Card key={order.id} data-testid={`card-order-${order.id}`}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div>\n                          <h4 className=\"font-semibold text-foreground\">{order.owner.fullName}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{order.store?.city || order.store?.address || 'Location not specified'}</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {new Date(order.createdAt).toLocaleDateString()}\n                          </p>\n                        </div>\n                        <Badge className={getStatusColor(order.status)} data-testid={`status-${order.id}`}>\n                          {order.status.replace('_', ' ')}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"space-y-3 mb-4\">\n                        {order.items.map((item: any) => (\n                          <div key={item.id} className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-3\">\n                              <img \n                                src={item.listing.product.imageUrl || 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=40&h=40'} \n                                alt={item.listing.product.name}\n                                className=\"w-10 h-10 rounded object-cover\"\n                              />\n                              <div>\n                                <div className=\"font-medium text-foreground\">{item.listing.product.name}</div>\n                                <div className=\"text-sm text-muted-foreground\">{item.listing.product.size}</div>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"font-medium text-foreground\">Qty: {item.qty}</div>\n                              <div className=\"text-sm text-muted-foreground\">₹{parseFloat(item.priceAt) * item.qty}</div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between pt-4 border-t border-border\">\n                        <div>\n                          <div className=\"font-semibold text-foreground\">Total: ₹{order.totalAmount}</div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {order.deliveryType === 'DELIVERY' ? 'Delivery requested' : 'Pickup requested'}\n                          </div>\n                          {order.paymentReceived && (\n                            <div className=\"flex items-center text-green-600 font-medium mt-2\">\n                              <i className=\"fas fa-check-circle mr-2\"></i>\n                              Payment Received ₹{order.amountReceived || order.totalAmount}\n                            </div>\n                          )}\n                        </div>\n                        <div className=\"flex space-x-2\">\n                          {order.status === 'PENDING' && (\n                            <>\n                              <Button \n                                variant=\"outline\" \n                                onClick={() => rejectOrderMutation.mutate({ orderId: order.id, reason: 'Unable to fulfill' })}\n                                className=\"text-destructive border-destructive hover:bg-destructive/10\"\n                                data-testid={`button-reject-${order.id}`}\n                              >\n                                Reject\n                              </Button>\n                              <Button \n                                onClick={() => acceptOrderMutation.mutate({ orderId: order.id })}\n                                data-testid={`button-accept-${order.id}`}\n                              >\n                                Accept\n                              </Button>\n                            </>\n                          )}\n                          {order.status === 'ACCEPTED' && (\n                            <>\n                              <Button \n                                onClick={() => updateStatusMutation.mutate({ orderId: order.id, status: 'READY' })}\n                                data-testid={`button-ready-${order.id}`}\n                              >\n                                Mark Ready\n                              </Button>\n                              {order.deliveryType === 'DELIVERY' && (\n                                <Button \n                                  variant=\"outline\"\n                                  onClick={() => setDeliveryBoyAssignmentModal({ isOpen: true, order })}\n                                  data-testid={`button-assign-delivery-${order.id}`}\n                                  className=\"bg-blue-50 border-blue-200 text-blue-700 hover:bg-blue-100\"\n                                >\n                                  <i className=\"fas fa-motorcycle mr-2\"></i>\n                                  {order.assignedDeliveryBoy ? 'Change Delivery Boy' : 'Assign Delivery Boy'}\n                                </Button>\n                              )}\n                            </>\n                          )}\n                          {order.status === 'READY' && (\n                            <>\n                              <Button \n                                onClick={() => updateStatusMutation.mutate({ orderId: order.id, status: 'OUT_FOR_DELIVERY' })}\n                                data-testid={`button-out-for-delivery-${order.id}`}\n                              >\n                                Out for Delivery\n                              </Button>\n                              {order.deliveryType === 'DELIVERY' && (\n                                <Button \n                                  variant=\"outline\"\n                                  onClick={() => setDeliveryBoyAssignmentModal({ isOpen: true, order })}\n                                  data-testid={`button-assign-delivery-${order.id}`}\n                                  className=\"bg-blue-50 border-blue-200 text-blue-700 hover:bg-blue-100\"\n                                >\n                                  <i className=\"fas fa-motorcycle mr-2\"></i>\n                                  {order.assignedDeliveryBoy ? 'Change Delivery Boy' : 'Assign Delivery Boy'}\n                                </Button>\n                              )}\n                            </>\n                          )}\n                          {order.status === 'OUT_FOR_DELIVERY' && (\n                            <>\n                              <Button \n                                onClick={() => updateStatusMutation.mutate({ orderId: order.id, status: 'COMPLETED' })}\n                                data-testid={`button-complete-${order.id}`}\n                              >\n                                Mark Delivered\n                              </Button>\n                              {!order.paymentReceived && order.deliveryType === 'DELIVERY' && (\n                                <Button \n                                  variant=\"outline\"\n                                  onClick={() => {\n                                    setPaymentModal({ isOpen: true, order });\n                                    setPaymentAmount(order.totalAmount);\n                                  }}\n                                  data-testid={`button-confirm-payment-${order.id}`}\n                                  className=\"bg-green-50 border-green-200 text-green-700 hover:bg-green-100\"\n                                >\n                                  <i className=\"fas fa-money-bill mr-2\"></i>\n                                  Record Payment\n                                </Button>\n                              )}\n                            </>\n                          )}\n                          {order.status === 'COMPLETED' && !order.paymentReceived && order.deliveryType === 'DELIVERY' && (\n                            <Button \n                              variant=\"outline\"\n                              onClick={() => {\n                                setPaymentModal({ isOpen: true, order });\n                                setPaymentAmount(order.totalAmount);\n                              }}\n                              data-testid={`button-confirm-payment-${order.id}`}\n                              className=\"bg-green-50 border-green-200 text-green-700 hover:bg-green-100\"\n                            >\n                              <i className=\"fas fa-money-bill mr-2\"></i>\n                              Record COD Payment\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n                \n                {orders.length === 0 && (\n                  <Card>\n                    <CardContent className=\"p-6 text-center text-muted-foreground\">\n                      No orders yet. Orders will appear here when customers place them.\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Enhanced Khatabook Section */}\n          {activeSection === 'khatabook' && (\n            <EnhancedKhatabook />\n          )}\n\n          {/* Delivery Assignment Section */}\n          {activeSection === 'delivery-assignment' && selectedOrderForDelivery && (\n            <div>\n              <div className=\"mb-6\">\n                <h2 className=\"text-2xl font-bold text-foreground mb-2\">Assign Delivery for Order</h2>\n                <p className=\"text-muted-foreground\">Choose how to assign delivery for this order</p>\n              </div>\n\n              {/* Order Details */}\n              <Card className=\"mb-6\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold text-foreground mb-4\">Order Details</h3>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                    <div>\n                      <Label className=\"text-sm font-medium text-muted-foreground\">Shop Owner</Label>\n                      <p className=\"font-medium text-foreground\">{selectedOrderForDelivery.owner?.fullName}</p>\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium text-muted-foreground\">Location</Label>\n                      <p className=\"font-medium text-foreground\">{selectedOrderForDelivery.store?.city || 'Not specified'}</p>\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium text-muted-foreground\">Total Amount</Label>\n                      <p className=\"font-medium text-foreground\">₹{selectedOrderForDelivery.totalAmount}</p>\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium text-muted-foreground\">Order Date</Label>\n                      <p className=\"font-medium text-foreground\">{new Date(selectedOrderForDelivery.createdAt).toLocaleDateString()}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Assignment Method Selection */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n                <Card className={`cursor-pointer transition-all ${deliveryAssignmentStep === 'own' ? 'ring-2 ring-primary' : ''}`} onClick={() => setDeliveryAssignmentStep('own')}>\n                  <CardContent className=\"p-6 text-center\">\n                    <i className=\"fas fa-users text-3xl text-primary mb-4\"></i>\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">Your Delivery Boys</h3>\n                    <p className=\"text-sm text-muted-foreground\">Assign to one of your registered delivery boys</p>\n                  </CardContent>\n                </Card>\n                \n                <Card className={`cursor-pointer transition-all ${deliveryAssignmentStep === 'find' ? 'ring-2 ring-primary' : ''}`} onClick={() => setDeliveryAssignmentStep('find')}>\n                  <CardContent className=\"p-6 text-center\">\n                    <i className=\"fas fa-search text-3xl text-primary mb-4\"></i>\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">Find Delivery Boys</h3>\n                    <p className=\"text-sm text-muted-foreground\">Share with available delivery boys in your area</p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Own Delivery Boys Section */}\n              {deliveryAssignmentStep === 'own' && (\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-lg font-semibold text-foreground mb-4\">Select Your Delivery Boy</h3>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      {deliveryBoys.map((deliveryBoy: any) => (\n                        <Card key={deliveryBoy.id} className=\"cursor-pointer hover:shadow-md transition-shadow\" onClick={() => {\n                          assignDeliveryBoyMutation.mutate({ \n                            orderId: selectedOrderForDelivery.id, \n                            deliveryBoyId: deliveryBoy.id \n                          });\n                          setSelectedOrderForDelivery(null);\n                          setActiveSection('orders');\n                        }}>\n                          <CardContent className=\"p-4\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n                                <i className=\"fas fa-motorcycle text-primary-foreground\"></i>\n                              </div>\n                              <div>\n                                <p className=\"font-medium text-foreground\">{deliveryBoy.name}</p>\n                                <p className=\"text-sm text-muted-foreground\">{deliveryBoy.phone}</p>\n                                <p className=\"text-xs text-muted-foreground\">{deliveryBoy.address}</p>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                      {deliveryBoys.length === 0 && (\n                        <div className=\"col-span-2 text-center py-8\">\n                          <i className=\"fas fa-motorcycle text-4xl text-muted-foreground mb-4\"></i>\n                          <p className=\"text-muted-foreground\">No delivery boys added yet</p>\n                          <Button \n                            variant=\"outline\" \n                            className=\"mt-4\"\n                            onClick={() => setActiveSection('delivery-boys')}\n                          >\n                            Add Delivery Boy\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Find Delivery Boys Section */}\n              {deliveryAssignmentStep === 'find' && (\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-lg font-semibold text-foreground mb-4\">Share Delivery Request</h3>\n                    <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4\">\n                      <div className=\"flex items-start space-x-3\">\n                        <i className=\"fas fa-info-circle text-blue-600 mt-1\"></i>\n                        <div>\n                          <h4 className=\"font-medium text-blue-900 mb-2\">How it works:</h4>\n                          <ul className=\"text-sm text-blue-800 space-y-1\">\n                            <li>• Share this delivery request with all available delivery boys in your area</li>\n                            <li>• Delivery boys will receive a notification with pickup and delivery details</li>\n                            <li>• First delivery boy to accept will be automatically assigned</li>\n                          </ul>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-4\">\n                      <div>\n                        <Label className=\"text-sm font-medium text-foreground\">Pickup Address</Label>\n                        <p className=\"text-sm text-muted-foreground mt-1\">{store?.address || 'Store address not set'}</p>\n                      </div>\n                      <div>\n                        <Label className=\"text-sm font-medium text-foreground\">Delivery Address</Label>\n                        <p className=\"text-sm text-muted-foreground mt-1\">{selectedOrderForDelivery.store?.address || 'Customer address'}</p>\n                      </div>\n                      <div>\n                        <Label className=\"text-sm font-medium text-foreground\">Estimated Reward</Label>\n                        <Input \n                          placeholder=\"Enter delivery fee (optional)\" \n                          className=\"mt-1\"\n                          defaultValue=\"50\"\n                        />\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex space-x-3 mt-6\">\n                      <Button \n                        onClick={async () => {\n                          try {\n                            await apiRequest('POST', `/api/orders/${selectedOrderForDelivery.id}/share-delivery`, {\n                              estimatedReward: '50',\n                              pickupAddress: store?.address || 'Store pickup location',\n                              deliveryAddress: selectedOrderForDelivery.store?.address || 'Customer delivery location'\n                            });\n                            toast({ \n                              title: \"🚚 Delivery Request Shared!\", \n                              description: \"All delivery boys in your area have been notified about this delivery request.\" \n                            });\n                            setSelectedOrderForDelivery(null);\n                            setActiveSection('orders');\n                          } catch (error) {\n                            toast({ \n                              title: \"Failed to share delivery request\", \n                              description: \"Please try again later\",\n                              variant: \"destructive\" \n                            });\n                          }\n                        }}\n                        className=\"flex-1\"\n                      >\n                        <i className=\"fas fa-share mr-2\"></i>\n                        Share Delivery Request\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        onClick={() => {\n                          setSelectedOrderForDelivery(null);\n                          setActiveSection('orders');\n                        }}\n                      >\n                        Cancel\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          )}\n\n          {/* Delivery Boys Section */}\n          {activeSection === 'delivery-boys' && (\n            <div>\n              <div className=\"mb-6\">\n                <h2 className=\"text-2xl font-bold text-foreground mb-2\">Delivery Boy Management</h2>\n                <p className=\"text-muted-foreground\">Add and manage your delivery boys</p>\n              </div>\n\n              {/* Search Delivery Boys by ID */}\n              <Card className=\"mb-6\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold text-foreground mb-4\">Find Delivery Boys by Delivery Boy ID</h3>\n                  <p className=\"text-sm text-muted-foreground mb-4\">Search for a specific delivery boy using their unique ID (e.g., Test Delivery Boy, ID: fcb121c3-cdca-4c22-8195-bf4ab10c0f17)</p>\n                  \n                  <div className=\"grid grid-cols-1 gap-4 mb-4\">\n                    <div>\n                      <Label htmlFor=\"delivery-boy-id\" className=\"text-sm font-medium text-foreground\">Delivery Boy ID</Label>\n                      <Input\n                        id=\"delivery-boy-id\"\n                        value={deliveryBoySearchForm.deliveryBoyId}\n                        onChange={(e) => setDeliveryBoySearchForm({ deliveryBoyId: e.target.value })}\n                        placeholder=\"Enter delivery boy ID (e.g., fcb121c3-cdca-4c22-8195-bf4ab10c0f17)\"\n                        className=\"mt-2\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex space-x-2\">\n                    <Button\n                      onClick={async () => {\n                        if (!deliveryBoySearchForm.deliveryBoyId.trim()) {\n                          toast({ \n                            title: \"Please enter a delivery boy ID\", \n                            variant: \"destructive\" \n                          });\n                          return;\n                        }\n                        \n                        setIsSearching(true);\n                        try {\n                          const response = await fetch(`/api/retailer/delivery-boys/search-by-id?deliveryBoyId=${encodeURIComponent(deliveryBoySearchForm.deliveryBoyId)}`, {\n                            headers: {\n                              'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n                            }\n                          });\n                          \n                          if (response.status === 404) {\n                            // Handle \"not found\" as a valid response\n                            setSearchResults(null);\n                            toast({ \n                              title: \"No delivery boy found\",\n                              description: \"Please check the ID and try again\"\n                            });\n                            return;\n                          }\n                          \n                          if (!response.ok) throw new Error('Failed to search');\n                          const result = await response.json();\n                          setSearchResults(result);\n                          \n                          if (result.alreadyAdded) {\n                            toast({ \n                              title: \"Delivery boy already added\",\n                              description: `${result.user.fullName} is already available in the system`\n                            });\n                          } else {\n                            toast({ \n                              title: \"Delivery boy found\",\n                              description: `Found ${result.user.fullName}. Delivery boy is available in the system.`\n                            });\n                          }\n                        } catch (error) {\n                          toast({ \n                            title: \"Search failed\", \n                            description: \"Please try again later\",\n                            variant: \"destructive\" \n                          });\n                        } finally {\n                          setIsSearching(false);\n                        }\n                      }}\n                      disabled={isSearching}\n                    >\n                      {isSearching ? (\n                        <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                      ) : (\n                        <i className=\"fas fa-search mr-2\"></i>\n                      )}\n                      Search Delivery Boys\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => {\n                        setDeliveryBoySearchForm({ deliveryBoyId: '' });\n                        setSearchResults(null);\n                      }}\n                    >\n                      <i className=\"fas fa-times mr-2\"></i>\n                      Clear\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Search Results Section */}\n              {searchResults && (\n                <Card className=\"mb-6\">\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-lg font-semibold text-foreground mb-4\">\n                      <i className=\"fas fa-search mr-2\"></i>\n                      Delivery Boy Search Results\n                    </h3>\n                    <div className=\"p-4 rounded-lg border border-green-200 bg-green-50 dark:border-green-800 dark:bg-green-950\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-16 h-16 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center\">\n                            <i className=\"fas fa-motorcycle text-blue-600 dark:text-blue-400 text-2xl\"></i>\n                          </div>\n                          <div>\n                            <h4 className=\"text-xl font-semibold text-foreground\">{searchResults.user.fullName}</h4>\n                            <span className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">\n                              Available for assignments\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div className=\"space-y-4\">\n                          <div className=\"flex items-center text-sm\">\n                            <i className=\"fas fa-id-card mr-3 w-5 text-muted-foreground\"></i>\n                            <div>\n                              <span className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">Delivery Boy ID</span>\n                              <p className=\"text-sm font-mono text-foreground\">{searchResults.user.id}</p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center text-sm\">\n                            <i className=\"fas fa-phone mr-3 w-5 text-muted-foreground\"></i>\n                            <div>\n                              <span className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">Phone</span>\n                              <p className=\"text-sm text-foreground\">{searchResults.user.phone || 'Not provided'}</p>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"space-y-4\">\n                          <div className=\"flex items-center text-sm\">\n                            <i className=\"fas fa-map-marker-alt mr-3 w-5 text-muted-foreground\"></i>\n                            <div>\n                              <span className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">Email</span>\n                              <p className=\"text-sm text-foreground\">{searchResults.user.email || 'Not provided'}</p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center text-sm\">\n                            <i className=\"fas fa-toggle-on mr-3 w-5 text-muted-foreground\"></i>\n                            <div>\n                              <span className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">Status</span>\n                              <p className=\"text-sm font-medium text-green-600 dark:text-green-400\">\n                                Available\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"mt-6 p-4 bg-blue-100 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <div className=\"flex items-center text-blue-800 dark:text-blue-200\">\n                              <i className=\"fas fa-info-circle mr-2\"></i>\n                              <span className=\"font-medium\">\n                                {searchResults.alreadyAdded ? 'Already in Your Team' : 'Delivery Boy Available'}\n                              </span>\n                            </div>\n                            <p className=\"text-sm text-blue-700 dark:text-blue-300 mt-1\">\n                              {searchResults.alreadyAdded \n                                ? 'This delivery boy is already part of your team.'\n                                : 'This delivery boy is available in the system and can be assigned to orders.'\n                              }\n                            </p>\n                          </div>\n                          <div className=\"ml-4\">\n                            {searchResults.alreadyAdded ? (\n                              <Button\n                                variant=\"destructive\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  removeDeliveryBoyFromRetailerMutation.mutate(searchResults.user.id);\n                                }}\n                                disabled={removeDeliveryBoyFromRetailerMutation.isPending}\n                              >\n                                {removeDeliveryBoyFromRetailerMutation.isPending ? (\n                                  <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                                ) : (\n                                  <i className=\"fas fa-user-minus mr-2\"></i>\n                                )}\n                                Remove from Team\n                              </Button>\n                            ) : (\n                              <Button\n                                variant=\"default\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  addDeliveryBoyToRetailerMutation.mutate({ \n                                    deliveryBoyId: searchResults.user.id,\n                                    notes: 'Added via search'\n                                  });\n                                }}\n                                disabled={addDeliveryBoyToRetailerMutation.isPending}\n                              >\n                                {addDeliveryBoyToRetailerMutation.isPending ? (\n                                  <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                                ) : (\n                                  <i className=\"fas fa-user-plus mr-2\"></i>\n                                )}\n                                Add to Team\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Recently Created Delivery Boy Profile */}\n              {recentlyCreatedDeliveryBoy && (\n                <Card className=\"mb-6 border-green-200 bg-green-50 dark:border-green-800 dark:bg-green-950\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <h3 className=\"text-lg font-semibold text-green-800 dark:text-green-200\">\n                        <i className=\"fas fa-check-circle mr-2\"></i>\n                        Delivery Boy Added Successfully\n                      </h3>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        onClick={() => setRecentlyCreatedDeliveryBoy(null)}\n                        data-testid=\"button-close-profile\"\n                      >\n                        <i className=\"fas fa-times\"></i>\n                      </Button>\n                    </div>\n                    \n                    <div className=\"bg-white dark:bg-gray-900 rounded-lg p-4 border\">\n                      <div className=\"flex items-center space-x-4 mb-4\">\n                        <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center\">\n                          <i className=\"fas fa-motorcycle text-primary text-2xl\"></i>\n                        </div>\n                        <div>\n                          <h4 className=\"text-xl font-semibold text-foreground\" data-testid=\"profile-name\">\n                            {recentlyCreatedDeliveryBoy.name}\n                          </h4>\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"w-2 h-2 rounded-full bg-green-500\"></span>\n                            <span className=\"text-sm text-muted-foreground\">Active</span>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-center text-sm\">\n                            <i className=\"fas fa-phone mr-3 w-4 text-muted-foreground\"></i>\n                            <span className=\"font-medium text-foreground\" data-testid=\"profile-phone\">\n                              {recentlyCreatedDeliveryBoy.phone}\n                            </span>\n                          </div>\n                          {recentlyCreatedDeliveryBoy.address && (\n                            <div className=\"flex items-center text-sm\">\n                              <i className=\"fas fa-map-marker-alt mr-3 w-4 text-muted-foreground\"></i>\n                              <span className=\"text-foreground\" data-testid=\"profile-address\">\n                                {recentlyCreatedDeliveryBoy.address}\n                              </span>\n                            </div>\n                          )}\n                        </div>\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-center text-sm\">\n                            <i className=\"fas fa-calendar mr-3 w-4 text-muted-foreground\"></i>\n                            <span className=\"text-foreground\">\n                              Added {new Date(recentlyCreatedDeliveryBoy.createdAt).toLocaleDateString()}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center text-sm\">\n                            <i className=\"fas fa-id-badge mr-3 w-4 text-muted-foreground\"></i>\n                            <span className=\"text-xs text-muted-foreground font-mono\">\n                              ID: {recentlyCreatedDeliveryBoy.id.substring(0, 8)}...\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Delivery Boys List */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {deliveryBoys.map((deliveryBoy: any) => (\n                  <Card key={deliveryBoy.id} className=\"hover:shadow-md transition-shadow\" data-testid={`card-delivery-boy-${deliveryBoy.id}`}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n                            <i className=\"fas fa-motorcycle text-primary text-xl\"></i>\n                          </div>\n                          <div>\n                            <h4 className=\"font-semibold text-foreground\" data-testid={`name-${deliveryBoy.id}`}>\n                              {deliveryBoy.name}\n                            </h4>\n                            <div className=\"flex items-center space-x-2\">\n                              <span className=\"w-2 h-2 rounded-full bg-green-500\"></span>\n                              <span className=\"text-xs text-muted-foreground\">\n                                Active\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-2 mb-4\">\n                        <div className=\"flex items-center text-sm text-muted-foreground\">\n                          <i className=\"fas fa-phone mr-2 w-4\"></i>\n                          <span data-testid={`phone-${deliveryBoy.id}`}>{deliveryBoy.phone}</span>\n                        </div>\n                        {deliveryBoy.address && (\n                          <div className=\"flex items-center text-sm text-muted-foreground\">\n                            <i className=\"fas fa-map-marker-alt mr-2 w-4\"></i>\n                            <span data-testid={`address-${deliveryBoy.id}`}>{deliveryBoy.address}</span>\n                          </div>\n                        )}\n                        <div className=\"flex items-center text-sm text-muted-foreground\">\n                          <i className=\"fas fa-calendar mr-2 w-4\"></i>\n                          <span>Added {new Date(deliveryBoy.createdAt).toLocaleDateString()}</span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        {/* Select for Delivery Button - Only show when there are orders needing delivery */}\n                        {ordersNeedingDelivery.length > 0 && (\n                          <div className=\"border-t pt-2\">\n                            <p className=\"text-xs text-muted-foreground mb-2\">\n                              {ordersNeedingDelivery.length} order{ordersNeedingDelivery.length > 1 ? 's' : ''} need delivery\n                            </p>\n                            <select \n                              className=\"w-full text-xs border rounded p-1 mb-2\"\n                              onChange={(e) => {\n                                const orderId = e.target.value;\n                                if (orderId) {\n                                  if (confirm(`Assign ${deliveryBoy.name} to this order?`)) {\n                                    assignDeliveryBoyMutation.mutate({\n                                      orderId,\n                                      deliveryBoyId: deliveryBoy.id\n                                    });\n                                  }\n                                  e.target.value = ''; // Reset selection\n                                }\n                              }}\n                              disabled={assignDeliveryBoyMutation.isPending}\n                            >\n                              <option value=\"\">Select order to assign...</option>\n                              {ordersNeedingDelivery.map((order: any) => (\n                                <option key={order.id} value={order.id}>\n                                  Order #{order.id.slice(-8)} - ₹{order.totalAmount}\n                                </option>\n                              ))}\n                            </select>\n                          </div>\n                        )}\n                        \n                        <div className=\"space-y-2\">\n                          {/* Delivery Assignment Button */}\n                          <Button\n                            variant=\"default\"\n                            size=\"sm\"\n                            className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n                            onClick={() => {\n                              if (ordersNeedingDelivery.length === 0) {\n                                toast({ \n                                  title: \"No orders available\", \n                                  description: \"There are no orders that need delivery assignment\",\n                                  variant: \"destructive\" \n                                });\n                                return;\n                              }\n                              // Navigate to orders section and pre-select this delivery boy\n                              setActiveSection('orders');\n                              setSelectedOrderForDelivery(ordersNeedingDelivery[0]);\n                              setIsSelectingDeliveryBoy(true);\n                              setDeliveryAssignmentStep('own');\n                            }}\n                            disabled={ordersNeedingDelivery.length === 0}\n                            data-testid={`button-assign-${deliveryBoy.id}`}\n                          >\n                            <i className=\"fas fa-shipping-fast mr-2\"></i>\n                            Assign Delivery ({ordersNeedingDelivery.length})\n                          </Button>\n                          \n                          <div className=\"flex justify-center\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"text-destructive border-destructive hover:bg-destructive/10\"\n                              onClick={() => {\n                                if (confirm(`Are you sure you want to remove ${deliveryBoy.name}?`)) {\n                                  deleteDeliveryBoyMutation.mutate(deliveryBoy.id);\n                                }\n                              }}\n                              disabled={deleteDeliveryBoyMutation.isPending}\n                              data-testid={`button-delete-${deliveryBoy.id}`}\n                            >\n                              <i className=\"fas fa-trash mr-2\"></i>\n                              Remove\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n                \n                {deliveryBoys.length === 0 && (\n                  <div className=\"col-span-full text-center py-12\">\n                    <i className=\"fas fa-motorcycle text-4xl text-muted-foreground mb-4\"></i>\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">No delivery boys added yet</h3>\n                    <p className=\"text-muted-foreground\">Add your first delivery boy to start managing deliveries</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Delivery Requests Section */}\n          {activeSection === 'delivery-requests' && (\n            <div>\n              <div className=\"mb-6\">\n                <h2 className=\"text-2xl font-bold text-foreground mb-2\">Delivery Requests</h2>\n                <p className=\"text-muted-foreground\">Post and manage delivery requests for independent delivery boys</p>\n              </div>\n\n              {/* Create New Delivery Request */}\n              <Card className=\"mb-6\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold text-foreground mb-4\">Post New Delivery Request</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label className=\"text-sm font-medium text-foreground\">Description</Label>\n                      <Textarea\n                        value={deliveryRequestForm.description}\n                        onChange={(e) => setDeliveryRequestForm(prev => ({ ...prev, description: e.target.value }))}\n                        placeholder=\"Describe what needs to be delivered\"\n                        rows={3}\n                        className=\"mt-2\"\n                        data-testid=\"textarea-delivery-description\"\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium text-foreground\">Estimated Reward (₹)</Label>\n                      <Input\n                        type=\"number\"\n                        value={deliveryRequestForm.estimatedReward}\n                        onChange={(e) => setDeliveryRequestForm(prev => ({ ...prev, estimatedReward: e.target.value }))}\n                        placeholder=\"Enter estimated reward amount\"\n                        className=\"mt-2\"\n                        data-testid=\"input-estimated-reward\"\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium text-foreground\">Pickup Address</Label>\n                      <Textarea\n                        value={deliveryRequestForm.pickupAddress}\n                        onChange={(e) => setDeliveryRequestForm(prev => ({ ...prev, pickupAddress: e.target.value }))}\n                        placeholder=\"Enter pickup address\"\n                        rows={2}\n                        className=\"mt-2\"\n                        data-testid=\"textarea-pickup-address\"\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium text-foreground\">Drop-off Address</Label>\n                      <Textarea\n                        value={deliveryRequestForm.dropoffAddress}\n                        onChange={(e) => setDeliveryRequestForm(prev => ({ ...prev, dropoffAddress: e.target.value }))}\n                        placeholder=\"Enter drop-off address\"\n                        rows={2}\n                        className=\"mt-2\"\n                        data-testid=\"textarea-dropoff-address\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"mt-4 flex justify-end\">\n                    <Button\n                      onClick={() => createDeliveryRequestMutation.mutate(deliveryRequestForm)}\n                      disabled={createDeliveryRequestMutation.isPending || !deliveryRequestForm.description || !deliveryRequestForm.pickupAddress || !deliveryRequestForm.dropoffAddress}\n                      data-testid=\"button-post-delivery-request\"\n                    >\n                      {createDeliveryRequestMutation.isPending ? (\n                        <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                      ) : (\n                        <i className=\"fas fa-plus mr-2\"></i>\n                      )}\n                      Post Request\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Delivery Requests List */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {deliveryRequests.map((request: any) => (\n                  <Card key={request.id} className=\"hover:shadow-md transition-shadow\" data-testid={`card-delivery-request-${request.id}`}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <Badge \n                          className={\n                            request.status === 'OPEN' ? 'bg-blue-100 text-blue-800' :\n                            request.status === 'ACCEPTED' ? 'bg-green-100 text-green-800' :\n                            request.status === 'REJECTED' ? 'bg-red-100 text-red-800' :\n                            'bg-gray-100 text-gray-800'\n                          }\n                          data-testid={`badge-status-${request.id}`}\n                        >\n                          {request.status}\n                        </Badge>\n                        {request.estimatedReward && (\n                          <div className=\"text-lg font-semibold text-primary\">\n                            ₹{request.estimatedReward}\n                          </div>\n                        )}\n                      </div>\n                      \n                      <h4 className=\"font-medium text-foreground mb-2\" data-testid={`text-description-${request.id}`}>\n                        {request.description}\n                      </h4>\n                      \n                      <div className=\"space-y-2 text-sm\">\n                        <div>\n                          <span className=\"text-muted-foreground\">Pickup:</span>\n                          <p className=\"text-foreground\">{request.pickupAddress}</p>\n                        </div>\n                        <div>\n                          <span className=\"text-muted-foreground\">Drop-off:</span>\n                          <p className=\"text-foreground\">{request.dropoffAddress}</p>\n                        </div>\n                        <div className=\"flex justify-between text-xs text-muted-foreground\">\n                          <span>Posted: {new Date(request.createdAt).toLocaleDateString()}</span>\n                          {request.acceptedBy && (\n                            <span>Accepted by delivery boy</span>\n                          )}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n                \n                {deliveryRequests.length === 0 && (\n                  <div className=\"col-span-full text-center py-12\">\n                    <i className=\"fas fa-truck text-4xl text-muted-foreground mb-4\"></i>\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">No delivery requests yet</h3>\n                    <p className=\"text-muted-foreground\">Post your first delivery request to connect with delivery boys</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </main>\n      </div>\n\n      {/* Enhanced Payment Recording Modal */}\n      <Dialog open={paymentModal.isOpen} onOpenChange={(open) => setPaymentModal({ isOpen: open, order: null })}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Record Payment - Order #{paymentModal.order?.id?.slice(-8)}</DialogTitle>\n          </DialogHeader>\n          \n          {paymentModal.order && (\n            <div className=\"space-y-4\">\n              <div className=\"bg-muted/50 p-4 rounded-lg\">\n                <div className=\"flex justify-between items-center mb-2\">\n                  <span className=\"text-sm text-muted-foreground\">Order Total:</span>\n                  <span className=\"font-semibold\">₹{paymentModal.order.totalAmount}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-muted-foreground\">Customer:</span>\n                  <span className=\"text-sm\">{paymentModal.order.owner?.fullName}</span>\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"payment-amount\" className=\"text-sm font-medium\">\n                  Amount Received <span className=\"text-muted-foreground\">(₹)</span>\n                </Label>\n                <Input\n                  id=\"payment-amount\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  min=\"0\"\n                  max={paymentModal.order.totalAmount}\n                  value={paymentAmount}\n                  onChange={(e) => setPaymentAmount(e.target.value)}\n                  placeholder=\"Enter amount received\"\n                  className=\"mt-2\"\n                  data-testid=\"input-payment-amount\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Leave empty for full payment of ₹{paymentModal.order.totalAmount}\n                </p>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"payment-note\" className=\"text-sm font-medium\">\n                  Payment Notes <span className=\"text-muted-foreground\">(Optional)</span>\n                </Label>\n                <Textarea\n                  id=\"payment-note\"\n                  value={paymentNote}\n                  onChange={(e) => setPaymentNote(e.target.value)}\n                  placeholder=\"Add notes about partial payment, customer conditions, etc.\"\n                  className=\"mt-2\"\n                  rows={3}\n                  data-testid=\"textarea-payment-note\"\n                />\n              </div>\n              \n              {paymentAmount && parseFloat(paymentAmount) < parseFloat(paymentModal.order.totalAmount) && (\n                <div className=\"bg-yellow-50 border border-yellow-200 p-3 rounded-lg\">\n                  <div className=\"flex items-center text-yellow-800\">\n                    <i className=\"fas fa-exclamation-triangle mr-2\"></i>\n                    <span className=\"text-sm font-medium\">Partial Payment</span>\n                  </div>\n                  <p className=\"text-sm text-yellow-700 mt-1\">\n                    Outstanding balance: ₹{(parseFloat(paymentModal.order.totalAmount) - parseFloat(paymentAmount || '0')).toFixed(2)}\n                  </p>\n                  <p className=\"text-xs text-yellow-600 mt-1\">\n                    This will be tracked in the customer's khatabook for future settlement\n                  </p>\n                </div>\n              )}\n              \n              <div className=\"flex space-x-3 pt-4\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setPaymentModal({ isOpen: false, order: null })}\n                  className=\"flex-1\"\n                  data-testid=\"button-cancel-payment\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={() => handlePaymentSubmit(paymentModal.order)}\n                  disabled={confirmPaymentMutation.isPending}\n                  className=\"flex-1\"\n                  data-testid=\"button-confirm-payment-modal\"\n                >\n                  {confirmPaymentMutation.isPending ? (\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  ) : (\n                    <i className=\"fas fa-check mr-2\"></i>\n                  )}\n                  Record Payment\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Manual Product Modal */}\n      <AddManualProductModal \n        isOpen={showManualModal}\n        onClose={() => setShowManualModal(false)}\n        storeId={store?.id || ''}\n      />\n\n      {/* Catalog Selection Modal */}\n      <AddFromCatalogModal \n        isOpen={showCatalogModal}\n        onClose={() => setShowCatalogModal(false)}\n        storeId={store?.id || ''}\n      />\n\n      {/* Navigation Sidebar */}\n      <NavigationSidebar\n        isOpen={isNavigationOpen}\n        onClose={() => setIsNavigationOpen(false)}\n        title=\"Navigation\"\n      >\n        <NavigationItem\n          onClick={() => {\n            setActiveSection('orders');\n            setIsNavigationOpen(false);\n          }}\n          active={activeSection === 'orders'}\n          icon=\"fas fa-receipt\"\n          label=\"Orders\"\n          badge={pendingOrders.length}\n          testId=\"button-nav-orders-navigation\"\n        />\n        <NavigationItem\n          onClick={() => {\n            setActiveSection('delivery-boys');\n            setIsNavigationOpen(false);\n          }}\n          active={activeSection === 'delivery-boys'}\n          icon=\"fas fa-motorcycle\"\n          label=\"Delivery Boy\"\n          testId=\"button-nav-delivery-boys-navigation\"\n        />\n        <NavigationItem\n          onClick={() => {\n            setActiveSection('khatabook');\n            setIsNavigationOpen(false);\n          }}\n          active={activeSection === 'khatabook'}\n          icon=\"fas fa-book\"\n          label=\"Khatabook\"\n          testId=\"button-nav-khatabook-navigation\"\n        />\n        <NavigationItem\n          onClick={() => {\n            setActiveSection('listings');\n            setIsNavigationOpen(false);\n          }}\n          active={activeSection === 'listings'}\n          icon=\"fas fa-box\"\n          label=\"Inventory\"\n          testId=\"button-nav-listings-navigation\"\n        />\n        <NavigationItem\n          onClick={() => {\n            setActiveSection('store');\n            setIsNavigationOpen(false);\n          }}\n          active={activeSection === 'store'}\n          icon=\"fas fa-store\"\n          label=\"My Store\"\n          testId=\"button-nav-store-navigation\"\n        />\n      </NavigationSidebar>\n\n      {/* Delivery Boy Assignment Modal */}\n      <Dialog open={deliveryBoyAssignmentModal.isOpen} onOpenChange={(open) => !open && setDeliveryBoyAssignmentModal({ isOpen: false, order: null })}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Assign Delivery Boy</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label className=\"text-sm font-medium\">Order Details</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Order #{deliveryBoyAssignmentModal.order?.id?.slice(-8)} - ₹{deliveryBoyAssignmentModal.order?.totalAmount}\n              </p>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium\">Select Delivery Boy</Label>\n              <Select value={selectedDeliveryBoyId} onValueChange={setSelectedDeliveryBoyId}>\n                <SelectTrigger className=\"mt-2\">\n                  <SelectValue placeholder=\"Choose a delivery boy\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {deliveryBoys.map((deliveryBoy: any) => (\n                    <SelectItem key={deliveryBoy.id} value={deliveryBoy.id}>\n                      <div className=\"flex items-center gap-2\">\n                        <i className=\"fas fa-user text-muted-foreground\"></i>\n                        <span>{deliveryBoy.name}</span>\n                        <span className=\"text-xs text-muted-foreground\">({deliveryBoy.phone})</span>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button \n                onClick={() => {\n                  if (selectedDeliveryBoyId) {\n                    assignDeliveryBoyMutation.mutate({\n                      orderId: deliveryBoyAssignmentModal.order?.id,\n                      deliveryBoyId: selectedDeliveryBoyId\n                    });\n                  }\n                }}\n                disabled={!selectedDeliveryBoyId || assignDeliveryBoyMutation.isPending}\n                className=\"flex-1\"\n              >\n                {assignDeliveryBoyMutation.isPending ? 'Assigning...' : 'Assign Delivery Boy'}\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setDeliveryBoyAssignmentModal({ isOpen: false, order: null });\n                  setSelectedDeliveryBoyId('');\n                }}\n                className=\"flex-1\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":95887},"client/src/pages/shop-owner/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport Header from \"@/components/layout/header\";\nimport StoreCatalogModal from \"@/components/modals/store-catalog-modal\";\nimport { NavigationSidebar, NavigationItem } from \"@/components/ui/navigation-sidebar\";\nimport { useCartStore } from \"@/store/cart\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function ShopOwnerDashboard() {\n  const [activeSection, setActiveSection] = useState('explore');\n  const [isNavigationOpen, setIsNavigationOpen] = useState(false);\n  const [selectedStore, setSelectedStore] = useState<any>(null);\n  const [searchFilters, setSearchFilters] = useState({ search: '', city: '', pincode: '', name: '', id: '' });\n  const [deliveryType, setDeliveryType] = useState('PICKUP');\n  const [orderNote, setOrderNote] = useState('');\n  const [adjustmentAmount, setAdjustmentAmount] = useState('');\n  const [adjustmentNote, setAdjustmentNote] = useState('');\n  const [adjustmentDialogOpen, setAdjustmentDialogOpen] = useState(false);\n  const [selectedOrderForAdjustment, setSelectedOrderForAdjustment] = useState<any>(null);\n  const [productQuantities, setProductQuantities] = useState<{[key: string]: number}>({});\n  \n  const { cart, addToCart, removeFromCart, updateQuantity, clearCart, getTotalAmount, getItemCount } = useCartStore();\n  const { toast } = useToast();\n\n  const { data: stores = [] } = useQuery({\n    queryKey: ['/api/stores', searchFilters],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (searchFilters.search) params.append('search', searchFilters.search);\n      if (searchFilters.city) params.append('city', searchFilters.city);\n      if (searchFilters.pincode) params.append('pincode', searchFilters.pincode);\n      if (searchFilters.name) params.append('name', searchFilters.name);\n      if (searchFilters.id) params.append('id', searchFilters.id);\n      \n      const response = await fetch(`/api/stores?${params}`);\n      if (!response.ok) throw new Error('Failed to fetch stores');\n      return response.json();\n    }\n  });\n\n  const { data: popularRetailers = [] } = useQuery({\n    queryKey: ['/api/stores/popular'],\n    queryFn: async () => {\n      const response = await fetch('/api/stores/popular?limit=10');\n      if (!response.ok) throw new Error('Failed to fetch popular retailers');\n      return response.json();\n    }\n  });\n\n\n  const { data: retailerBalances = [] } = useQuery({\n    queryKey: ['/api/khatabook/retailer-balances'],\n    queryFn: async () => {\n      const response = await fetch('/api/khatabook/retailer-balances', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        }\n      });\n      if (!response.ok) throw new Error('Failed to fetch retailer balances');\n      return response.json();\n    }\n  });\n\n  const { data: orders = [] } = useQuery({\n    queryKey: ['/api/orders/mine'],\n    queryFn: async () => {\n      const response = await fetch('/api/orders/mine', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        }\n      });\n      if (!response.ok) throw new Error('Failed to fetch orders');\n      return response.json();\n    }\n  });\n\n  const { data: popularProducts = [] } = useQuery({\n    queryKey: ['/api/popular-products'],\n    queryFn: async () => {\n      const response = await fetch('/api/popular-products?limit=8');\n      if (!response.ok) throw new Error('Failed to fetch popular products');\n      return response.json();\n    }\n  });\n\n  // Get listings for popular products to enable add to cart\n  const { data: allStores = [] } = useQuery({\n    queryKey: ['/api/stores-detailed'],\n    queryFn: async () => {\n      const storeList = await fetch('/api/stores').then(res => res.json());\n      const storeDetails = await Promise.all(\n        storeList.map(async (store: any) => {\n          const response = await fetch(`/api/stores/${store.id}`);\n          return response.json();\n        })\n      );\n      return storeDetails;\n    },\n    enabled: popularProducts.length > 0\n  });\n\n  const { data: ledgerSummary } = useQuery({\n    queryKey: ['/api/khatabook/summary'],\n    queryFn: async () => {\n      const response = await fetch('/api/khatabook/summary', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        }\n      });\n      if (!response.ok) throw new Error('Failed to fetch ledger summary');\n      return response.json();\n    }\n  });\n\n  const { data: ledgerEntries } = useQuery({\n    queryKey: ['/api/khatabook'],\n    queryFn: async () => {\n      const response = await fetch('/api/khatabook', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        }\n      });\n      if (!response.ok) throw new Error('Failed to fetch ledger entries');\n      return response.json();\n    }\n  });\n\n  const placeOrderMutation = useMutation({\n    mutationFn: async (orderData: any) => {\n      return await apiRequest('POST', '/api/orders', orderData);\n    },\n    onSuccess: () => {\n      clearCart();\n      setActiveSection('orders');\n      queryClient.invalidateQueries({ queryKey: ['/api/orders/mine'] });\n      toast({ title: \"Order placed successfully!\", description: \"You will receive updates shortly.\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to place order\", variant: \"destructive\" });\n    }\n  });\n\n  const adjustAmountMutation = useMutation({\n    mutationFn: async ({ orderId, adjustedAmount, adjustmentNote }: { orderId: string; adjustedAmount: string; adjustmentNote: string }) => {\n      return await apiRequest('POST', `/api/orders/${orderId}/adjust-amount`, { adjustedAmount, adjustmentNote });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/orders/mine'] });\n      setAdjustmentDialogOpen(false);\n      setAdjustmentAmount('');\n      setAdjustmentNote('');\n      setSelectedOrderForAdjustment(null);\n      toast({ title: \"Payment amount adjusted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to adjust payment amount\", variant: \"destructive\" });\n    }\n  });\n\n\n  const handlePlaceOrder = () => {\n    if (cart.length === 0) {\n      toast({ title: \"Cart is empty\", variant: \"destructive\" });\n      return;\n    }\n\n    const orderData = {\n      storeId: cart[0].storeId, // Assuming all items are from same store\n      items: cart.map(item => ({ listingId: item.listingId, qty: item.qty })),\n      deliveryType,\n      note: orderNote\n    };\n\n    placeOrderMutation.mutate(orderData);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'PENDING': return 'bg-yellow-100 text-yellow-800';\n      case 'ACCEPTED': return 'bg-green-100 text-green-800';\n      case 'REJECTED': return 'bg-red-100 text-red-800';\n      case 'READY': return 'bg-blue-100 text-blue-800';\n      case 'COMPLETED': return 'bg-green-100 text-green-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const findBestListingForProduct = (productId: string) => {\n    for (const store of allStores) {\n      const listing = store.listings?.find((l: any) => l.productId === productId && l.available);\n      if (listing) {\n        return {\n          listingId: listing.id,\n          storeId: store.id,\n          storeName: store.name,\n          price: parseFloat(listing.price),\n          ...listing\n        };\n      }\n    }\n    return null;\n  };\n\n  const handleQuantityChange = (productId: string, quantity: number) => {\n    setProductQuantities(prev => ({\n      ...prev,\n      [productId]: Math.max(1, quantity)\n    }));\n  };\n\n  const handleAddToCart = (item: any) => {\n    const listing = findBestListingForProduct(item.product.id);\n    if (!listing) {\n      toast({ \n        title: \"Product not available\", \n        description: \"This product is not currently available in any store.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const quantity = productQuantities[item.product.id] || 1;\n    \n    addToCart({\n      listingId: listing.listingId,\n      storeId: listing.storeId,\n      name: item.product.name,\n      brand: item.product.brand,\n      size: item.product.size,\n      price: listing.price,\n      imageUrl: item.product.imageUrl || 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=200&h=160',\n      qty: quantity\n    });\n\n    toast({ \n      title: \"Added to cart!\", \n      description: `${quantity}x ${item.product.name} from ${listing.storeName}`,\n      action: (\n        <Button\n          size=\"sm\"\n          onClick={() => setActiveSection('cart')}\n          className=\"ml-auto\"\n        >\n          <i className=\"fas fa-shopping-cart mr-1\"></i>\n          View Cart\n        </Button>\n      )\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header onNavigationMenuClick={() => setIsNavigationOpen(true)} />\n      \n      <div className=\"h-[calc(100vh-80px)]\">\n        {/* Main Content */}\n        <main className=\"flex-1 p-6 overflow-auto\">\n          {/* Explore Stores Section */}\n          {activeSection === 'explore' && (\n            <div>\n              <div className=\"mb-6\">\n                <h2 className=\"text-2xl font-bold text-foreground mb-2\">Explore Stores</h2>\n                <p className=\"text-muted-foreground\">Discover retailers and browse their products</p>\n              </div>\n\n              {/* Search and Filters */}\n              <Card className=\"mb-6\">\n                <CardContent className=\"p-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4\">\n                    <div className=\"lg:col-span-2\">\n                      <Label className=\"text-sm font-medium\">Search</Label>\n                      <Input\n                        placeholder=\"Search stores...\"\n                        value={searchFilters.search}\n                        onChange={(e) => setSearchFilters(prev => ({ ...prev, search: e.target.value }))}\n                        data-testid=\"input-search-stores\"\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium\">City</Label>\n                      <Input\n                        placeholder=\"Enter city\"\n                        value={searchFilters.city}\n                        onChange={(e) => setSearchFilters(prev => ({ ...prev, city: e.target.value }))}\n                        data-testid=\"input-filter-city\"\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium\">Pincode</Label>\n                      <Input\n                        placeholder=\"Enter pincode\"\n                        value={searchFilters.pincode}\n                        onChange={(e) => setSearchFilters(prev => ({ ...prev, pincode: e.target.value }))}\n                        data-testid=\"input-filter-pincode\"\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium\">Name (optional)</Label>\n                      <Input\n                        placeholder=\"Store name\"\n                        value={searchFilters.name}\n                        onChange={(e) => setSearchFilters(prev => ({ ...prev, name: e.target.value }))}\n                        data-testid=\"input-filter-name\"\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium\">ID (optional)</Label>\n                      <Input\n                        placeholder=\"Store ID\"\n                        value={searchFilters.id}\n                        onChange={(e) => setSearchFilters(prev => ({ ...prev, id: e.target.value }))}\n                        data-testid=\"input-filter-id\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"mt-4 flex justify-end\">\n                    <Button data-testid=\"button-search-stores\" className=\"flex items-center gap-2\">\n                      <i className=\"fas fa-search\"></i>\n                      Search\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Popular Retailers Section */}\n              {popularRetailers.length > 0 && (\n                <div className=\"mb-6\">\n                  <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center gap-2\">\n                    <i className=\"fas fa-star text-yellow-500\"></i>\n                    Popular Retailers\n                  </h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 mb-6\">\n                    {popularRetailers.slice(0, 5).map((retailer: any) => (\n                      <Card \n                        key={retailer.id} \n                        className=\"hover:shadow-md transition-shadow cursor-pointer border-l-4 border-l-yellow-400\"\n                        onClick={() => setSelectedStore(retailer)}\n                      >\n                        <CardContent className=\"p-4\">\n                          <div className=\"text-center\">\n                            <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center mx-auto mb-2\">\n                              <i className=\"fas fa-store text-primary-foreground text-sm\"></i>\n                            </div>\n                            <h4 className=\"font-medium text-sm text-foreground truncate\">{retailer.name}</h4>\n                            <p className=\"text-xs text-blue-600 font-medium\">\n                              {retailer.retailerName || 'Unknown'}\n                            </p>\n                            <div className=\"flex items-center justify-center gap-1 mt-1\">\n                              <i className=\"fas fa-star text-yellow-500 text-xs\"></i>\n                              <span className=\"text-xs text-muted-foreground\">\n                                {retailer.rating ? parseFloat(retailer.rating).toFixed(1) : '4.5'}\n                              </span>\n                            </div>\n                            <p className=\"text-xs text-muted-foreground mt-1\">{retailer.city}</p>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Store Grid */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {stores.map((store: any) => (\n                  <Card \n                    key={store.id} \n                    className=\"hover:shadow-lg transition-shadow cursor-pointer\"\n                    onClick={() => setSelectedStore(store)}\n                    data-testid={`card-store-${store.id}`}\n                  >\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center\">\n                            <i className=\"fas fa-store text-primary-foreground\"></i>\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold text-foreground\">{store.name}</h3>\n                            <p className=\"text-sm text-blue-600 font-medium\">Retailer: {store.retailerName || 'Unknown'}</p>\n                            <p className=\"text-xs text-muted-foreground\">Electronics & Gadgets</p>\n                          </div>\n                        </div>\n                        <span className={`w-3 h-3 rounded-full ${store.isOpen ? 'bg-green-500' : 'bg-red-500'}`}></span>\n                      </div>\n                      \n                      <div className=\"space-y-2 mb-4\">\n                        <div className=\"flex items-center text-sm text-muted-foreground\">\n                          <i className=\"fas fa-map-marker-alt mr-2\"></i>\n                          {store.city}, {store.pincode}\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center text-sm text-muted-foreground\">\n                            <i className=\"fas fa-star text-yellow-500 mr-1\"></i>\n                            <span>{store.rating ? parseFloat(store.rating).toFixed(1) : '4.5'}</span>\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            ID: {store.id.slice(-8)}\n                          </div>\n                        </div>\n                        <div className=\"text-sm font-medium text-foreground\">\n                          {store.listings?.length || 0} products\n                        </div>\n                      </div>\n                      \n                      <Button className=\"w-full\" data-testid={`button-browse-${store.id}`}>\n                        Browse Catalog\n                      </Button>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n\n              {/* Popular Products Section */}\n              <div className=\"mt-12\">\n                <div className=\"mb-6\">\n                  <h3 className=\"text-xl font-bold text-foreground mb-2\">Popular Products</h3>\n                  <p className=\"text-muted-foreground\">Trending items based on customer orders</p>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                  {popularProducts.map((item: any) => (\n                    <Card \n                      key={item.product.id} \n                      className=\"hover:shadow-md transition-shadow\"\n                      data-testid={`card-popular-${item.product.id}`}\n                    >\n                      <CardContent className=\"p-4\">\n                        <img \n                          src={item.product.imageUrl || 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=200&h=160'} \n                          alt={item.product.name}\n                          className=\"w-full h-32 object-cover rounded-md mb-3\"\n                        />\n                        <h4 className=\"font-medium text-foreground mb-1 text-sm\">{item.product.name}</h4>\n                        <p className=\"text-xs text-muted-foreground mb-2\">\n                          {item.product.brand} • {item.product.size}\n                        </p>\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <div className=\"text-xs text-muted-foreground\">\n                            {item.totalOrdered > 0 ? (\n                              <>\n                                <i className=\"fas fa-fire text-orange-500 mr-1\"></i>\n                                {item.totalOrdered} sold\n                              </>\n                            ) : (\n                              <>\n                                <i className=\"fas fa-star text-yellow-500 mr-1\"></i>\n                                Featured\n                              </>\n                            )}\n                          </div>\n                          <Badge \n                            variant={item.product.isWholesale ? \"default\" : \"secondary\"}\n                            className=\"text-xs\"\n                          >\n                            {item.product.isWholesale ? 'Wholesale' : 'Retail'}\n                          </Badge>\n                        </div>\n                        {(() => {\n                          const listing = findBestListingForProduct(item.product.id);\n                          const quantity = productQuantities[item.product.id] || 1;\n                          \n                          return (\n                            <div className=\"space-y-3\">\n                              {listing ? (\n                                <div className=\"text-sm font-semibold text-foreground\">\n                                  ₹{listing.price.toFixed(2)} <span className=\"text-xs text-muted-foreground\">at {listing.storeName}</span>\n                                </div>\n                              ) : item.avgPrice > 0 ? (\n                                <div className=\"text-sm font-semibold text-foreground\">\n                                  Avg: ₹{parseFloat(item.avgPrice).toFixed(0)}\n                                </div>\n                              ) : (\n                                <div className=\"text-sm text-muted-foreground\">\n                                  Price not available\n                                </div>\n                              )}\n                              \n                              {listing && (\n                                <div className=\"flex items-center gap-2\">\n                                  <div className=\"flex items-center border border-border rounded-md\">\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      className=\"h-8 w-8 p-0\"\n                                      onClick={() => handleQuantityChange(item.product.id, quantity - 1)}\n                                      data-testid={`button-decrease-${item.product.id}`}\n                                    >\n                                      -\n                                    </Button>\n                                    <Input\n                                      type=\"number\"\n                                      min=\"1\"\n                                      value={quantity}\n                                      onChange={(e) => handleQuantityChange(item.product.id, parseInt(e.target.value) || 1)}\n                                      className=\"h-8 w-12 text-center border-0 focus-visible:ring-0\"\n                                      data-testid={`input-quantity-${item.product.id}`}\n                                    />\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      className=\"h-8 w-8 p-0\"\n                                      onClick={() => handleQuantityChange(item.product.id, quantity + 1)}\n                                      data-testid={`button-increase-${item.product.id}`}\n                                    >\n                                      +\n                                    </Button>\n                                  </div>\n                                  <Button\n                                    size=\"sm\"\n                                    className=\"flex-1 h-8\"\n                                    onClick={() => handleAddToCart(item)}\n                                    data-testid={`button-add-cart-${item.product.id}`}\n                                  >\n                                    <i className=\"fas fa-shopping-cart mr-1\"></i>\n                                    Add\n                                  </Button>\n                                </div>\n                              )}\n                              \n                              {!listing && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  disabled\n                                  className=\"w-full h-8\"\n                                  data-testid={`button-unavailable-${item.product.id}`}\n                                >\n                                  Not Available\n                                </Button>\n                              )}\n                            </div>\n                          );\n                        })()}\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n\n                {popularProducts.length === 0 && (\n                  <Card>\n                    <CardContent className=\"p-6 text-center text-muted-foreground\">\n                      <i className=\"fas fa-chart-line text-4xl mb-4 opacity-50\"></i>\n                      <p>No popular products data available yet</p>\n                      <p className=\"text-sm\">Products will appear here based on order history</p>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Cart Section */}\n          {activeSection === 'cart' && (\n            <div>\n              <div className=\"mb-6\">\n                <h2 className=\"text-2xl font-bold text-foreground mb-2\">Shopping Cart</h2>\n                <p className=\"text-muted-foreground\">Review your items and place orders</p>\n              </div>\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                {/* Cart Items */}\n                <div className=\"lg:col-span-2\">\n                  {cart.length === 0 ? (\n                    <Card>\n                      <CardContent className=\"p-6 text-center text-muted-foreground\">\n                        <i className=\"fas fa-shopping-cart text-4xl mb-4 opacity-50\"></i>\n                        <p>Your cart is empty</p>\n                        <p className=\"text-sm\">Browse stores to add products</p>\n                      </CardContent>\n                    </Card>\n                  ) : (\n                    <Card>\n                      <div className=\"p-4 border-b border-border\">\n                        <h3 className=\"font-semibold text-foreground\">Cart Items</h3>\n                        <p className=\"text-sm text-muted-foreground\">{cart.length} items</p>\n                      </div>\n                      \n                      <div className=\"p-4 space-y-4\">\n                        {cart.map((item) => (\n                          <div key={item.listingId} className=\"flex items-center space-x-4\" data-testid={`cart-item-${item.listingId}`}>\n                            <img \n                              src={item.imageUrl || 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=60&h=60'} \n                              alt={item.name}\n                              className=\"w-15 h-15 rounded-md object-cover\"\n                            />\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-medium text-foreground\">{item.name}</h4>\n                              <p className=\"text-sm text-muted-foreground\">{item.brand} • {item.size}</p>\n                              <p className=\"text-sm font-medium text-foreground\">₹{item.price} each</p>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <Button \n                                variant=\"outline\" \n                                size=\"sm\"\n                                onClick={() => updateQuantity(item.listingId, Math.max(1, item.qty - 1))}\n                                data-testid={`button-decrease-${item.listingId}`}\n                              >\n                                <i className=\"fas fa-minus text-xs\"></i>\n                              </Button>\n                              <span className=\"w-8 text-center font-medium\" data-testid={`qty-${item.listingId}`}>\n                                {item.qty}\n                              </span>\n                              <Button \n                                variant=\"outline\" \n                                size=\"sm\"\n                                onClick={() => updateQuantity(item.listingId, item.qty + 1)}\n                                data-testid={`button-increase-${item.listingId}`}\n                              >\n                                <i className=\"fas fa-plus text-xs\"></i>\n                              </Button>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"font-semibold text-foreground\">₹{item.price * item.qty}</div>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                onClick={() => removeFromCart(item.listingId)}\n                                className=\"text-destructive hover:text-destructive/80\"\n                                data-testid={`button-remove-${item.listingId}`}\n                              >\n                                <i className=\"fas fa-trash\"></i>\n                              </Button>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </Card>\n                  )}\n                </div>\n\n                {/* Order Summary */}\n                {cart.length > 0 && (\n                  <Card className=\"h-fit\">\n                    <CardContent className=\"p-6\">\n                      <h3 className=\"font-semibold text-foreground mb-4\">Order Summary</h3>\n                      \n                      <div className=\"space-y-3 mb-4\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-muted-foreground\">Subtotal</span>\n                          <span className=\"font-medium text-foreground\" data-testid=\"text-subtotal\">\n                            ₹{getTotalAmount()}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-muted-foreground\">Delivery Fee</span>\n                          <span className=\"font-medium text-foreground\">₹50</span>\n                        </div>\n                        <div className=\"pt-3 border-t border-border flex justify-between\">\n                          <span className=\"font-semibold text-foreground\">Total</span>\n                          <span className=\"font-bold text-foreground\" data-testid=\"text-total\">\n                            ₹{getTotalAmount() + 50}\n                          </span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"mb-4\">\n                        <Label className=\"text-sm font-medium text-foreground\">Delivery Type</Label>\n                        <Select value={deliveryType} onValueChange={setDeliveryType}>\n                          <SelectTrigger className=\"mt-2\" data-testid=\"select-delivery-type\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"DELIVERY\">Delivery</SelectItem>\n                            <SelectItem value=\"PICKUP\">Pickup</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      \n                      <div className=\"mb-6\">\n                        <Label className=\"text-sm font-medium text-foreground\">Special Instructions</Label>\n                        <Textarea \n                          rows={3} \n                          placeholder=\"Add any special notes...\"\n                          value={orderNote}\n                          onChange={(e) => setOrderNote(e.target.value)}\n                          className=\"mt-2 resize-none\"\n                          data-testid=\"textarea-order-note\"\n                        />\n                      </div>\n                      \n                      <Button \n                        onClick={handlePlaceOrder}\n                        className=\"w-full\"\n                        disabled={placeOrderMutation.isPending}\n                        data-testid=\"button-place-order\"\n                      >\n                        <i className=\"fas fa-shopping-cart mr-2\"></i>\n                        {placeOrderMutation.isPending ? 'Placing Order...' : 'Place Order'}\n                      </Button>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* My Orders Section */}\n          {activeSection === 'orders' && (\n            <div>\n              <div className=\"mb-6\">\n                <h2 className=\"text-2xl font-bold text-foreground mb-2\">My Orders</h2>\n                <p className=\"text-muted-foreground\">Track your order status and history</p>\n              </div>\n\n              <div className=\"space-y-4\">\n                {orders.map((order: any) => (\n                  <Card key={order.id} data-testid={`card-order-${order.id}`}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div>\n                          <h4 className=\"font-semibold text-foreground\">#{order.id.slice(-8)}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{order.store.name}</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Placed on {new Date(order.createdAt).toLocaleDateString()}\n                          </p>\n                        </div>\n                        <Badge className={getStatusColor(order.status)} data-testid={`status-${order.id}`}>\n                          {order.status.replace('_', ' ')}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"mb-4\">\n                        {order.items.map((item: any) => (\n                          <div key={item.id} className=\"flex items-center space-x-3 mb-2\">\n                            <img \n                              src={item.listing.product.imageUrl || 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=40&h=40'} \n                              alt={item.listing.product.name}\n                              className=\"w-10 h-10 rounded object-cover\"\n                            />\n                            <div className=\"flex-1\">\n                              <div className=\"font-medium text-foreground\">\n                                {item.listing.product.name} x{item.qty}\n                              </div>\n                              <div className=\"text-sm text-muted-foreground\">₹{item.priceAt} each</div>\n                            </div>\n                            <div className=\"text-right font-medium text-foreground\">\n                              ₹{parseFloat(item.priceAt) * item.qty}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                      \n                      {/* Order Timeline */}\n                      {order.timeline && order.timeline.length > 0 && (\n                        <div className=\"border-t border-border pt-4\">\n                          <h5 className=\"font-medium text-foreground mb-3\">Order Timeline</h5>\n                          <div className=\"space-y-2\">\n                            {order.timeline.slice(0, 3).map((event: any, index: number) => (\n                              <div key={event.id} className=\"flex items-center space-x-3\">\n                                <div className={`w-2 h-2 rounded-full ${index === 0 ? 'bg-primary' : 'bg-muted'}`}></div>\n                                <div className=\"text-sm\">\n                                  <span className=\"font-medium text-foreground\">{event.message}</span>\n                                  <span className=\"text-muted-foreground ml-2\">\n                                    {new Date(event.createdAt).toLocaleDateString()}\n                                  </span>\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                      \n\n                      <div className=\"flex items-center justify-between pt-4 mt-4 border-t border-border\">\n                        <div>\n                          <div className=\"font-semibold text-foreground\">Total: ₹{order.totalAmount}</div>\n                          {order.paymentReceived && (\n                            <div className=\"flex items-center text-green-600 text-sm mt-1\">\n                              <i className=\"fas fa-check-circle mr-2\"></i>\n                              Payment Received: ₹{order.amountReceived || order.totalAmount}\n                              {order.amountReceived !== order.totalAmount && order.originalAmountReceived && (\n                                <span className=\"text-muted-foreground ml-2\">\n                                  (Originally ₹{order.originalAmountReceived})\n                                </span>\n                              )}\n                            </div>\n                          )}\n                          {!order.paymentReceived && ['OUT_FOR_DELIVERY', 'COMPLETED'].includes(order.status) && order.deliveryType === 'DELIVERY' && (\n                            <div className=\"text-orange-600 text-sm mt-1\">\n                              <i className=\"fas fa-clock mr-2\"></i>\n                              Awaiting COD payment confirmation\n                            </div>\n                          )}\n                        </div>\n                        <div className=\"flex space-x-2\">\n                          {order.status === 'PENDING' && (\n                            <Button variant=\"outline\" size=\"sm\" data-testid={`button-cancel-${order.id}`}>\n                              Cancel Order\n                            </Button>\n                          )}\n                          {order.paymentReceived && (\n                            <Dialog open={adjustmentDialogOpen && selectedOrderForAdjustment?.id === order.id} onOpenChange={(open) => {\n                              if (!open) {\n                                setAdjustmentDialogOpen(false);\n                                setSelectedOrderForAdjustment(null);\n                                setAdjustmentAmount('');\n                                setAdjustmentNote('');\n                              }\n                            }}>\n                              <DialogTrigger asChild>\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\" \n                                  onClick={() => {\n                                    setSelectedOrderForAdjustment(order);\n                                    setAdjustmentAmount(order.amountReceived || order.totalAmount);\n                                    setAdjustmentDialogOpen(true);\n                                  }}\n                                  data-testid={`button-adjust-amount-${order.id}`}\n                                >\n                                  <i className=\"fas fa-edit mr-2\"></i>\n                                  Adjust Amount\n                                </Button>\n                              </DialogTrigger>\n                              <DialogContent>\n                                <DialogHeader>\n                                  <DialogTitle>Adjust Payment Amount</DialogTitle>\n                                </DialogHeader>\n                                <div className=\"space-y-4\">\n                                  <div>\n                                    <Label>Current Amount: ₹{order.amountReceived || order.totalAmount}</Label>\n                                  </div>\n                                  <div>\n                                    <Label htmlFor=\"adjustedAmount\">New Amount</Label>\n                                    <Input\n                                      id=\"adjustedAmount\"\n                                      type=\"number\"\n                                      value={adjustmentAmount}\n                                      onChange={(e) => setAdjustmentAmount(e.target.value)}\n                                      placeholder=\"Enter adjusted amount\"\n                                      className=\"mt-2\"\n                                    />\n                                  </div>\n                                  <div>\n                                    <Label htmlFor=\"adjustmentNote\">Reason for Adjustment</Label>\n                                    <Textarea\n                                      id=\"adjustmentNote\"\n                                      value={adjustmentNote}\n                                      onChange={(e) => setAdjustmentNote(e.target.value)}\n                                      placeholder=\"e.g., Discount applied, Tip added, Rounding adjustment\"\n                                      className=\"mt-2\"\n                                    />\n                                  </div>\n                                  <div className=\"flex space-x-2\">\n                                    <Button\n                                      onClick={() => {\n                                        adjustAmountMutation.mutate({\n                                          orderId: order.id,\n                                          adjustedAmount: adjustmentAmount,\n                                          adjustmentNote: adjustmentNote\n                                        });\n                                      }}\n                                      disabled={!adjustmentAmount || adjustAmountMutation.isPending}\n                                      className=\"flex-1\"\n                                    >\n                                      {adjustAmountMutation.isPending ? 'Adjusting...' : 'Confirm Adjustment'}\n                                    </Button>\n                                    <Button variant=\"outline\" onClick={() => setAdjustmentDialogOpen(false)}>\n                                      Cancel\n                                    </Button>\n                                  </div>\n                                </div>\n                              </DialogContent>\n                            </Dialog>\n                          )}\n                          <Button variant=\"secondary\" size=\"sm\" data-testid={`button-track-${order.id}`}>\n                            Track Order\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n                \n                {orders.length === 0 && (\n                  <Card>\n                    <CardContent className=\"p-6 text-center text-muted-foreground\">\n                      <i className=\"fas fa-receipt text-4xl mb-4 opacity-50\"></i>\n                      <p>No orders yet</p>\n                      <p className=\"text-sm\">Start exploring stores to place your first order</p>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Retailer Accounts Section */}\n          {activeSection === 'retailers' && (\n            <div>\n              <div className=\"mb-6\">\n                <h2 className=\"text-2xl font-bold text-foreground mb-2\">Retailer Accounts</h2>\n                <p className=\"text-muted-foreground\">Manage your relationships with all retailers</p>\n              </div>\n\n              {/* Combined Retailer Cards */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n                {stores.map((retailer: any) => {\n                  const balance = retailerBalances.find((b: any) => b.retailerId === retailer.ownerId);\n                  return (\n                    <Card \n                      key={retailer.id}\n                      className=\"hover:shadow-lg transition-all duration-200 border-l-4 border-l-blue-500\"\n                      data-testid={`card-retailer-${retailer.id}`}\n                    >\n                      <CardContent className=\"p-6\">\n                        {/* Header */}\n                        <div className=\"flex items-start justify-between mb-4\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center\">\n                              <i className=\"fas fa-store text-primary-foreground\"></i>\n                            </div>\n                            <div>\n                              <h3 className=\"font-bold text-foreground text-lg\">{retailer.name}</h3>\n                              <p className=\"text-sm text-blue-600 font-medium\">Retailer: {retailer.retailerName || 'Unknown'}</p>\n                              <p className=\"text-xs text-muted-foreground\">Store ID: {retailer.id.slice(-8)}</p>\n                            </div>\n                          </div>\n                          <div className=\"flex flex-col items-end\">\n                            <span className={`w-3 h-3 rounded-full mb-1 ${retailer.isOpen ? 'bg-green-500' : 'bg-red-500'}`}></span>\n                            <span className=\"text-xs text-muted-foreground\">\n                              {retailer.isOpen ? 'Open' : 'Closed'}\n                            </span>\n                          </div>\n                        </div>\n                        \n                        {/* Store Details */}\n                        <div className=\"space-y-3 mb-4\">\n                          <div className=\"flex items-center text-sm text-muted-foreground\">\n                            <i className=\"fas fa-map-marker-alt mr-3 w-4\"></i>\n                            <span>{retailer.address || `${retailer.city}, ${retailer.pincode}`}</span>\n                          </div>\n                          <div className=\"flex items-center text-sm text-muted-foreground\">\n                            <i className=\"fas fa-phone mr-3 w-4\"></i>\n                            <span>{retailer.retailerPhone || retailer.phone || 'Not provided'}</span>\n                          </div>\n                          {retailer.retailerEmail && (\n                            <div className=\"flex items-center text-sm text-muted-foreground\">\n                              <i className=\"fas fa-envelope mr-3 w-4\"></i>\n                              <span>{retailer.retailerEmail}</span>\n                            </div>\n                          )}\n                          <div className=\"flex items-center justify-between text-sm\">\n                            <div className=\"flex items-center text-muted-foreground\">\n                              <i className=\"fas fa-star text-yellow-500 mr-2\"></i>\n                              <span>{retailer.rating ? parseFloat(retailer.rating).toFixed(1) : '4.5'} Rating</span>\n                            </div>\n                            <div className=\"text-foreground font-medium\">\n                              {retailer.listings?.length || 0} Products\n                            </div>\n                          </div>\n                        </div>\n                        \n                        {/* Financial Information */}\n                        {balance ? (\n                          <div className=\"bg-muted/50 rounded-lg p-4 mb-4\">\n                            <h4 className=\"font-semibold text-foreground mb-3 flex items-center gap-2\">\n                              <i className=\"fas fa-wallet\"></i>\n                              Account Balance\n                            </h4>\n                            <div className=\"grid grid-cols-2 gap-3\">\n                              <div className=\"text-center\">\n                                <p className={`font-bold text-lg ${balance.currentBalance >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                                  ₹{Math.abs(balance.currentBalance).toFixed(2)}\n                                </p>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  {balance.currentBalance >= 0 ? 'Credit Balance' : 'Outstanding'}\n                                </p>\n                              </div>\n                              <div className=\"text-center\">\n                                <p className=\"font-medium text-foreground\">\n                                  ₹{balance.totalCredits.toFixed(2)}\n                                </p>\n                                <p className=\"text-xs text-muted-foreground\">Total Credits</p>\n                              </div>\n                            </div>\n                          </div>\n                        ) : (\n                          <div className=\"bg-muted/50 rounded-lg p-4 mb-4 text-center\">\n                            <i className=\"fas fa-chart-line text-muted-foreground mb-2\"></i>\n                            <p className=\"text-sm text-muted-foreground\">No transactions yet</p>\n                          </div>\n                        )}\n                        \n                        {/* Action Buttons */}\n                        <div className=\"flex gap-2\">\n                          <Button \n                            className=\"flex-1\" \n                            onClick={() => setSelectedStore(retailer)}\n                            data-testid={`button-browse-catalog-${retailer.id}`}\n                          >\n                            <i className=\"fas fa-eye mr-2\"></i>\n                            Browse Catalog\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => {\n                              setSearchFilters({ search: '', city: '', pincode: '', name: retailer.name, id: '' });\n                              setActiveSection('explore');\n                            }}\n                            data-testid={`button-view-store-${retailer.id}`}\n                          >\n                            <i className=\"fas fa-external-link-alt\"></i>\n                          </Button>\n                        </div>\n                        \n                        {/* Quick Stats */}\n                        <div className=\"mt-4 pt-4 border-t border-border\">\n                          <div className=\"flex justify-between text-xs text-muted-foreground\">\n                            <span>Owner ID: {retailer.ownerId?.slice(-8)}</span>\n                            <span>Since: {new Date(retailer.createdAt || Date.now()).toLocaleDateString()}</span>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n\n              {/* Empty State */}\n              {stores.length === 0 && (\n                <div className=\"text-center py-12\">\n                  <i className=\"fas fa-store-alt text-6xl text-muted-foreground mb-4\"></i>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Retailers Found</h3>\n                  <p className=\"text-muted-foreground mb-6\">There are no retailers available at the moment.</p>\n                  <Button onClick={() => setActiveSection('explore')}>\n                    <i className=\"fas fa-search mr-2\"></i>\n                    Explore Stores\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Khatabook Section */}\n          {activeSection === 'khatabook' && (\n            <div>\n              <div className=\"mb-6\">\n                <h2 className=\"text-2xl font-bold text-foreground mb-2\">Khatabook</h2>\n                <p className=\"text-muted-foreground\">Track your transaction history and balance</p>\n              </div>\n\n              {/* Overall Summary */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6\">\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Current Balance</p>\n                        <p className=\"text-2xl font-bold text-foreground\">\n                          ₹{ledgerSummary?.currentBalance?.toFixed(2) || '0.00'}\n                        </p>\n                      </div>\n                      <div className=\"bg-blue-100 p-3 rounded-full\">\n                        <i className=\"fas fa-wallet text-blue-600\"></i>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Total Credits</p>\n                        <p className=\"text-2xl font-bold text-green-600\">\n                          ₹{ledgerSummary?.totalCredits ? parseFloat(ledgerSummary.totalCredits).toFixed(2) : '0.00'}\n                        </p>\n                      </div>\n                      <div className=\"bg-green-100 p-3 rounded-full\">\n                        <i className=\"fas fa-arrow-up text-green-600\"></i>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Total Debits</p>\n                        <p className=\"text-2xl font-bold text-red-600\">\n                          ₹{ledgerSummary?.totalDebits ? parseFloat(ledgerSummary.totalDebits).toFixed(2) : '0.00'}\n                        </p>\n                      </div>\n                      <div className=\"bg-red-100 p-3 rounded-full\">\n                        <i className=\"fas fa-arrow-down text-red-600\"></i>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Individual Retailer Balances */}\n              <div className=\"mb-6\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center gap-2\">\n                  <i className=\"fas fa-users text-primary\"></i>\n                  Individual Retailer Balances\n                </h3>\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                  {retailerBalances.length > 0 ? (\n                    retailerBalances.map((retailer: any) => (\n                      <Card key={retailer.retailerId} className=\"hover:shadow-md transition-shadow\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center justify-between mb-3\">\n                            <div className=\"flex items-center gap-3\">\n                              <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n                                <i className=\"fas fa-store text-primary-foreground text-sm\"></i>\n                              </div>\n                              <div>\n                                <h4 className=\"font-medium text-foreground\">{retailer.retailerName}</h4>\n                                <p className=\"text-xs text-muted-foreground\">ID: {retailer.retailerId.slice(-8)}</p>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <p className={`font-semibold ${retailer.currentBalance >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                                ₹{Math.abs(retailer.currentBalance).toFixed(2)}\n                              </p>\n                              <p className=\"text-xs text-muted-foreground\">\n                                {retailer.currentBalance >= 0 ? 'Credit' : 'Debit'}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                            <div>\n                              <p className=\"text-muted-foreground\">Total Credits</p>\n                              <p className=\"font-medium text-green-600\">₹{retailer.totalCredits.toFixed(2)}</p>\n                            </div>\n                            <div>\n                              <p className=\"text-muted-foreground\">Total Debits</p>\n                              <p className=\"font-medium text-red-600\">₹{retailer.totalDebits.toFixed(2)}</p>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))\n                  ) : (\n                    <div className=\"lg:col-span-2 text-center text-muted-foreground py-8\">\n                      <i className=\"fas fa-chart-line text-4xl mb-4\"></i>\n                      <p>No retailer transactions yet</p>\n                      <p className=\"text-sm\">Start placing orders to see retailer balances</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold text-foreground mb-4\">Transaction History</h3>\n                  <div className=\"space-y-3\">\n                    {ledgerEntries?.entries?.map((entry: any) => (\n                      <div key={entry.id} className=\"flex items-center justify-between p-3 border border-border rounded-lg\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className={`w-3 h-3 rounded-full ${entry.entryType === 'CREDIT' ? 'bg-green-600' : 'bg-red-600'}`}></div>\n                          <div>\n                            <div className=\"font-medium text-foreground\">{entry.description}</div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              {new Date(entry.createdAt).toLocaleDateString()} • {entry.transactionType.replace('_', ' ')}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className={`font-semibold ${entry.entryType === 'CREDIT' ? 'text-green-600' : 'text-red-600'}`}>\n                            {entry.entryType === 'CREDIT' ? '+' : '-'}₹{parseFloat(entry.amount).toFixed(2)}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            Bal: ₹{parseFloat(entry.balance).toFixed(2)}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                    {(!ledgerEntries?.entries || ledgerEntries.entries.length === 0) && (\n                      <div className=\"text-center text-muted-foreground py-8\">\n                        No transactions yet. Transactions will appear here when you place orders.\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </main>\n      </div>\n\n\n      <StoreCatalogModal \n        store={selectedStore}\n        isOpen={!!selectedStore}\n        onClose={() => setSelectedStore(null)}\n        onNavigateToCart={() => {\n          setSelectedStore(null);\n          setActiveSection('cart');\n        }}\n      />\n\n      {/* Navigation Sidebar */}\n      <NavigationSidebar\n        isOpen={isNavigationOpen}\n        onClose={() => setIsNavigationOpen(false)}\n        title=\"Navigation\"\n      >\n        <NavigationItem\n          onClick={() => {\n            setActiveSection('explore');\n            setIsNavigationOpen(false);\n          }}\n          active={activeSection === 'explore'}\n          icon=\"fas fa-search\"\n          label=\"Explore Stores\"\n          testId=\"button-nav-explore-navigation\"\n        />\n        <NavigationItem\n          onClick={() => {\n            setActiveSection('cart');\n            setIsNavigationOpen(false);\n          }}\n          active={activeSection === 'cart'}\n          icon=\"fas fa-shopping-cart\"\n          label=\"Cart\"\n          badge={getItemCount()}\n          testId=\"button-nav-cart-navigation\"\n        />\n        <NavigationItem\n          onClick={() => {\n            setActiveSection('orders');\n            setIsNavigationOpen(false);\n          }}\n          active={activeSection === 'orders'}\n          icon=\"fas fa-receipt\"\n          label=\"My Orders\"\n          testId=\"button-nav-orders-navigation\"\n        />\n        <NavigationItem\n          onClick={() => {\n            setActiveSection('retailers');\n            setIsNavigationOpen(false);\n          }}\n          active={activeSection === 'retailers'}\n          icon=\"fas fa-store-alt\"\n          label=\"Retailer Accounts\"\n          testId=\"button-nav-retailers-navigation\"\n        />\n        <NavigationItem\n          onClick={() => {\n            setActiveSection('khatabook');\n            setIsNavigationOpen(false);\n          }}\n          active={activeSection === 'khatabook'}\n          icon=\"fas fa-book\"\n          label=\"Khatabook\"\n          testId=\"button-nav-khatabook-navigation\"\n        />\n      </NavigationSidebar>\n    </div>\n  );\n}\n","size_bytes":62108},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool\n[x] 5. Create PostgreSQL database and push schema \n[x] 6. Create 50 dummy users with valid login credentials\n[x] 7. Create dummy stores, products, listings, orders, and all table data\n[x] 8. Fix login authentication issue - all credentials working\n[x] 9. Database fully populated with test data for all roles\n[x] 10. Migration completed - application running successfully with working authentication\n[x] 11. Fixed database seeding issue and verified demo credentials work\n[x] 12. Added cart redirect button for shop owners when products are added to cart - shows \"View Cart\" button in toast notifications","size_bytes":903},"server/seed-database.ts":{"content":"import { db } from './db.js';\nimport * as schema from '../shared/schema.js';\nimport bcrypt from 'bcrypt';\nimport { nanoid } from 'nanoid';\n\n// CONFIGURATION OPTIONS FOR FUTURE AGENT ENHANCEMENTS\nconst SEED_CONFIG = {\n  // User counts by role\n  ADMIN_COUNT: 10,\n  RETAILER_COUNT: 20,\n  SHOP_OWNER_COUNT: 20,\n  DELIVERY_BOY_COUNT: 15,\n  \n  // Business data counts\n  STORE_COUNT: 21,\n  PRODUCT_COUNT: 50,\n  LISTINGS_PER_STORE: 10,\n  ORDERS_COUNT: 50,\n  ITEMS_PER_ORDER: 3,\n  \n  // Settings\n  CLEAR_EXISTING_DATA: true,\n  CREATE_TEST_USERS: true,\n  SEED_REALISTIC_DATA: true,\n  \n  // Test credentials (easily modifiable for future requirements)\n  TEST_USERS: [\n    { email: 'admin@test.com', password: 'admin123', role: 'ADMIN' as const, fullName: 'Test Admin' },\n    { email: 'retailer@test.com', password: 'retailer123', role: 'RETAILER' as const, fullName: 'Test Retailer' },\n    { email: 'shop@test.com', password: 'shop123', role: 'SHOP_OWNER' as const, fullName: 'Test Shop Owner' },\n    { email: 'delivery@test.com', password: 'delivery123', role: 'DELIVERY_BOY' as const, fullName: 'Test Delivery Boy' },\n  ]\n};\n\n// Helper function to generate random data\nconst getRandomElement = <T>(arr: T[]): T => arr[Math.floor(Math.random() * arr.length)];\nconst getRandomInt = (min: number, max: number): number => Math.floor(Math.random() * (max - min + 1)) + min;\nconst getRandomDecimal = (min: number, max: number): string => (Math.random() * (max - min) + min).toFixed(2);\n\n// Sample data arrays\nconst firstNames = ['John', 'Jane', 'Michael', 'Sarah', 'David', 'Emma', 'Robert', 'Emily', 'James', 'Lisa', 'William', 'Jessica', 'Richard', 'Ashley', 'Joseph', 'Amanda', 'Thomas', 'Jennifer', 'Christopher', 'Michelle', 'Daniel', 'Kimberly', 'Matthew', 'Amy', 'Anthony'];\nconst lastNames = ['Smith', 'Johnson', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall', 'Allen'];\nconst cities = ['Mumbai', 'Delhi', 'Bangalore', 'Hyderabad', 'Chennai', 'Kolkata', 'Pune', 'Ahmedabad', 'Jaipur', 'Surat', 'Lucknow', 'Kanpur', 'Nagpur', 'Indore', 'Thane', 'Bhopal', 'Visakhapatnam', 'Pimpri', 'Patna', 'Vadodara'];\nconst storeNames = ['Super Mart', 'Quick Store', 'Daily Needs', 'Fresh Market', 'City Store', 'Local Bazaar', 'Corner Shop', 'Express Mart', 'Prime Store', 'Elite Shop', 'Metro Mart', 'Urban Store', 'Classic Shop', 'Royal Market', 'Golden Store', 'Silver Shop', 'Diamond Mart', 'Platinum Store', 'Crystal Shop', 'Pearl Market'];\nconst productNames = ['Rice', 'Wheat Flour', 'Sugar', 'Salt', 'Cooking Oil', 'Basmati Rice', 'Lentils', 'Chickpeas', 'Tea', 'Coffee', 'Milk', 'Bread', 'Eggs', 'Onions', 'Potatoes', 'Tomatoes', 'Apples', 'Bananas', 'Oranges', 'Mangoes', 'Chicken', 'Mutton', 'Fish', 'Paneer', 'Yogurt'];\nconst brands = ['Tata', 'Amul', 'Patanjali', 'Fortune', 'Aashirvaad', 'Saffola', 'Maggi', 'Nestle', 'Britannia', 'Parle', 'ITC', 'Dabur', 'Himalaya', 'Godrej', 'Unilever', 'P&G', 'Colgate', 'Pepsico', 'Coca Cola', 'Cadbury'];\nconst units = ['kg', 'piece', 'box', 'liter', 'packet', 'bag', 'bottle', 'can', 'jar', 'pouch'];\nconst sizes = ['500g', '1kg', '2kg', '5kg', '250ml', '500ml', '1L', '2L', '12pcs', '24pcs', '6pcs'];\n\n/**\n * UTILITY FUNCTIONS FOR FUTURE AGENT ENHANCEMENTS\n * These functions can be reused and extended for new requirements\n */\n\n// Clear all existing data (useful for fresh starts)\nasync function clearExistingData() {\n  console.log('🧹 Clearing existing data...');\n  await db.delete(schema.orderEvents);\n  await db.delete(schema.orderItems);\n  await db.delete(schema.orders);\n  await db.delete(schema.khatabook);\n  await db.delete(schema.paymentAuditTrail);\n  await db.delete(schema.fcmTokens);\n  await db.delete(schema.retailerDeliveryBoys);\n  await db.delete(schema.listings);\n  await db.delete(schema.productCatalog);\n  await db.delete(schema.stores);\n  await db.delete(schema.users);\n  console.log('✅ Existing data cleared');\n}\n\n// Create user with role-specific defaults\nasync function createUser(userData: {\n  email: string;\n  password: string;\n  role: 'ADMIN' | 'RETAILER' | 'SHOP_OWNER' | 'DELIVERY_BOY';\n  fullName: string;\n  phone?: string;\n}) {\n  const hashedPassword = await bcrypt.hash(userData.password, 10);\n  const [user] = await db.insert(schema.users).values({\n    id: nanoid(),\n    email: userData.email,\n    passwordHash: hashedPassword,\n    role: userData.role,\n    fullName: userData.fullName,\n    phone: userData.phone || `+91${getRandomInt(7000000000, 9999999999)}`,\n  }).returning();\n  return user;\n}\n\n// Create store for a retailer\nasync function createStore(ownerId: string, storeName?: string) {\n  const name = storeName || getRandomElement(storeNames);\n  const [store] = await db.insert(schema.stores).values({\n    ownerId,\n    name,\n    description: `${name} - Your neighborhood store for daily essentials`,\n    address: `${getRandomInt(1, 999)} ${getRandomElement(['Main Street', 'Park Avenue', 'Market Road', 'Commercial Complex'])}, ${getRandomElement(cities)}`,\n    city: getRandomElement(cities),\n    pincode: `${getRandomInt(100000, 999999)}`,\n    logoUrl: `https://via.placeholder.com/200x200?text=Store`,\n    isOpen: Math.random() > 0.1,\n    rating: getRandomDecimal(3.5, 5.0),\n  }).returning();\n  return store;\n}\n\n// Create product in global catalog\nasync function createProduct(productData?: Partial<typeof schema.productCatalog.$inferInsert>) {\n  const defaultProduct = {\n    name: getRandomElement(productNames),\n    brand: getRandomElement(brands),\n    unit: getRandomElement(units),\n    size: getRandomElement(sizes),\n    imageUrl: `https://via.placeholder.com/300x300?text=Product`,\n    isWholesale: Math.random() > 0.7,\n  };\n  \n  const [product] = await db.insert(schema.productCatalog).values({\n    ...defaultProduct,\n    ...productData,\n  }).returning();\n  return product;\n}\n\nasync function seedDatabase(config = SEED_CONFIG) {\n  console.log('🌱 Starting database seeding...');\n  console.log('📋 Configuration:', JSON.stringify(config, null, 2));\n  \n  try {\n    // Clear existing data if configured\n    if (config.CLEAR_EXISTING_DATA) {\n      await clearExistingData();\n    }\n    // 1. Create Users (including test credentials)\n    console.log('Creating users...');\n    const users = [];\n    \n    // Create test users with known passwords\n    if (config.CREATE_TEST_USERS) {\n      for (const testUser of config.TEST_USERS) {\n        const user = await createUser(testUser);\n        users.push(user);\n        console.log(`✅ Created test user: ${testUser.email} (password: ${testUser.password})`);\n      }\n    }\n\n    // Create additional users based on configuration\n    if (config.SEED_REALISTIC_DATA) {\n      const totalUsers = config.ADMIN_COUNT + config.RETAILER_COUNT + config.SHOP_OWNER_COUNT + config.DELIVERY_BOY_COUNT;\n      const testUserCount = config.CREATE_TEST_USERS ? config.TEST_USERS.length : 0;\n      \n      for (let i = 0; i < totalUsers - testUserCount; i++) {\n        const firstName = getRandomElement(firstNames);\n        const lastName = getRandomElement(lastNames);\n        let role: 'ADMIN' | 'RETAILER' | 'SHOP_OWNER' | 'DELIVERY_BOY';\n        \n        if (i < config.ADMIN_COUNT - (config.TEST_USERS.filter(u => u.role === 'ADMIN').length)) {\n          role = 'ADMIN';\n        } else if (i < config.ADMIN_COUNT + config.RETAILER_COUNT - (config.TEST_USERS.filter(u => u.role === 'RETAILER').length)) {\n          role = 'RETAILER';\n        } else if (i < config.ADMIN_COUNT + config.RETAILER_COUNT + config.SHOP_OWNER_COUNT - (config.TEST_USERS.filter(u => u.role === 'SHOP_OWNER').length)) {\n          role = 'SHOP_OWNER';\n        } else {\n          role = 'DELIVERY_BOY';\n        }\n\n        const user = await createUser({\n          email: `${firstName.toLowerCase()}.${lastName.toLowerCase()}${i}@example.com`,\n          password: 'password123',\n          role,\n          fullName: `${firstName} ${lastName}`,\n        });\n        users.push(user);\n      }\n    }\n    console.log(`✅ Created ${users.length} users`);\n\n    const adminUsers = users.filter(u => u.role === 'ADMIN');\n    const retailerUsers = users.filter(u => u.role === 'RETAILER');\n    const shopOwnerUsers = users.filter(u => u.role === 'SHOP_OWNER');\n\n    // 2. Create Stores (one per retailer - retailers manage stores)\n    console.log('Creating stores...');\n    const stores = [];\n    for (let i = 0; i < retailerUsers.length; i++) {\n      const owner = retailerUsers[i];\n      const [store] = await db.insert(schema.stores).values({\n        ownerId: owner.id,\n        name: `${getRandomElement(storeNames)} ${i + 1}`,\n        description: `A well-stocked store providing quality products for daily needs.`,\n        address: `${getRandomInt(1, 999)}, ${getRandomElement(['Main Road', 'Market Street', 'Gandhi Road', 'Station Road', 'Park Street'])}`,\n        city: getRandomElement(cities),\n        pincode: `${getRandomInt(100000, 999999)}`,\n        logoUrl: `https://via.placeholder.com/200x200?text=Store${i + 1}`,\n        isOpen: Math.random() > 0.1,\n        rating: getRandomDecimal(3.5, 5.0),\n      }).returning();\n      stores.push(store);\n    }\n    console.log(`✅ Created ${stores.length} stores`);\n\n    // 3. Create 50 Product Catalog entries\n    console.log('Creating product catalog...');\n    const products = [];\n    for (let i = 0; i < 50; i++) {\n      const [product] = await db.insert(schema.productCatalog).values({\n        name: `${getRandomElement(productNames)} ${i + 1}`,\n        brand: getRandomElement(brands),\n        imageUrl: `https://via.placeholder.com/300x300?text=Product${i + 1}`,\n        unit: getRandomElement(units),\n        size: getRandomElement(sizes),\n        isWholesale: Math.random() > 0.7,\n        createdById: getRandomElement(adminUsers).id,\n      }).returning();\n      products.push(product);\n    }\n    console.log(`✅ Created ${products.length} products`);\n\n    // 4. Create Listings (10-15 per store to reach good coverage)  \n    console.log('Creating listings...');\n    const listings = [];\n    const totalListings = Math.max(200, stores.length * 10);\n    for (let i = 0; i < totalListings; i++) {\n      const store = getRandomElement(stores);\n      const product = getRandomElement(products);\n      const retailPrice = getRandomDecimal(10, 500);\n      const [listing] = await db.insert(schema.listings).values({\n        storeId: store.id,\n        productId: product.id,\n        priceRetail: retailPrice,\n        priceWholesale: product.isWholesale ? getRandomDecimal(8, parseFloat(retailPrice) * 0.9) : null,\n        available: Math.random() > 0.1,\n        stockQty: getRandomInt(0, 1000),\n        sku: `SKU-${store.id.slice(-6)}-${product.id.slice(-6)}-${i}`,\n      }).returning();\n      listings.push(listing);\n    }\n    console.log(`✅ Created ${listings.length} listings`);\n\n    // 5. Create 50 Orders\n    console.log('Creating orders...');\n    const orders = [];\n    for (let i = 0; i < 50; i++) {\n      const store = getRandomElement(stores);\n      const retailer = getRandomElement(retailerUsers);\n      const totalAmount = getRandomDecimal(100, 5000);\n      const isPartialPayment = Math.random() > 0.7;\n      const [order] = await db.insert(schema.orders).values({\n        ownerId: store.ownerId,\n        retailerId: retailer.id,\n        storeId: store.id,\n        status: getRandomElement(['PENDING', 'ACCEPTED', 'REJECTED', 'READY', 'OUT_FOR_DELIVERY', 'COMPLETED', 'CANCELLED']),\n        totalAmount,\n        deliveryType: getRandomElement(['PICKUP', 'DELIVERY']),\n        deliveryAt: new Date(Date.now() + getRandomInt(1, 7) * 24 * 60 * 60 * 1000),\n        note: `Order note ${i + 1}`,\n        paymentReceived: Math.random() > 0.3,\n        amountReceived: isPartialPayment ? getRandomDecimal(50, parseFloat(totalAmount) * 0.8) : totalAmount,\n        originalAmountReceived: totalAmount,\n        remainingBalance: isPartialPayment ? getRandomDecimal(20, parseFloat(totalAmount) * 0.5) : '0',\n        isPartialPayment,\n        paymentReceivedAt: Math.random() > 0.5 ? new Date() : null,\n      }).returning();\n      orders.push(order);\n    }\n    console.log(`✅ Created ${orders.length} orders`);\n\n    // 6. Create Order Items (2-5 items per order)\n    console.log('Creating order items...');\n    const orderItems = [];\n    for (const order of orders) {\n      const itemCount = getRandomInt(2, 5);\n      const storeListings = listings.filter(l => l.storeId === order.storeId);\n      \n      for (let i = 0; i < itemCount && storeListings.length > 0; i++) {\n        const listing = getRandomElement(storeListings);\n        const [orderItem] = await db.insert(schema.orderItems).values({\n          orderId: order.id,\n          listingId: listing.id,\n          qty: getRandomInt(1, 10),\n          priceAt: listing.priceRetail,\n        }).returning();\n        orderItems.push(orderItem);\n      }\n    }\n    console.log(`✅ Created ${orderItems.length} order items`);\n\n    // 7. Create Order Events\n    console.log('Creating order events...');\n    const orderEvents = [];\n    for (let i = 0; i < 100; i++) {\n      const order = getRandomElement(orders);\n      const [event] = await db.insert(schema.orderEvents).values({\n        orderId: order.id,\n        type: getRandomElement(['ORDER_PLACED', 'ORDER_ACCEPTED', 'ORDER_READY', 'OUT_FOR_DELIVERY', 'DELIVERED']),\n        message: `Order event message ${i + 1}`,\n      }).returning();\n      orderEvents.push(event);\n    }\n    console.log(`✅ Created ${orderEvents.length} order events`);\n\n    // 8. Create FCM Tokens\n    console.log('Creating FCM tokens...');\n    const fcmTokens = [];\n    for (let i = 0; i < 75; i++) {\n      const user = getRandomElement(users);\n      const [token] = await db.insert(schema.fcmTokens).values({\n        userId: user.id,\n        token: `fcm_token_${nanoid(20)}_${i}`,\n      }).returning();\n      fcmTokens.push(token);\n    }\n    console.log(`✅ Created ${fcmTokens.length} FCM tokens`);\n\n    // 9. Create Khatabook entries\n    console.log('Creating khatabook entries...');\n    const khatabookEntries = [];\n    for (let i = 0; i < 100; i++) {\n      const user = getRandomElement([...retailerUsers, ...shopOwnerUsers]);\n      const counterparty = getRandomElement(users.filter(u => u.id !== user.id));\n      const amount = getRandomDecimal(100, 10000);\n      const [entry] = await db.insert(schema.khatabook).values({\n        userId: user.id,\n        counterpartyId: counterparty.id,\n        orderId: Math.random() > 0.5 ? getRandomElement(orders).id : null,\n        entryType: getRandomElement(['CREDIT', 'DEBIT']),\n        transactionType: getRandomElement(['ORDER_PLACED', 'ORDER_DEBIT', 'PAYMENT_RECEIVED', 'PAYMENT_CREDIT', 'BALANCE_CLEAR_CREDIT', 'PAYMENT_ADJUSTED', 'ADJUSTMENT', 'REFUND', 'COMMISSION']),\n        amount,\n        balance: getRandomDecimal(0, 50000),\n        description: `Khatabook entry ${i + 1}`,\n        referenceId: nanoid(10),\n        metadata: JSON.stringify({ note: `Metadata for entry ${i + 1}` }),\n      }).returning();\n      khatabookEntries.push(entry);\n    }\n    console.log(`✅ Created ${khatabookEntries.length} khatabook entries`);\n\n    // 10. Create Payment Audit Trail\n    console.log('Creating payment audit trail...');\n    const auditEntries = [];\n    for (let i = 0; i < 75; i++) {\n      const order = getRandomElement(orders);\n      const user = getRandomElement(users);\n      const [audit] = await db.insert(schema.paymentAuditTrail).values({\n        orderId: order.id,\n        userId: user.id,\n        action: getRandomElement(['PAYMENT_RECEIVED', 'AMOUNT_ADJUSTED', 'BALANCE_SETTLED']),\n        oldAmount: getRandomDecimal(100, 1000),\n        newAmount: getRandomDecimal(100, 1000),\n        reason: `Audit reason ${i + 1}`,\n        metadata: JSON.stringify({ auditNote: `Audit metadata ${i + 1}` }),\n      }).returning();\n      auditEntries.push(audit);\n    }\n    console.log(`✅ Created ${auditEntries.length} payment audit entries`);\n\n    // 11. Create Retailer-Delivery Boy relationships\n    console.log('Creating retailer-delivery boy relationships...');\n    const deliveryBoyRelationships = [];\n    const deliveryBoyUsers = users.filter(u => u.role === 'DELIVERY_BOY');\n    for (let i = 0; i < Math.min(50, retailerUsers.length * 2); i++) {\n      const retailer = getRandomElement(retailerUsers);\n      const deliveryBoy = getRandomElement(deliveryBoyUsers);\n      const [relationship] = await db.insert(schema.retailerDeliveryBoys).values({\n        retailerId: retailer.id,\n        deliveryBoyId: deliveryBoy.id,\n        addedBy: retailer.id,\n        status: 'ACTIVE',\n        notes: `Delivery boy ${i + 1} assigned to retailer`,\n      }).returning();\n      deliveryBoyRelationships.push(relationship);\n    }\n    console.log(`✅ Created ${deliveryBoyRelationships.length} retailer-delivery boy relationships`);\n\n    console.log(`\n🎉 Database seeded successfully!\n\n📊 Summary:\n• Users: ${users.length}\n• Stores: ${stores.length}  \n• Products: ${products.length}\n• Listings: ${listings.length}\n• Orders: ${orders.length}\n• Order Items: ${orderItems.length}\n• Order Events: ${orderEvents.length}\n• FCM Tokens: ${fcmTokens.length}\n• Khatabook Entries: ${khatabookEntries.length}\n• Payment Audits: ${auditEntries.length}\n• Delivery Boy Relationships: ${deliveryBoyRelationships.length}\n\n🔐 Test Login Credentials:\n• Admin: admin@test.com / admin123\n• Retailer: retailer@test.com / retailer123  \n• Shop Owner: shop@test.com / shop123\n• Delivery Boy: delivery@test.com / delivery123\n• Others: [name].[surname][number]@example.com / password123\n    `);\n\n  } catch (error) {\n    console.error('❌ Error seeding database:', error);\n    throw error;\n  }\n}\n\n// Run the seeding\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seedDatabase()\n    .then(() => process.exit(0))\n    .catch(() => process.exit(1));\n}\n\nexport { seedDatabase };","size_bytes":17932},"client/src/components/enhanced-khatabook.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\n\nexport default function EnhancedKhatabook() {\n  const [selectedShopOwner, setSelectedShopOwner] = useState<string | null>(null);\n  const [showAllBalances, setShowAllBalances] = useState(false);\n  const [showAllTransactions, setShowAllTransactions] = useState(false);\n\n  // Fetch individual shop owner balances\n  const { data: balanceData, isLoading } = useQuery({\n    queryKey: ['/api/retailer/shop-owner-balances'],\n    queryFn: async () => {\n      const response = await fetch('/api/retailer/shop-owner-balances', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        }\n      });\n      if (!response.ok) throw new Error('Failed to fetch shop owner balances');\n      return response.json();\n    }\n  });\n\n  const allShopOwnerBalances = balanceData?.shopOwnerBalances || [];\n  // Sort by current balance (highest first) and show top 5 unless showing all\n  const sortedBalances = allShopOwnerBalances.sort((a: any, b: any) => b.currentBalance - a.currentBalance);\n  const shopOwnerBalances = showAllBalances ? sortedBalances : sortedBalances.slice(0, 5);\n  const totals = balanceData?.totals || { currentBalance: 0, totalCredits: 0, totalDebits: 0 };\n\n  const selectedShopOwnerData = shopOwnerBalances.find(\n    (balance: any) => balance.shopOwnerId === selectedShopOwner\n  );\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(amount);\n  };\n\n  const formatDate = (date: string) => {\n    return new Date(date).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-48 mb-4\"></div>\n          <div className=\"space-y-4\">\n            {Array.from({ length: 3 }).map((_, i) => (\n              <div key={i} className=\"h-24 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-2xl font-bold text-foreground\">Khatabook - Individual Balances</h2>\n        <p className=\"text-muted-foreground\">Track payment balances with each shop owner</p>\n      </div>\n\n      {/* Overall Summary */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <i className=\"fas fa-chart-line text-primary\"></i>\n            Overall Summary\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"text-center p-4 bg-muted/50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-foreground\">{formatCurrency(totals.currentBalance)}</div>\n              <div className=\"text-sm text-muted-foreground\">Current Balance</div>\n            </div>\n            <div className=\"text-center p-4 bg-green-50 dark:bg-green-950 rounded-lg\">\n              <div className=\"text-2xl font-bold text-green-600\">{formatCurrency(totals.totalCredits)}</div>\n              <div className=\"text-sm text-muted-foreground\">Total Credits</div>\n            </div>\n            <div className=\"text-center p-4 bg-red-50 dark:bg-red-950 rounded-lg\">\n              <div className=\"text-2xl font-bold text-red-600\">{formatCurrency(totals.totalDebits)}</div>\n              <div className=\"text-sm text-muted-foreground\">Total Debits</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Shop Owner List */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"font-semibold text-lg\">Shop Owner Balances</h3>\n            <span className=\"text-sm text-muted-foreground\">\n              {showAllBalances ? `Showing all ${allShopOwnerBalances.length}` : `Top 5 of ${allShopOwnerBalances.length}`}\n            </span>\n          </div>\n          \n          {shopOwnerBalances.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-6 text-center text-muted-foreground\">\n                No shop owner transactions yet. Balances will appear here when customers place orders.\n              </CardContent>\n            </Card>\n          ) : (\n            <>\n              {shopOwnerBalances.map((balance: any, index: number) => (\n                <Card \n                  key={balance.shopOwnerId} \n                  className={`cursor-pointer transition-colors hover:bg-muted/50 ${\n                    selectedShopOwner === balance.shopOwnerId ? 'ring-2 ring-primary' : ''\n                  }`}\n                  onClick={() => setSelectedShopOwner(balance.shopOwnerId)}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"relative\">\n                          <Avatar>\n                            <AvatarFallback>\n                              {balance.shopOwnerName?.charAt(0) || 'S'}\n                            </AvatarFallback>\n                          </Avatar>\n                          {!showAllBalances && index < 3 && (\n                            <div className={`absolute -top-1 -right-1 w-5 h-5 rounded-full text-xs flex items-center justify-center font-bold ${\n                              index === 0 ? 'bg-yellow-400 text-yellow-900' :\n                              index === 1 ? 'bg-gray-400 text-gray-900' :\n                              'bg-orange-400 text-orange-900'\n                            }`}>\n                              {index + 1}\n                            </div>\n                          )}\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium\">{balance.shopOwnerName}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{balance.shopOwnerEmail}</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className={`font-semibold ${\n                          balance.currentBalance > 0 ? 'text-green-600' : \n                          balance.currentBalance < 0 ? 'text-red-600' : \n                          'text-muted-foreground'\n                        }`}>\n                          {formatCurrency(balance.currentBalance)}\n                        </div>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {balance.recentEntries?.length || 0} entries\n                        </Badge>\n                      </div>\n                    </div>\n                    \n                    <div className=\"mt-3 grid grid-cols-2 gap-4 text-sm\">\n                      <div className=\"text-green-600\">\n                        Credits: {formatCurrency(balance.totalCredits)}\n                      </div>\n                      <div className=\"text-red-600\">\n                        Debits: {formatCurrency(balance.totalDebits)}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n              \n              {/* Show More/Less Button for Balances */}\n              {allShopOwnerBalances.length > 5 && (\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full\"\n                  onClick={() => setShowAllBalances(!showAllBalances)}\n                >\n                  <i className={`fas ${showAllBalances ? 'fa-chevron-up' : 'fa-chevron-down'} mr-2`}></i>\n                  {showAllBalances ? 'Show Less' : `Show ${allShopOwnerBalances.length - 5} More`}\n                </Button>\n              )}\n            </>\n          )}\n        </div>\n\n        {/* Detailed View */}\n        <div className=\"space-y-4\">\n          <h3 className=\"font-semibold text-lg\">Transaction Details</h3>\n          \n          {selectedShopOwnerData ? (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span>{selectedShopOwnerData.shopOwnerName}</span>\n                  <Badge variant={selectedShopOwnerData.currentBalance >= 0 ? \"default\" : \"destructive\"}>\n                    {formatCurrency(selectedShopOwnerData.currentBalance)}\n                  </Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div className=\"p-3 bg-green-50 dark:bg-green-950 rounded\">\n                      <div className=\"text-green-600 font-semibold\">{formatCurrency(selectedShopOwnerData.totalCredits)}</div>\n                      <div className=\"text-muted-foreground\">Total Credits</div>\n                    </div>\n                    <div className=\"p-3 bg-red-50 dark:bg-red-950 rounded\">\n                      <div className=\"text-red-600 font-semibold\">{formatCurrency(selectedShopOwnerData.totalDebits)}</div>\n                      <div className=\"text-muted-foreground\">Total Debits</div>\n                    </div>\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div>\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h4 className=\"font-medium\">Recent Transactions</h4>\n                      <span className=\"text-sm text-muted-foreground\">\n                        {showAllTransactions ? 'All transactions' : 'Recent 5 transactions'}\n                      </span>\n                    </div>\n                    {selectedShopOwnerData.recentEntries?.length === 0 ? (\n                      <div className=\"text-muted-foreground text-sm\">No transactions yet</div>\n                    ) : (\n                      <>\n                        <div className=\"space-y-2\">\n                          {(showAllTransactions \n                            ? selectedShopOwnerData.recentEntries \n                            : selectedShopOwnerData.recentEntries?.slice(0, 5)\n                          )?.map((entry: any) => (\n                            <div key={entry.id} className=\"flex items-center justify-between py-2 border-b\">\n                              <div>\n                                <div className=\"text-sm font-medium\">{entry.description}</div>\n                                <div className=\"text-xs text-muted-foreground\">\n                                  {formatDate(entry.createdAt)} • {entry.transactionType}\n                                </div>\n                              </div>\n                              <div className={`font-semibold ${\n                                entry.entryType === 'CREDIT' ? 'text-green-600' : 'text-red-600'\n                              }`}>\n                                {entry.entryType === 'CREDIT' ? '+' : '-'}{formatCurrency(entry.amount)}\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                        \n                        {/* Show More/Less Button for Transactions */}\n                        {selectedShopOwnerData.recentEntries?.length > 5 && (\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            className=\"w-full mt-3\"\n                            onClick={() => setShowAllTransactions(!showAllTransactions)}\n                          >\n                            <i className={`fas ${showAllTransactions ? 'fa-chevron-up' : 'fa-chevron-down'} mr-2`}></i>\n                            {showAllTransactions ? 'Show Less' : `Show ${selectedShopOwnerData.recentEntries.length - 5} More`}\n                          </Button>\n                        )}\n                      </>\n                    )}\n                  </div>\n                  \n                  <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                    <i className=\"fas fa-download mr-2\"></i>\n                    Export Statement\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            <Card>\n              <CardContent className=\"p-6 text-center text-muted-foreground\">\n                Select a shop owner from the list to view detailed transaction history\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13160},"client/src/components/modals/add-from-catalog-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AddFromCatalogModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  storeId: string;\n}\n\nexport default function AddFromCatalogModal({ isOpen, onClose, storeId }: AddFromCatalogModalProps) {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedProduct, setSelectedProduct] = useState<any>(null);\n  const [activeTab, setActiveTab] = useState('search');\n  const [listingData, setListingData] = useState({\n    priceRetail: '',\n    priceWholesale: '',\n    stockQty: '',\n    available: true\n  });\n  \n  const { toast } = useToast();\n\n  // Fetch global catalog products\n  const { data: products = [], isLoading } = useQuery({\n    queryKey: ['/api/retailer/catalog', searchQuery],\n    queryFn: async () => {\n      const response = await fetch(`/api/retailer/catalog?search=${searchQuery}&limit=50`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        }\n      });\n      if (!response.ok) throw new Error('Failed to fetch products');\n      return response.json();\n    },\n    enabled: isOpen\n  });\n\n  // Fetch retailer's previous products (products they used to sell)\n  const { data: previousProducts = [] } = useQuery({\n    queryKey: ['/api/retailer/previous-products'],\n    queryFn: async () => {\n      const response = await fetch('/api/retailer/listings', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        }\n      });\n      if (response.ok) {\n        const listings = await response.json();\n        return listings.map((listing: any) => listing.product);\n      }\n      return [];\n    },\n    enabled: isOpen\n  });\n\n  const createListingMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest('POST', '/api/retailer/listings', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/retailer/listings'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/retailer/previous-products'] });\n      toast({ \n        title: \"✅ Product Added to Inventory\", \n        description: \"Product added with default pricing. You can edit quantity and price in Inventory section.\" \n      });\n      setSelectedProduct(null);\n      setListingData({\n        priceRetail: '',\n        priceWholesale: '',\n        stockQty: '',\n        available: true\n      });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to add product to store\", \n        description: error.response?.data?.message || \"Please try again\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const handleClose = () => {\n    setSelectedProduct(null);\n    setSearchQuery('');\n    setActiveTab('search');\n    setListingData({\n      priceRetail: '',\n      priceWholesale: '',\n      stockQty: '',\n      available: true\n    });\n    onClose();\n  };\n\n  const handleQuickAdd = (product: any) => {\n    // Directly add to inventory with default values\n    const defaultListingData = {\n      storeId,\n      productId: product.id,\n      priceRetail: 50, // Default retail price\n      priceWholesale: product.isWholesale ? 40 : null,\n      stockQty: 10, // Default stock\n      available: true\n    };\n    \n    createListingMutation.mutate(defaultListingData);\n  };\n\n  const handleProductSelect = (product: any) => {\n    setSelectedProduct(product);\n  };\n\n  const handleAddListing = () => {\n    if (!selectedProduct) {\n      toast({ title: \"Please select a product\", variant: \"destructive\" });\n      return;\n    }\n\n    if (!listingData.priceRetail || !listingData.stockQty) {\n      toast({ title: \"Please fill in all required fields\", variant: \"destructive\" });\n      return;\n    }\n\n    createListingMutation.mutate({\n      storeId,\n      productId: selectedProduct.id,\n      priceRetail: parseFloat(listingData.priceRetail),\n      priceWholesale: listingData.priceWholesale ? parseFloat(listingData.priceWholesale) : null,\n      stockQty: parseInt(listingData.stockQty),\n      available: listingData.available\n    });\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden w-[95vw] sm:w-full\">\n        <DialogHeader>\n          <DialogTitle className=\"text-lg sm:text-xl\">Add Products to Your Store</DialogTitle>\n        </DialogHeader>\n        \n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"flex flex-col h-[75vh] sm:h-[70vh]\">\n          <TabsList className=\"grid w-full grid-cols-2 mb-2\">\n            <TabsTrigger value=\"search\" className=\"text-xs sm:text-sm\">Search Catalog</TabsTrigger>\n            <TabsTrigger value=\"previous\" className=\"text-xs sm:text-sm\">My Usual Products ({previousProducts.length})</TabsTrigger>\n          </TabsList>\n          \n          <div className=\"flex flex-col lg:flex-row gap-4 lg:gap-6 flex-1 mt-2\">\n            <TabsContent value=\"search\" className=\"flex-1 mt-0 lg:flex-initial lg:w-3/5\">\n              <div className=\"mb-3\">\n                <Label htmlFor=\"search\" className=\"text-sm font-medium\">Search Products by Name</Label>\n                <Input\n                  id=\"search\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Type product name to search...\"\n                  className=\"mt-1\"\n                />\n              </div>\n              \n              <div className=\"space-y-2 overflow-y-auto h-[40vh] lg:h-full\">\n                {isLoading ? (\n                  <div className=\"text-center py-6 text-muted-foreground\">\n                    <i className=\"fas fa-spinner fa-spin text-xl sm:text-2xl mb-2\"></i>\n                    <br />Loading products...\n                  </div>\n                ) : products.length === 0 ? (\n                  <div className=\"text-center py-6 text-muted-foreground\">\n                    <i className=\"fas fa-search text-2xl sm:text-3xl mb-3\"></i>\n                    <br />\n                    <span className=\"text-sm sm:text-base\">\n                      {searchQuery ? 'No products found for your search' : 'Start typing to search products'}\n                    </span>\n                  </div>\n                ) : (\n                  products.map((product: any) => (\n                    <Card \n                      key={product.id} \n                      className={`cursor-pointer transition-colors hover:bg-muted/50 ${\n                        selectedProduct?.id === product.id ? 'ring-2 ring-primary' : ''\n                      }`}\n                      onClick={() => handleProductSelect(product)}\n                    >\n                      <CardContent className=\"p-3\">\n                        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3\">\n                          <div className=\"flex items-center gap-3\">\n                            <img \n                              src={product.imageUrl || 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=60&h=60'} \n                              alt={product.name}\n                              className=\"w-10 h-10 sm:w-12 sm:h-12 rounded object-cover flex-shrink-0\"\n                            />\n                            <div className=\"flex-1 min-w-0\">\n                              <h4 className=\"font-medium text-sm sm:text-base truncate\">{product.name}</h4>\n                              <p className=\"text-xs sm:text-sm text-muted-foreground\">{product.brand} • {product.size}</p>\n                              <div className=\"flex items-center gap-1 sm:gap-2 mt-1 flex-wrap\">\n                                <Badge variant=\"outline\" className=\"text-xs\">{product.unit}</Badge>\n                                {product.isWholesale && <Badge className=\"text-xs\">Wholesale</Badge>}\n                              </div>\n                            </div>\n                          </div>\n                          <Button\n                            size=\"sm\"\n                            variant=\"default\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              handleQuickAdd(product);\n                            }}\n                            className=\"w-full sm:w-auto sm:ml-4 text-xs sm:text-sm\"\n                          >\n                            <i className=\"fas fa-plus mr-1\"></i>\n                            Add to Inventory\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                )}\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"previous\" className=\"flex-1 mt-0 lg:flex-initial lg:w-3/5\">\n              <div className=\"mb-3\">\n                <h3 className=\"font-medium text-foreground text-sm sm:text-base\">Products You Usually Keep</h3>\n                <p className=\"text-xs sm:text-sm text-muted-foreground\">Quick add your frequently stocked items</p>\n              </div>\n              \n              <div className=\"space-y-2 overflow-y-auto h-[40vh] lg:h-full\">\n                {previousProducts.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <i className=\"fas fa-history text-2xl sm:text-3xl mb-3\"></i>\n                    <br />\n                    <h3 className=\"text-base sm:text-lg font-medium mb-2\">No previous products yet</h3>\n                    <p className=\"text-xs sm:text-sm px-4\">Start adding products from the catalog to build your usual inventory</p>\n                  </div>\n                ) : (\n                  previousProducts.map((product: any) => (\n                    <Card \n                      key={product.id} \n                      className=\"cursor-pointer transition-colors hover:bg-muted/50\"\n                    >\n                      <CardContent className=\"p-3\">\n                        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3\">\n                          <div className=\"flex items-center gap-3\">\n                            <img \n                              src={product.imageUrl || 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=60&h=60'} \n                              alt={product.name}\n                              className=\"w-10 h-10 sm:w-12 sm:h-12 rounded object-cover flex-shrink-0\"\n                            />\n                            <div className=\"flex-1 min-w-0\">\n                              <h4 className=\"font-medium text-sm sm:text-base truncate\">{product.name}</h4>\n                              <p className=\"text-xs sm:text-sm text-muted-foreground\">{product.brand} • {product.size}</p>\n                              <div className=\"flex items-center gap-1 mt-1 flex-wrap\">\n                                <Badge variant=\"outline\" className=\"text-xs\">{product.unit}</Badge>\n                                {product.isWholesale && <Badge className=\"text-xs\">Wholesale</Badge>}\n                                <Badge variant=\"secondary\" className=\"text-xs\">Previously stocked</Badge>\n                              </div>\n                            </div>\n                          </div>\n                          <Button\n                            size=\"sm\"\n                            variant=\"default\"\n                            onClick={() => handleQuickAdd(product)}\n                            className=\"w-full sm:w-auto sm:ml-4 text-xs sm:text-sm\"\n                          >\n                            <i className=\"fas fa-plus mr-1\"></i>\n                            Add to Inventory\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                )}\n              </div>\n            </TabsContent>\n          \n          {/* Listing Configuration */}\n          <div className=\"w-full lg:w-80 border-t lg:border-t-0 lg:border-l pt-4 lg:pt-0 lg:pl-6\">\n            <h3 className=\"font-medium mb-3 text-sm sm:text-base\">Product Details</h3>\n            \n            {selectedProduct ? (\n              <>\n                <div className=\"mb-3 p-3 bg-muted rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    <img \n                      src={selectedProduct.imageUrl || 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=60&h=60'} \n                      alt={selectedProduct.name}\n                      className=\"w-10 h-10 sm:w-12 sm:h-12 rounded object-cover flex-shrink-0\"\n                    />\n                    <div className=\"min-w-0\">\n                      <h4 className=\"font-medium text-sm sm:text-base truncate\">{selectedProduct.name}</h4>\n                      <p className=\"text-xs sm:text-sm text-muted-foreground\">{selectedProduct.brand} • {selectedProduct.size}</p>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <div>\n                    <Label htmlFor=\"priceRetail\" className=\"text-sm font-medium\">Retail Price (₹) *</Label>\n                    <Input\n                      id=\"priceRetail\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={listingData.priceRetail}\n                      onChange={(e) => setListingData(prev => ({ ...prev, priceRetail: e.target.value }))}\n                      placeholder=\"Enter retail price\"\n                      className=\"text-sm\"\n                      required\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"priceWholesale\" className=\"text-sm font-medium\">Wholesale Price (₹)</Label>\n                    <Input\n                      id=\"priceWholesale\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={listingData.priceWholesale}\n                      onChange={(e) => setListingData(prev => ({ ...prev, priceWholesale: e.target.value }))}\n                      placeholder=\"Enter wholesale price\"\n                      className=\"text-sm\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"stockQty\" className=\"text-sm font-medium\">Initial Stock *</Label>\n                    <Input\n                      id=\"stockQty\"\n                      type=\"number\"\n                      value={listingData.stockQty}\n                      onChange={(e) => setListingData(prev => ({ ...prev, stockQty: e.target.value }))}\n                      placeholder=\"Enter stock quantity\"\n                      className=\"text-sm\"\n                      required\n                    />\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"available\"\n                      checked={listingData.available}\n                      onChange={(e) => setListingData(prev => ({ ...prev, available: e.target.checked }))}\n                      className=\"rounded border-gray-300\"\n                    />\n                    <Label htmlFor=\"available\" className=\"text-xs sm:text-sm\">Available for sale</Label>\n                  </div>\n                </div>\n                \n                <div className=\"flex space-x-3 pt-4\">\n                  <Button variant=\"outline\" onClick={handleClose} className=\"flex-1 text-xs sm:text-sm\">\n                    Cancel\n                  </Button>\n                  <Button \n                    onClick={handleAddListing} \n                    className=\"flex-1 text-xs sm:text-sm\"\n                    disabled={createListingMutation.isPending}\n                  >\n                    {createListingMutation.isPending ? (\n                      <>\n                        <i className=\"fas fa-spinner fa-spin mr-1 sm:mr-2\"></i>\n                        <span className=\"hidden sm:inline\">Adding to Store...</span>\n                        <span className=\"sm:hidden\">Adding...</span>\n                      </>\n                    ) : (\n                      <>\n                        <i className=\"fas fa-store mr-1 sm:mr-2\"></i>\n                        <span className=\"hidden sm:inline\">Add to My Store</span>\n                        <span className=\"sm:hidden\">Add to Store</span>\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </>\n            ) : (\n              <div className=\"text-center py-6 text-muted-foreground px-4\">\n                <p className=\"text-xs sm:text-sm\">Select a product from the catalog to configure pricing and stock</p>\n              </div>\n            )}\n          </div>\n          </div>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":17534},"client/src/components/modals/add-manual-product-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AddManualProductModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  storeId: string;\n}\n\nexport default function AddManualProductModal({ isOpen, onClose, storeId }: AddManualProductModalProps) {\n  const [formData, setFormData] = useState({\n    // Product fields\n    productName: '',\n    brand: '',\n    unit: 'kg',\n    size: '',\n    imageUrl: '',\n    isWholesale: false,\n    // Listing fields\n    priceRetail: '',\n    priceWholesale: '',\n    stockQty: '',\n    available: true\n  });\n  \n  const { toast } = useToast();\n\n  const createProductAndListingMutation = useMutation({\n    mutationFn: async (data: any) => {\n      // First create the product\n      const productData = {\n        name: data.productName,\n        brand: data.brand,\n        unit: data.unit,\n        size: data.size,\n        imageUrl: data.imageUrl,\n        isWholesale: data.isWholesale\n      };\n      \n      const productResponse = await apiRequest('POST', '/api/retailer/catalog', productData);\n      const product = await productResponse.json();\n      console.log('Created product:', product);\n      console.log('Product ID:', product.id);\n      \n      // Then create the listing\n      const listingData = {\n        storeId,\n        productId: product.id,\n        priceRetail: parseFloat(data.priceRetail),\n        priceWholesale: data.priceWholesale ? parseFloat(data.priceWholesale) : null,\n        stockQty: parseInt(data.stockQty),\n        available: data.available\n      };\n      \n      return await apiRequest('POST', '/api/retailer/listings', listingData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/retailer/listings'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/catalog'] });\n      toast({ title: \"Product created and added to inventory successfully\" });\n      handleClose();\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to create product\", \n        description: error.message || \"Please try again\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const handleClose = () => {\n    setFormData({\n      productName: '',\n      brand: '',\n      unit: 'kg',\n      size: '',\n      imageUrl: '',\n      isWholesale: false,\n      priceRetail: '',\n      priceWholesale: '',\n      stockQty: '',\n      available: true\n    });\n    onClose();\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.productName || !formData.priceRetail || !formData.stockQty) {\n      toast({ title: \"Please fill in all required fields\", variant: \"destructive\" });\n      return;\n    }\n\n    createProductAndListingMutation.mutate(formData);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-md max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Add New Product Manually</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-4 border-b pb-4\">\n            <h3 className=\"font-medium text-sm text-muted-foreground\">Product Information</h3>\n            \n            <div>\n              <Label htmlFor=\"productName\">Product Name *</Label>\n              <Input\n                id=\"productName\"\n                value={formData.productName}\n                onChange={(e) => setFormData(prev => ({ ...prev, productName: e.target.value }))}\n                placeholder=\"Enter product name\"\n                required\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"brand\">Brand</Label>\n              <Input\n                id=\"brand\"\n                value={formData.brand}\n                onChange={(e) => setFormData(prev => ({ ...prev, brand: e.target.value }))}\n                placeholder=\"Enter brand name\"\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"unit\">Unit</Label>\n                <Select value={formData.unit} onValueChange={(value) => setFormData(prev => ({ ...prev, unit: value }))}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"kg\">kg</SelectItem>\n                    <SelectItem value=\"piece\">piece</SelectItem>\n                    <SelectItem value=\"box\">box</SelectItem>\n                    <SelectItem value=\"liter\">liter</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"size\">Size/Pack</Label>\n                <Input\n                  id=\"size\"\n                  value={formData.size}\n                  onChange={(e) => setFormData(prev => ({ ...prev, size: e.target.value }))}\n                  placeholder=\"e.g., 500g\"\n                />\n              </div>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"imageUrl\">Product Image URL</Label>\n              <Input\n                id=\"imageUrl\"\n                value={formData.imageUrl}\n                onChange={(e) => setFormData(prev => ({ ...prev, imageUrl: e.target.value }))}\n                placeholder=\"https://example.com/image.jpg\"\n              />\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Checkbox \n                id=\"wholesale\"\n                checked={formData.isWholesale}\n                onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isWholesale: !!checked }))}\n              />\n              <Label htmlFor=\"wholesale\" className=\"text-sm\">Wholesale product</Label>\n            </div>\n          </div>\n          \n          <div className=\"space-y-4\">\n            <h3 className=\"font-medium text-sm text-muted-foreground\">Pricing & Stock</h3>\n            \n            <div>\n              <Label htmlFor=\"priceRetail\">Retail Price (₹) *</Label>\n              <Input\n                id=\"priceRetail\"\n                type=\"number\"\n                step=\"0.01\"\n                value={formData.priceRetail}\n                onChange={(e) => setFormData(prev => ({ ...prev, priceRetail: e.target.value }))}\n                placeholder=\"Enter retail price\"\n                required\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"priceWholesale\">Wholesale Price (₹)</Label>\n              <Input\n                id=\"priceWholesale\"\n                type=\"number\"\n                step=\"0.01\"\n                value={formData.priceWholesale}\n                onChange={(e) => setFormData(prev => ({ ...prev, priceWholesale: e.target.value }))}\n                placeholder=\"Enter wholesale price\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"stockQty\">Initial Stock *</Label>\n              <Input\n                id=\"stockQty\"\n                type=\"number\"\n                value={formData.stockQty}\n                onChange={(e) => setFormData(prev => ({ ...prev, stockQty: e.target.value }))}\n                placeholder=\"Enter stock quantity\"\n                required\n              />\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"available\"\n                checked={formData.available}\n                onCheckedChange={(checked) => setFormData(prev => ({ ...prev, available: !!checked }))}\n              />\n              <Label htmlFor=\"available\" className=\"text-sm\">Available for sale</Label>\n            </div>\n          </div>\n          \n          <div className=\"flex space-x-3 pt-4\">\n            <Button type=\"button\" variant=\"outline\" onClick={handleClose} className=\"flex-1\">\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              className=\"flex-1\" \n              disabled={createProductAndListingMutation.isPending}\n            >\n              {createProductAndListingMutation.isPending ? 'Creating...' : 'Create Product'}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8805},"client/src/pages/delivery-boy/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport Header from \"@/components/layout/header\";\nimport { NavigationSidebar, NavigationItem } from \"@/components/ui/navigation-sidebar\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useEffect } from \"react\";\nimport { useSocket } from \"@/hooks/use-socket\";\n\nexport default function DeliveryBoyDashboard() {\n  const [activeSection, setActiveSection] = useState('orders');\n  const [isNavigationOpen, setIsNavigationOpen] = useState(false);\n  const [paymentModal, setPaymentModal] = useState<{ isOpen: boolean; order: any }>({ isOpen: false, order: null });\n  const [paymentChangeModal, setPaymentChangeModal] = useState<{ isOpen: boolean; order: any }>({ isOpen: false, order: null });\n  const [deliveryRequestModal, setDeliveryRequestModal] = useState<{ isOpen: boolean; request: any }>({ isOpen: false, request: null });\n  const [paymentAmount, setPaymentAmount] = useState('');\n  const [newAmount, setNewAmount] = useState('');\n  const [reason, setReason] = useState('');\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const { socket, isConnected } = useSocket();\n\n  // Listen for delivery request notifications\n  useEffect(() => {\n    if (!socket || !isConnected || !user || user.role !== 'DELIVERY_BOY') return;\n\n    const handleDeliveryRequest = (event: MessageEvent) => {\n      try {\n        const data = JSON.parse(event.data);\n        if (data.type === 'newDeliveryRequest') {\n          setDeliveryRequestModal({ isOpen: true, request: data.payload });\n        }\n      } catch (error) {\n        console.error('Failed to parse delivery request message:', error);\n      }\n    };\n\n    socket.addEventListener('message', handleDeliveryRequest);\n\n    return () => {\n      socket.removeEventListener('message', handleDeliveryRequest);\n    };\n  }, [socket, isConnected, user]);\n\n  const { data: orders = [] } = useQuery({\n    queryKey: ['/api/delivery/orders'],\n    queryFn: async () => {\n      const response = await fetch('/api/delivery/orders', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        }\n      });\n      if (!response.ok) throw new Error('Failed to fetch orders');\n      return response.json();\n    }\n  });\n\n  const updateOrderStatusMutation = useMutation({\n    mutationFn: async ({ orderId, status }: { orderId: string; status: string }) => {\n      return apiRequest('POST', `/api/delivery/orders/${orderId}/status`, { status });\n    },\n    onSuccess: () => {\n      toast({ title: \"Order status updated successfully\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/delivery/orders'] });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Status update failed\", \n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const requestPaymentChangeMutation = useMutation({\n    mutationFn: async ({ orderId, newAmount, reason }: { orderId: string; newAmount: string; reason: string }) => {\n      return apiRequest('POST', `/api/delivery/orders/${orderId}/request-payment-change`, { newAmount, reason });\n    },\n    onSuccess: () => {\n      toast({ title: \"Payment change request sent\", description: \"Waiting for shop owner approval\" });\n      setPaymentChangeModal({ isOpen: false, order: null });\n      setNewAmount('');\n      setReason('');\n      queryClient.invalidateQueries({ queryKey: ['/api/delivery/orders'] });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Request failed\", \n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const confirmPaymentMutation = useMutation({\n    mutationFn: async ({ orderId, amountReceived }: { orderId: string; amountReceived: string }) => {\n      return apiRequest('POST', `/api/delivery/orders/${orderId}/confirm-payment`, { amountReceived, paymentMethod: 'CASH' });\n    },\n    onSuccess: () => {\n      toast({ title: \"Payment confirmed\", description: \"Order completed successfully\" });\n      setPaymentModal({ isOpen: false, order: null });\n      setPaymentAmount('');\n      queryClient.invalidateQueries({ queryKey: ['/api/delivery/orders'] });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Payment confirmation failed\", \n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const markPaymentReceivedMutation = useMutation({\n    mutationFn: async (orderId: string) => {\n      return apiRequest('POST', `/api/delivery/orders/${orderId}/payment-received`);\n    },\n    onSuccess: () => {\n      toast({ title: \"✅ Payment Received\", description: \"Retailer has been notified about payment receipt\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/delivery/orders'] });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Notification failed\", \n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const acceptDeliveryRequestMutation = useMutation({\n    mutationFn: async (requestId: string) => {\n      return apiRequest('POST', `/api/delivery-requests/${requestId}/accept`);\n    },\n    onSuccess: () => {\n      toast({ title: \"✅ Delivery Accepted!\", description: \"You have accepted this delivery request.\" });\n      setDeliveryRequestModal({ isOpen: false, request: null });\n      queryClient.invalidateQueries({ queryKey: ['/api/delivery/orders'] });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to accept delivery\", \n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const rejectDeliveryRequestMutation = useMutation({\n    mutationFn: async (requestId: string) => {\n      return apiRequest('POST', `/api/delivery-requests/${requestId}/reject`);\n    },\n    onSuccess: () => {\n      toast({ title: \"❌ Delivery Rejected\", description: \"You have rejected this delivery request.\" });\n      setDeliveryRequestModal({ isOpen: false, request: null });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to reject delivery\", \n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleRequestPaymentChange = () => {\n    if (!paymentChangeModal.order || !newAmount || !reason) return;\n    \n    requestPaymentChangeMutation.mutate({\n      orderId: paymentChangeModal.order.id,\n      newAmount,\n      reason\n    });\n  };\n\n  const handleConfirmPayment = () => {\n    if (!paymentModal.order || !paymentAmount) return;\n    \n    confirmPaymentMutation.mutate({\n      orderId: paymentModal.order.id,\n      amountReceived: paymentAmount\n    });\n  };\n\n  const openPaymentModal = (order: any) => {\n    setPaymentModal({ isOpen: true, order });\n    setPaymentAmount(order.totalAmount);\n  };\n\n  const openPaymentChangeModal = (order: any) => {\n    setPaymentChangeModal({ isOpen: true, order });\n    setNewAmount(order.totalAmount);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'READY': return 'bg-blue-100 text-blue-800';\n      case 'OUT_FOR_DELIVERY': return 'bg-orange-100 text-orange-800';\n      case 'COMPLETED': return 'bg-green-100 text-green-800';\n      case 'CANCELLED': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/5 to-accent/10\">\n      <Header onNavigationMenuClick={() => setIsNavigationOpen(true)} />\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">Delivery Dashboard</h1>\n          <p className=\"text-muted-foreground\">Manage your delivery assignments and payments</p>\n          {user && (\n            <div className=\"mt-4 p-4 bg-card border rounded-lg\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"flex items-center gap-2\">\n                  <i className=\"fas fa-id-card text-primary\"></i>\n                  <span className=\"font-medium text-foreground\">Delivery Boy ID:</span>\n                  <code className=\"px-2 py-1 bg-muted rounded text-sm font-mono\">{user.id}</code>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <i className=\"fas fa-user text-primary\"></i>\n                  <span className=\"font-medium text-foreground\">Name:</span>\n                  <span className=\"text-muted-foreground\">{user.fullName}</span>\n                </div>\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-2\">\n                <i className=\"fas fa-info-circle mr-1\"></i>\n                Share your Delivery Boy ID with retailers so they can assign orders to you\n              </p>\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex gap-4 mb-8\">\n          <Button\n            variant={activeSection === 'orders' ? 'default' : 'outline'}\n            onClick={() => setActiveSection('orders')}\n            className=\"flex items-center gap-2\"\n          >\n            <i className=\"fas fa-list\"></i>\n            My Deliveries ({orders.length})\n          </Button>\n        </div>\n\n        {activeSection === 'orders' && (\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <i className=\"fas fa-truck text-primary\"></i>\n                  Assigned Deliveries\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {orders.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <i className=\"fas fa-truck text-4xl text-muted-foreground mb-4\"></i>\n                    <h3 className=\"text-lg font-medium text-foreground mb-2\">No deliveries assigned</h3>\n                    <p className=\"text-muted-foreground\">Check back later for new delivery assignments</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {orders.map((order: any) => (\n                      <div key={order.id} className=\"border rounded-lg p-4 bg-card\">\n                        <div className=\"flex justify-between items-start mb-3\">\n                          <div>\n                            <h4 className=\"font-semibold text-foreground\">Order #{order.id.slice(-8)}</h4>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {order.store.name} • {order.store.city}\n                            </p>\n                          </div>\n                          <Badge className={getStatusColor(order.status)}>\n                            {order.status.replace('_', ' ')}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"grid md:grid-cols-2 gap-4 mb-4\">\n                          <div>\n                            <p className=\"text-sm font-medium text-foreground\">Customer</p>\n                            <p className=\"text-sm text-muted-foreground\">{order.owner.fullName}</p>\n                            <p className=\"text-sm text-muted-foreground\">{order.owner.phone}</p>\n                          </div>\n                          <div>\n                            <p className=\"text-sm font-medium text-foreground\">Delivery Address</p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {order.store.address}, {order.store.city} - {order.store.pincode}\n                            </p>\n                          </div>\n                        </div>\n\n                        <div className=\"flex justify-between items-center mb-4\">\n                          <div>\n                            <p className=\"text-sm font-medium text-foreground\">Order Amount</p>\n                            <p className=\"text-lg font-semibold text-primary\">₹{order.totalAmount}</p>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"text-sm font-medium text-foreground\">Delivery Type</p>\n                            <p className=\"text-sm text-muted-foreground\">{order.deliveryType}</p>\n                          </div>\n                        </div>\n\n                        {order.note && (\n                          <div className=\"mb-4\">\n                            <p className=\"text-sm font-medium text-foreground\">Special Instructions</p>\n                            <p className=\"text-sm text-muted-foreground\">{order.note}</p>\n                          </div>\n                        )}\n\n                        <div className=\"flex gap-2 flex-wrap\">\n                          {/* Call Button - Always available */}\n                          <Button \n                            onClick={() => window.open(`tel:${order.owner.phone}`, '_self')}\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"flex items-center gap-2\"\n                            data-testid=\"button-call-customer\"\n                          >\n                            <i className=\"fas fa-phone\"></i>\n                            Call Customer\n                          </Button>\n\n                          {/* Edit Payment Amount Button - Available for ACCEPTED, READY, and OUT_FOR_DELIVERY */}\n                          {(order.status === 'ACCEPTED' || order.status === 'READY' || order.status === 'OUT_FOR_DELIVERY') && (\n                            <Button \n                              onClick={() => openPaymentChangeModal(order)}\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"flex items-center gap-2\"\n                              data-testid=\"button-edit-payment-amount\"\n                            >\n                              <i className=\"fas fa-edit\"></i>\n                              Edit payment amount\n                            </Button>\n                          )}\n\n                          {/* Payment Received Button - Red by default, Green when approved */}\n                          {(order.status === 'ACCEPTED' || order.status === 'READY' || order.status === 'OUT_FOR_DELIVERY') && (\n                            <Button \n                              onClick={() => {\n                                // Only allow if payment change is approved (green button)\n                                if (order.paymentChangeApproved) {\n                                  markPaymentReceivedMutation.mutate(order.id);\n                                } else {\n                                  toast({ \n                                    title: \"Payment change required\", \n                                    description: \"Please request payment change first and get approval\",\n                                    variant: \"destructive\" \n                                  });\n                                }\n                              }}\n                              disabled={!order.paymentChangeApproved || markPaymentReceivedMutation.isPending}\n                              size=\"sm\"\n                              className={`flex items-center gap-2 ${\n                                order.paymentChangeApproved \n                                  ? 'bg-green-600 hover:bg-green-700' \n                                  : 'bg-red-600 hover:bg-red-700 cursor-not-allowed opacity-60'\n                              }`}\n                              data-testid=\"button-payment-received\"\n                            >\n                              <i className=\"fas fa-money-bill\"></i>\n                              {markPaymentReceivedMutation.isPending ? 'Notifying...' : 'Payment received'}\n                            </Button>\n                          )}\n                          \n                          {/* Start Delivery Button */}\n                          {order.status === 'READY' && (\n                            <Button \n                              onClick={() => updateOrderStatusMutation.mutate({ orderId: order.id, status: 'OUT_FOR_DELIVERY' })}\n                              disabled={updateOrderStatusMutation.isPending}\n                              size=\"sm\"\n                              className=\"flex items-center gap-2 bg-blue-600 hover:bg-blue-700\"\n                              data-testid=\"button-start-delivery\"\n                            >\n                              <i className=\"fas fa-truck\"></i>\n                              Start Delivery\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Payment Change Request Modal */}\n        <Dialog open={paymentChangeModal.isOpen} onOpenChange={(open) => !open && setPaymentChangeModal({ isOpen: false, order: null })}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Request Payment Change</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label>Original Amount</Label>\n                <Input \n                  value={`₹${paymentChangeModal.order?.totalAmount || ''}`}\n                  disabled\n                />\n              </div>\n              <div>\n                <Label>New Amount *</Label>\n                <Input \n                  type=\"number\"\n                  value={newAmount}\n                  onChange={(e) => setNewAmount(e.target.value)}\n                  placeholder=\"Enter new amount\"\n                />\n              </div>\n              <div>\n                <Label>Reason for Change *</Label>\n                <Textarea \n                  value={reason}\n                  onChange={(e) => setReason(e.target.value)}\n                  placeholder=\"Explain why the payment amount needs to be changed\"\n                  rows={3}\n                />\n              </div>\n              <div className=\"flex gap-2\">\n                <Button \n                  onClick={handleRequestPaymentChange}\n                  disabled={!newAmount || !reason || requestPaymentChangeMutation.isPending}\n                  className=\"flex-1\"\n                >\n                  {requestPaymentChangeMutation.isPending ? 'Sending...' : 'Send Request'}\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setPaymentChangeModal({ isOpen: false, order: null })}\n                  className=\"flex-1\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Payment Confirmation Modal */}\n        <Dialog open={paymentModal.isOpen} onOpenChange={(open) => !open && setPaymentModal({ isOpen: false, order: null })}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Confirm Payment</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label>Order Amount</Label>\n                <Input \n                  value={`₹${paymentModal.order?.totalAmount || ''}`}\n                  disabled\n                />\n              </div>\n              <div>\n                <Label>Amount Received *</Label>\n                <Input \n                  type=\"number\"\n                  value={paymentAmount}\n                  onChange={(e) => setPaymentAmount(e.target.value)}\n                  placeholder=\"Enter amount received from customer\"\n                />\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                <i className=\"fas fa-info-circle mr-2\"></i>\n                This will complete the order and update the khatabook records.\n              </div>\n              <div className=\"flex gap-2\">\n                <Button \n                  onClick={handleConfirmPayment}\n                  disabled={!paymentAmount || confirmPaymentMutation.isPending}\n                  className=\"flex-1\"\n                >\n                  {confirmPaymentMutation.isPending ? 'Processing...' : 'Confirm Payment'}\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setPaymentModal({ isOpen: false, order: null })}\n                  className=\"flex-1\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Navigation Sidebar */}\n        <NavigationSidebar\n          isOpen={isNavigationOpen}\n          onClose={() => setIsNavigationOpen(false)}\n          title=\"Navigation\"\n        >\n          <NavigationItem\n            onClick={() => {\n              setActiveSection('orders');\n              setIsNavigationOpen(false);\n            }}\n            active={activeSection === 'orders'}\n            icon=\"fas fa-truck\"\n            label=\"My Deliveries\"\n            badge={orders.length}\n            testId=\"button-nav-orders-navigation\"\n          />\n        </NavigationSidebar>\n      </div>\n\n      {/* Delivery Request Modal */}\n      <Dialog \n        open={deliveryRequestModal.isOpen} \n        onOpenChange={(open) => setDeliveryRequestModal({ isOpen: open, request: null })}\n      >\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>🚚 New Delivery Request</DialogTitle>\n          </DialogHeader>\n          \n          {deliveryRequestModal.request && (\n            <div className=\"space-y-4\">\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                <h4 className=\"font-medium text-blue-900 mb-2\">{deliveryRequestModal.request.description}</h4>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex items-start gap-2\">\n                    <i className=\"fas fa-map-marker-alt text-green-600 mt-1\"></i>\n                    <div>\n                      <span className=\"font-medium\">Pickup:</span>\n                      <p className=\"text-muted-foreground\">{deliveryRequestModal.request.pickupAddress}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start gap-2\">\n                    <i className=\"fas fa-map-marker-alt text-red-600 mt-1\"></i>\n                    <div>\n                      <span className=\"font-medium\">Delivery:</span>\n                      <p className=\"text-muted-foreground\">{deliveryRequestModal.request.deliveryAddress}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <i className=\"fas fa-money-bill text-green-600\"></i>\n                    <span className=\"font-medium\">Reward: ₹{deliveryRequestModal.request.estimatedPayment}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <i className=\"fas fa-store text-blue-600\"></i>\n                    <span className=\"font-medium\">Retailer: {deliveryRequestModal.request.retailer}</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex space-x-3\">\n                <Button \n                  onClick={() => acceptDeliveryRequestMutation.mutate(deliveryRequestModal.request.requestId)}\n                  disabled={acceptDeliveryRequestMutation.isPending}\n                  className=\"flex-1 bg-green-600 hover:bg-green-700\"\n                >\n                  {acceptDeliveryRequestMutation.isPending ? (\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  ) : (\n                    <i className=\"fas fa-check mr-2\"></i>\n                  )}\n                  Accept Delivery\n                </Button>\n                <Button \n                  variant=\"outline\"\n                  onClick={() => rejectDeliveryRequestMutation.mutate(deliveryRequestModal.request.requestId)}\n                  disabled={rejectDeliveryRequestMutation.isPending}\n                  className=\"flex-1 border-red-200 text-red-700 hover:bg-red-50\"\n                >\n                  {rejectDeliveryRequestMutation.isPending ? (\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  ) : (\n                    <i className=\"fas fa-times mr-2\"></i>\n                  )}\n                  Reject\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":25334},"client/src/components/ui/mobile-sidebar.tsx":{"content":"import React from \"react\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle } from \"@/components/ui/sheet\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface MobileSidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n  title: string;\n  children: React.ReactNode;\n}\n\nexport function MobileSidebar({ isOpen, onClose, title, children }: MobileSidebarProps) {\n  return (\n    <Sheet open={isOpen} onOpenChange={onClose}>\n      <SheetContent \n        side=\"left\" \n        className=\"w-80 p-0\"\n        data-testid=\"mobile-sidebar\"\n      >\n        <SheetHeader className=\"p-6 border-b\">\n          <SheetTitle className=\"text-left\">{title}</SheetTitle>\n        </SheetHeader>\n        <div className=\"p-6\">\n          <nav className=\"space-y-2\">\n            {children}\n          </nav>\n        </div>\n      </SheetContent>\n    </Sheet>\n  );\n}\n\ninterface SidebarNavItemProps {\n  onClick: () => void;\n  active: boolean;\n  icon: string;\n  label: string;\n  badge?: number;\n  testId?: string;\n}\n\nexport function SidebarNavItem({ onClick, active, icon, label, badge, testId }: SidebarNavItemProps) {\n  return (\n    <Button\n      onClick={onClick}\n      variant={active ? \"default\" : \"ghost\"}\n      className=\"w-full justify-start\"\n      data-testid={testId}\n    >\n      <i className={`${icon} mr-3`}></i>\n      {label}\n      {badge && badge > 0 && (\n        <Badge className=\"ml-auto\">\n          {badge}\n        </Badge>\n      )}\n    </Button>\n  );\n}","size_bytes":1499},"client/src/components/ui/profile-sidebar.tsx":{"content":"import React, { useState } from \"react\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle } from \"@/components/ui/sheet\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport EditProfileModal from \"@/components/modals/edit-profile-modal\";\nimport ChangePasswordModal from \"@/components/modals/change-password-modal\";\nimport SettingsModal from \"@/components/modals/settings-modal\";\n\ninterface ProfileSidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function ProfileSidebar({ isOpen, onClose }: ProfileSidebarProps) {\n  const { user, logout } = useAuth();\n  const [showEditProfile, setShowEditProfile] = useState(false);\n  const [showChangePassword, setShowChangePassword] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n\n  const getRoleDisplay = (role: string) => {\n    return role.replace('_', ' ');\n  };\n\n  const getUserInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase();\n  };\n\n  const getRoleIcon = (role: string) => {\n    switch (role) {\n      case 'ADMIN': return 'fas fa-user-shield';\n      case 'RETAILER': return 'fas fa-store';\n      case 'SHOP_OWNER': return 'fas fa-shopping-cart';\n      case 'DELIVERY_BOY': return 'fas fa-motorcycle';\n      default: return 'fas fa-user';\n    }\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case 'ADMIN': return 'bg-destructive/10 text-destructive';\n      case 'RETAILER': return 'bg-primary/10 text-primary';\n      case 'SHOP_OWNER': return 'bg-accent/10 text-accent';\n      case 'DELIVERY_BOY': return 'bg-secondary/80 text-secondary-foreground';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  return (\n    <Sheet open={isOpen} onOpenChange={onClose}>\n      <SheetContent \n        side=\"left\" \n        className=\"w-80 p-0\"\n        data-testid=\"profile-sidebar\"\n      >\n        <SheetHeader className=\"p-6 border-b\">\n          <SheetTitle className=\"text-left\">Profile</SheetTitle>\n        </SheetHeader>\n        \n        <div className=\"p-6 space-y-6\">\n          {/* Profile Header */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center\">\n                  <span className=\"text-xl font-bold text-primary-foreground\">\n                    {getUserInitials(user?.fullName || '')}\n                  </span>\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"text-lg font-semibold text-foreground\">\n                    {user?.fullName}\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {user?.email}\n                  </p>\n                  <Badge className={`mt-2 ${getRoleColor(user?.role || '')}`}>\n                    <i className={`${getRoleIcon(user?.role || '')} mr-1`}></i>\n                    {getRoleDisplay(user?.role || '')}\n                  </Badge>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Profile Information */}\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium text-foreground\">Full Name</label>\n              <p className=\"text-sm text-muted-foreground mt-1\">{user?.fullName}</p>\n            </div>\n            \n            <div>\n              <label className=\"text-sm font-medium text-foreground\">Email</label>\n              <p className=\"text-sm text-muted-foreground mt-1\">{user?.email}</p>\n            </div>\n            \n            <div>\n              <label className=\"text-sm font-medium text-foreground\">Role</label>\n              <p className=\"text-sm text-muted-foreground mt-1\">{getRoleDisplay(user?.role || '')}</p>\n            </div>\n            \n            {(user as any)?.phone && (\n              <div>\n                <label className=\"text-sm font-medium text-foreground\">Phone</label>\n                <p className=\"text-sm text-muted-foreground mt-1\">{(user as any).phone}</p>\n              </div>\n            )}\n          </div>\n\n          {/* Profile Actions */}\n          <div className=\"space-y-2 pt-4 border-t\">\n            <Button \n              variant=\"outline\" \n              className=\"w-full justify-start\"\n              onClick={() => setShowEditProfile(true)}\n              data-testid=\"button-edit-profile\"\n            >\n              <i className=\"fas fa-edit mr-2\"></i>\n              Edit Profile\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              className=\"w-full justify-start\"\n              onClick={() => setShowChangePassword(true)}\n              data-testid=\"button-change-password\"\n            >\n              <i className=\"fas fa-key mr-2\"></i>\n              Change Password\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              className=\"w-full justify-start\"\n              onClick={() => setShowSettings(true)}\n              data-testid=\"button-settings\"\n            >\n              <i className=\"fas fa-cog mr-2\"></i>\n              Settings\n            </Button>\n          </div>\n\n          {/* Sign Out */}\n          <div className=\"pt-4 border-t\">\n            <Button \n              variant=\"destructive\" \n              onClick={() => {\n                logout();\n                onClose();\n              }}\n              className=\"w-full justify-start\"\n              data-testid=\"button-logout-profile\"\n            >\n              <i className=\"fas fa-sign-out-alt mr-2\"></i>\n              Sign Out\n            </Button>\n          </div>\n        </div>\n      </SheetContent>\n      \n      {/* Modals */}\n      <EditProfileModal \n        isOpen={showEditProfile} \n        onClose={() => setShowEditProfile(false)} \n      />\n      \n      <ChangePasswordModal \n        isOpen={showChangePassword} \n        onClose={() => setShowChangePassword(false)} \n      />\n      \n      <SettingsModal \n        isOpen={showSettings} \n        onClose={() => setShowSettings(false)} \n      />\n    </Sheet>\n  );\n}","size_bytes":6302},"client/src/components/modals/change-password-modal.tsx":{"content":"import React from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst changePasswordSchema = z.object({\n  currentPassword: z.string().min(1, \"Current password is required\"),\n  newPassword: z.string().min(6, \"New password must be at least 6 characters\"),\n  confirmPassword: z.string().min(1, \"Please confirm your new password\"),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype ChangePasswordData = z.infer<typeof changePasswordSchema>;\n\ninterface ChangePasswordModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function ChangePasswordModal({ isOpen, onClose }: ChangePasswordModalProps) {\n  const { toast } = useToast();\n  \n  const form = useForm<ChangePasswordData>({\n    resolver: zodResolver(changePasswordSchema),\n    defaultValues: {\n      currentPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const changePasswordMutation = useMutation({\n    mutationFn: async (data: ChangePasswordData) => {\n      const response = await fetch('/api/auth/change-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        },\n        body: JSON.stringify({\n          currentPassword: data.currentPassword,\n          newPassword: data.newPassword\n        })\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to change password');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Password changed successfully\" });\n      onClose();\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to change password\", \n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleSubmit = (data: ChangePasswordData) => {\n    changePasswordMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"change-password-modal\">\n        <DialogHeader>\n          <DialogTitle>Change Password</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"currentPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Current Password</FormLabel>\n                  <FormControl>\n                    <Input \n                      {...field} \n                      type=\"password\"\n                      data-testid=\"input-current-password\"\n                      placeholder=\"Enter your current password\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"newPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>New Password</FormLabel>\n                  <FormControl>\n                    <Input \n                      {...field} \n                      type=\"password\"\n                      data-testid=\"input-new-password\"\n                      placeholder=\"Enter your new password\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"confirmPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Confirm New Password</FormLabel>\n                  <FormControl>\n                    <Input \n                      {...field} \n                      type=\"password\"\n                      data-testid=\"input-confirm-password\"\n                      placeholder=\"Confirm your new password\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex gap-2 pt-4\">\n              <Button \n                type=\"submit\" \n                disabled={changePasswordMutation.isPending}\n                className=\"flex-1\"\n                data-testid=\"button-save-password\"\n              >\n                {changePasswordMutation.isPending ? 'Changing...' : 'Change Password'}\n              </Button>\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={onClose}\n                className=\"flex-1\"\n                data-testid=\"button-cancel-password\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5514},"client/src/components/modals/edit-profile-modal.tsx":{"content":"import React from \"react\";\nimport { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nconst editProfileSchema = z.object({\n  fullName: z.string().min(1, \"Full name is required\"),\n  email: z.string().email(\"Valid email is required\"),\n  phone: z.string().optional(),\n});\n\ntype EditProfileData = z.infer<typeof editProfileSchema>;\n\ninterface EditProfileModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function EditProfileModal({ isOpen, onClose }: EditProfileModalProps) {\n  const { user, refetchUser } = useAuth();\n  const { toast } = useToast();\n  \n  const form = useForm<EditProfileData>({\n    resolver: zodResolver(editProfileSchema),\n    defaultValues: {\n      fullName: user?.fullName || \"\",\n      email: user?.email || \"\",\n      phone: (user as any)?.phone || \"\",\n    },\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: EditProfileData) => {\n      const response = await fetch('/api/auth/profile', {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to update profile');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Profile updated successfully\" });\n      // Profile updated - user data will be refreshed on next auth check\n      onClose();\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to update profile\", \n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleSubmit = (data: EditProfileData) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"edit-profile-modal\">\n        <DialogHeader>\n          <DialogTitle>Edit Profile</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"fullName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Full Name</FormLabel>\n                  <FormControl>\n                    <Input \n                      {...field} \n                      data-testid=\"input-fullname\"\n                      placeholder=\"Enter your full name\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input \n                      {...field} \n                      type=\"email\"\n                      data-testid=\"input-email\"\n                      placeholder=\"Enter your email\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"phone\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Phone (Optional)</FormLabel>\n                  <FormControl>\n                    <Input \n                      {...field} \n                      data-testid=\"input-phone\"\n                      placeholder=\"Enter your phone number\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex gap-2 pt-4\">\n              <Button \n                type=\"submit\" \n                disabled={updateProfileMutation.isPending}\n                className=\"flex-1\"\n                data-testid=\"button-save-profile\"\n              >\n                {updateProfileMutation.isPending ? 'Updating...' : 'Update Profile'}\n              </Button>\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={onClose}\n                className=\"flex-1\"\n                data-testid=\"button-cancel-profile\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5280},"client/src/components/modals/settings-modal.tsx":{"content":"import React from \"react\";\nimport { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface SettingsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function SettingsModal({ isOpen, onClose }: SettingsModalProps) {\n  const { toast } = useToast();\n  const [settings, setSettings] = useState({\n    emailNotifications: true,\n    pushNotifications: true,\n    orderUpdates: true,\n    marketingEmails: false,\n    darkMode: false,\n    soundEffects: true,\n  });\n\n  const handleSettingChange = (key: keyof typeof settings, value: boolean) => {\n    setSettings(prev => ({ ...prev, [key]: value }));\n    // In a real app, you'd save this to the backend\n    toast({ \n      title: \"Setting updated\", \n      description: \"Your preferences have been saved\" \n    });\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"settings-modal\">\n        <DialogHeader>\n          <DialogTitle>Settings</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Notifications Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Notifications</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"email-notifications\" className=\"text-sm\">Email Notifications</Label>\n                <Switch\n                  id=\"email-notifications\"\n                  checked={settings.emailNotifications}\n                  onCheckedChange={(checked) => handleSettingChange('emailNotifications', checked)}\n                  data-testid=\"switch-email-notifications\"\n                />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"push-notifications\" className=\"text-sm\">Push Notifications</Label>\n                <Switch\n                  id=\"push-notifications\"\n                  checked={settings.pushNotifications}\n                  onCheckedChange={(checked) => handleSettingChange('pushNotifications', checked)}\n                  data-testid=\"switch-push-notifications\"\n                />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"order-updates\" className=\"text-sm\">Order Updates</Label>\n                <Switch\n                  id=\"order-updates\"\n                  checked={settings.orderUpdates}\n                  onCheckedChange={(checked) => handleSettingChange('orderUpdates', checked)}\n                  data-testid=\"switch-order-updates\"\n                />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"marketing-emails\" className=\"text-sm\">Marketing Emails</Label>\n                <Switch\n                  id=\"marketing-emails\"\n                  checked={settings.marketingEmails}\n                  onCheckedChange={(checked) => handleSettingChange('marketingEmails', checked)}\n                  data-testid=\"switch-marketing-emails\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* App Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">App Preferences</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"dark-mode\" className=\"text-sm\">Dark Mode</Label>\n                <Switch\n                  id=\"dark-mode\"\n                  checked={settings.darkMode}\n                  onCheckedChange={(checked) => handleSettingChange('darkMode', checked)}\n                  data-testid=\"switch-dark-mode\"\n                />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"sound-effects\" className=\"text-sm\">Sound Effects</Label>\n                <Switch\n                  id=\"sound-effects\"\n                  checked={settings.soundEffects}\n                  onCheckedChange={(checked) => handleSettingChange('soundEffects', checked)}\n                  data-testid=\"switch-sound-effects\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"flex gap-2 pt-4\">\n            <Button \n              onClick={onClose}\n              className=\"flex-1\"\n              data-testid=\"button-close-settings\"\n            >\n              Close\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5142},"client/src/components/ui/navigation-sidebar.tsx":{"content":"import React from \"react\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle } from \"@/components/ui/sheet\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface NavigationSidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n  title: string;\n  children: React.ReactNode;\n}\n\nexport function NavigationSidebar({ isOpen, onClose, title, children }: NavigationSidebarProps) {\n  return (\n    <Sheet open={isOpen} onOpenChange={onClose}>\n      <SheetContent \n        side=\"left\" \n        className=\"w-80 p-0\"\n        data-testid=\"navigation-sidebar\"\n      >\n        <SheetHeader className=\"p-6 border-b\">\n          <SheetTitle className=\"text-left\">{title}</SheetTitle>\n        </SheetHeader>\n        <div className=\"p-6\">\n          <nav className=\"space-y-2\">\n            {children}\n          </nav>\n        </div>\n      </SheetContent>\n    </Sheet>\n  );\n}\n\ninterface NavigationItemProps {\n  onClick: () => void;\n  active: boolean;\n  icon: string;\n  label: string;\n  badge?: number;\n  testId?: string;\n}\n\nexport function NavigationItem({ onClick, active, icon, label, badge, testId }: NavigationItemProps) {\n  return (\n    <Button\n      onClick={onClick}\n      variant={active ? \"default\" : \"ghost\"}\n      className=\"w-full justify-start\"\n      data-testid={testId}\n    >\n      <i className={`${icon} mr-3`}></i>\n      {label}\n      {badge && badge > 0 && (\n        <Badge className=\"ml-auto\">\n          {badge}\n        </Badge>\n      )}\n    </Button>\n  );\n}","size_bytes":1515},"server/seed-config.ts":{"content":"/**\n * SEED CONFIGURATION FOR FUTURE AGENT REQUIREMENTS\n * \n * This file contains configuration templates that can be easily modified\n * by future agent prompts to accommodate new requirements.\n */\n\nexport interface SeedConfig {\n  // User distribution\n  ADMIN_COUNT: number;\n  RETAILER_COUNT: number;\n  SHOP_OWNER_COUNT: number;\n  DELIVERY_BOY_COUNT: number;\n  \n  // Business data\n  STORE_COUNT: number;\n  PRODUCT_COUNT: number;\n  LISTINGS_PER_STORE: number;\n  ORDERS_COUNT: number;\n  ITEMS_PER_ORDER: number;\n  \n  // Behavior settings\n  CLEAR_EXISTING_DATA: boolean;\n  CREATE_TEST_USERS: boolean;\n  SEED_REALISTIC_DATA: boolean;\n  \n  // Test credentials\n  TEST_USERS: Array<{\n    email: string;\n    password: string;\n    role: 'ADMIN' | 'RETAILER' | 'SHOP_OWNER' | 'DELIVERY_BOY';\n    fullName: string;\n  }>;\n}\n\n// Default configuration - can be overridden by agent prompts\nexport const DEFAULT_CONFIG: SeedConfig = {\n  ADMIN_COUNT: 10,\n  RETAILER_COUNT: 20,\n  SHOP_OWNER_COUNT: 20,\n  DELIVERY_BOY_COUNT: 15,\n  \n  STORE_COUNT: 21,\n  PRODUCT_COUNT: 50,\n  LISTINGS_PER_STORE: 10,\n  ORDERS_COUNT: 50,\n  ITEMS_PER_ORDER: 3,\n  \n  CLEAR_EXISTING_DATA: true,\n  CREATE_TEST_USERS: true,\n  SEED_REALISTIC_DATA: true,\n  \n  TEST_USERS: [\n    { email: 'admin@test.com', password: 'admin123', role: 'ADMIN', fullName: 'Test Admin' },\n    { email: 'retailer@test.com', password: 'retailer123', role: 'RETAILER', fullName: 'Test Retailer' },\n    { email: 'shop@test.com', password: 'shop123', role: 'SHOP_OWNER', fullName: 'Test Shop Owner' },\n    { email: 'delivery@test.com', password: 'delivery123', role: 'DELIVERY_BOY', fullName: 'Test Delivery Boy' },\n  ]\n};\n\n// Preset configurations for different scenarios\nexport const CONFIGS = {\n  // Minimal setup for quick testing\n  MINIMAL: {\n    ...DEFAULT_CONFIG,\n    ADMIN_COUNT: 1,\n    RETAILER_COUNT: 2,\n    SHOP_OWNER_COUNT: 2,\n    DELIVERY_BOY_COUNT: 1,\n    STORE_COUNT: 3,\n    PRODUCT_COUNT: 10,\n    ORDERS_COUNT: 5,\n  } as SeedConfig,\n  \n  // Development setup with more data\n  DEVELOPMENT: {\n    ...DEFAULT_CONFIG,\n    ADMIN_COUNT: 5,\n    RETAILER_COUNT: 15,\n    SHOP_OWNER_COUNT: 15,\n    DELIVERY_BOY_COUNT: 10,\n    STORE_COUNT: 20,\n    PRODUCT_COUNT: 100,\n    ORDERS_COUNT: 100,\n  } as SeedConfig,\n  \n  // Production-like setup with extensive data\n  PRODUCTION_LIKE: {\n    ...DEFAULT_CONFIG,\n    ADMIN_COUNT: 3,\n    RETAILER_COUNT: 50,\n    SHOP_OWNER_COUNT: 200,\n    DELIVERY_BOY_COUNT: 30,\n    STORE_COUNT: 50,\n    PRODUCT_COUNT: 500,\n    ORDERS_COUNT: 1000,\n  } as SeedConfig,\n  \n  // Demo setup for presentations\n  DEMO: {\n    ...DEFAULT_CONFIG,\n    CLEAR_EXISTING_DATA: true,\n    CREATE_TEST_USERS: true,\n    ADMIN_COUNT: 2,\n    RETAILER_COUNT: 5,\n    SHOP_OWNER_COUNT: 10,\n    DELIVERY_BOY_COUNT: 3,\n    STORE_COUNT: 8,\n    PRODUCT_COUNT: 25,\n    ORDERS_COUNT: 15,\n  } as SeedConfig,\n};\n\n/**\n * EXTENSION TEMPLATES FOR FUTURE AGENT PROMPTS\n * \n * These functions provide templates that can be easily modified\n * to accommodate new feature requirements.\n */\n\n// Template for adding new user roles\nexport function createCustomUserConfig(role: string, count: number) {\n  return {\n    [`${role.toUpperCase()}_COUNT`]: count,\n  };\n}\n\n// Template for adding new test users\nexport function createTestUser(email: string, password: string, role: string, fullName: string) {\n  return {\n    email,\n    password,\n    role: role as 'ADMIN' | 'RETAILER' | 'SHOP_OWNER' | 'DELIVERY_BOY',\n    fullName,\n  };\n}\n\n// Template for feature-specific configurations\nexport function createFeatureConfig(featureName: string, options: Record<string, any>) {\n  return {\n    [`${featureName.toUpperCase()}_ENABLED`]: true,\n    [`${featureName.toUpperCase()}_CONFIG`]: options,\n  };\n}","size_bytes":3705},"server/seed-readme.md":{"content":"# Database Seeding Documentation for Future Agent Requirements\n\n## Current Status\n✅ **Migration Completed Successfully**\n\nThe ShopLink commerce application has been successfully migrated to the Replit environment with:\n- PostgreSQL database connected and schema deployed\n- Test user accounts created for all roles\n- Application running on port 5000\n- All dependencies installed and working\n\n## Current Database Schema\n\n### Core Tables\n- `users` - All user accounts (Admin, Retailer, Shop Owner, Delivery Boy)\n- `stores` - Retailer stores \n- `productCatalog` - Global product catalog managed by admins\n- `listings` - Products listed by retailers in their stores\n- `orders` - Customer orders placed to retailers\n- `orderItems` - Individual items within orders\n- `orderEvents` - Order status change history\n\n### Test User Accounts\n- **Admin**: admin@test.com / admin123\n- **Retailer**: retailer@test.com / retailer123\n- **Shop Owner**: shop@test.com / shop123\n- **Delivery Boy**: delivery@test.com / delivery123\n\n## For Future Agent Enhancements\n\n### Quick Commands\n```bash\n# Reseed database with fresh test data\ntsx server/seed-database.ts\n\n# Push schema changes to database\nnpm run db:push\n\n# Force push if there are warnings\nnpm run db:push --force\n\n# Start the application\nnpm run dev\n```\n\n### Adding New Features\n\n#### 1. Database Schema Changes\n1. Edit `shared/schema.ts` to add new tables or modify existing ones\n2. Run `npm run db:push` to apply changes\n3. Update `server/seed-database.ts` if test data is needed\n\n#### 2. Adding New User Roles\n1. Update `roleEnum` in `shared/schema.ts`\n2. Add role-specific routes in `server/routes.ts`\n3. Create role dashboard in `client/src/pages/[role]/dashboard.tsx`\n4. Update authentication logic in `client/src/hooks/use-auth.tsx`\n\n#### 3. Real-time Features\n- WebSocket server is already configured in `server/index.ts`\n- Client WebSocket connection is in `client/src/lib/socket.ts`\n- Toast notifications are set up in `client/src/components/toast-notifications.tsx`\n\n#### 4. Adding New Business Logic\n- Add API routes in `server/routes.ts`\n- Update storage interface in `server/storage.ts` if needed\n- Add frontend components in `client/src/components/`\n- Use React Query for data fetching in components\n\n### Common Patterns\n\n#### Creating New API Endpoints\n```typescript\n// In server/routes.ts\napp.get('/api/new-feature', authenticateToken, async (req, res) => {\n  // Implementation\n});\n```\n\n#### Adding New UI Components\n```typescript\n// Use existing shadcn/ui components\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\n```\n\n#### Database Queries\n```typescript\n// Use Drizzle ORM with proper types\nimport { db } from './db.js';\nimport * as schema from '../shared/schema.js';\n\nconst results = await db.select().from(schema.tableName);\n```\n\n### Configuration for Different Scenarios\n\nThe application can be easily configured for different use cases:\n\n- **Demo Setup**: Minimal data for presentations\n- **Development**: Rich test data for development\n- **Testing**: Clean slate with specific test scenarios\n- **Production**: Real data migration tools\n\n### Important Notes for Future Agents\n\n1. **Database Safety**: Always use `npm run db:push` for schema changes, never write manual SQL migrations\n2. **Authentication**: JWT tokens are used with role-based access control\n3. **Real-time**: WebSocket connections are established per user for order notifications\n4. **Types**: Shared types in `shared/schema.ts` ensure type safety across frontend and backend\n5. **State Management**: Zustand for client state, React Query for server state\n\n### File Structure for Reference\n```\n├── client/src/\n│   ├── components/     # Reusable UI components\n│   ├── pages/         # Route-based page components\n│   ├── hooks/         # Custom React hooks\n│   └── lib/           # Utilities and configurations\n├── server/\n│   ├── index.ts       # Express server with WebSocket\n│   ├── routes.ts      # API endpoints\n│   ├── storage.ts     # Database operations\n│   └── seed-database.ts # Database seeding\n└── shared/\n    └── schema.ts      # Database schema and types\n```\n\nThis foundation provides a solid base for extending the application with new features, user roles, or business logic as requirements evolve.","size_bytes":4376}},"version":1}